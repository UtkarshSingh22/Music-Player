/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}();const t=[{name:"On & On",artist:"Cartoon x Havsun x Wayout, ft. Daniel Levi",imageSrc:"/song-images/on&on.jpg",songSrc:"/sample-songs/Cartoon - On & On (ft. Daniel Levi)(Cartoon x HAVSUN x WAYOUT Remix) [NCS Release].mp3"},{name:"Mortals",artist:"Warriyo, feat. Laura Brehm",imageSrc:"/song-images/warriyo.jpg",songSrc:"/sample-songs/Warriyo - Mortals (feat. Laura Brehm) [NCS Release].mp3"},{name:"Cradles",artist:"Sub Urban",imageSrc:"/song-images/cradles.jpg",songSrc:"/sample-songs/Sub Urban - Cradles [NCS Release].mp3"},{name:"Adventures",artist:"William Ekh, feat. Alexa Lusader",imageSrc:"/song-images/adventures.jpg",songSrc:"/sample-songs/William Ekh - Adventures (feat. Alexa Lusader) [NCS Release].mp3"},{name:"Set Me Free",artist:"Simbai & Frizzy The Streetz",imageSrc:"/song-images/setmefree.jpg",songSrc:"/sample-songs/Simbai & Frizzy The Streetz - Set Me Free [NCS Release].mp3"},{name:"Heroes Tonight",artist:"Janji, ft. Johnning",imageSrc:"/song-images/janji.jpg",songSrc:"/sample-songs/Janji - Heroes Tonight (feat. Johnning) [NCS Release].mp3"}],n=(e,t,n)=>{const s=document.createElement("img");s.classList.add("card-img"),s.src=e;const i=document.createElement("div");i.classList="musicBox";const r=document.createElement("div");r.classList.add("music-name"),r.textContent=t;const o=document.createElement("div");o.classList.add("artist-name"),o.textContent=n,i.appendChild(r),i.appendChild(o);const a=document.createElement("div");return a.classList.add("cards"),a.appendChild(s),a.appendChild(i),a},s=e=>{const n=document.querySelector(".main");"songData"==n.lastChild.className&&n.removeChild(n.lastChild),n.appendChild((e=>{const n=document.createElement("div");n.classList="songData";const s=document.createElement("div");s.classList="imageBox";const i=document.createElement("img");i.classList="mainImg",i.setAttribute("src",t[e].imageSrc);const r=document.createElement("div");r.classList="songName",r.textContent=t[e].name;const o=document.createElement("div");o.classList="artist",o.textContent=t[e].artist;const a=document.createElement("div");a.classList="playlistBtn";const c=document.createElement("img");return c.classList="playlistIcon",c.src="/icons/noun-add-to-playlist-1565259 (1).svg",a.appendChild(c),s.appendChild(i),s.appendChild(a),n.appendChild(s),n.appendChild(r),n.appendChild(o),n})(e))},i=e=>{let n=document.querySelector(".audioElement"),i=document.querySelector(".playBtn"),r=document.querySelector(".playBtnImg");const o=document.querySelector(".volume");let a=document.querySelector(".currTime");const c=document.querySelector(".totalTime"),u=document.querySelector(".music-gif");n.setAttribute("src",t[e].songSrc),r.src="/icons/pause-svgrepo-com.svg";let h=n.play();void 0!==h&&h.then((()=>{n.play()})).catch((e=>{})),u.setAttribute("src","/icons/Music.gif"),i.addEventListener("click",(()=>{n.paused?(n.play(),r.src="/icons/pause-svgrepo-com.svg",u.style.opacity="1"):(n.pause(),r.src="/icons/play-svgrepo-com.svg",u.style.opacity="0")}));const l=document.querySelector(".musicBar");n.addEventListener("timeupdate",(()=>{if(n.currentTime==n.duration){e==t.length-1?e=0:e++,s(e),n.setAttribute("src",t[e].songSrc);let i=n.play();void 0!==i&&i.then((()=>{n.play()})).catch((e=>{}))}let i=n.currentTime/n.duration*100;l.value=i;let r=Math.floor(n.currentTime/60),o=Math.floor(n.currentTime%60),u="",h="";r/10==0&&(u="0"),0==Math.floor(o/10)&&(h="0"),a.textContent=u+r+":"+h+o+"/";let d=Math.floor(n.duration/60),f=Math.floor(n.duration%60),p="",m="";d/10==0&&(p="0"),0==Math.floor(f/10)&&(m="0"),0==Number.isNaN(d)?c.textContent=p+d+":"+m+f:c.textContent="00:00"})),l.addEventListener("click",(e=>{n.currentTime=e.offsetX/e.srcElement.clientWidth*n.duration}));const d=document.querySelector(".prevBtn");document.querySelector(".nextBtn").addEventListener("click",(()=>{n.paused&&(r.src="/icons/pause-svgrepo-com.svg"),e==t.length-1?e=0:e++,s(e),n.setAttribute("src",t[e].songSrc);let i=n.play();void 0!==i&&i.then((()=>{n.play()})).catch((e=>{}))})),d.addEventListener("click",(()=>{n.paused&&(r.src="/icons/pause-svgrepo-com.svg"),0==e?e=t.length-1:e--,s(e),n.setAttribute("src",t[e].songSrc);let i=n.play();void 0!==i&&i.then((()=>{n.play()})).catch((e=>{}))})),o.addEventListener("click",(e=>{n.volume=e.offsetX/e.srcElement.clientWidth}))},r=function(e){const t=[];let n=0;for(let s=0;s<e.length;s++){let i=e.charCodeAt(s);i<128?t[n++]=i:i<2048?(t[n++]=i>>6|192,t[n++]=63&i|128):55296==(64512&i)&&s+1<e.length&&56320==(64512&e.charCodeAt(s+1))?(i=65536+((1023&i)<<10)+(1023&e.charCodeAt(++s)),t[n++]=i>>18|240,t[n++]=i>>12&63|128,t[n++]=i>>6&63|128,t[n++]=63&i|128):(t[n++]=i>>12|224,t[n++]=i>>6&63|128,t[n++]=63&i|128)}return t},o={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();const n=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,s=[];for(let t=0;t<e.length;t+=3){const i=e[t],r=t+1<e.length,o=r?e[t+1]:0,a=t+2<e.length,c=a?e[t+2]:0,u=i>>2,h=(3&i)<<4|o>>4;let l=(15&o)<<2|c>>6,d=63&c;a||(d=64,r||(l=64)),s.push(n[u],n[h],n[l],n[d])}return s.join("")},encodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(r(e),t)},decodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){const t=[];let n=0,s=0;for(;n<e.length;){const i=e[n++];if(i<128)t[s++]=String.fromCharCode(i);else if(i>191&&i<224){const r=e[n++];t[s++]=String.fromCharCode((31&i)<<6|63&r)}else if(i>239&&i<365){const r=((7&i)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++])-65536;t[s++]=String.fromCharCode(55296+(r>>10)),t[s++]=String.fromCharCode(56320+(1023&r))}else{const r=e[n++],o=e[n++];t[s++]=String.fromCharCode((15&i)<<12|(63&r)<<6|63&o)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray(e,t){this.init_();const n=t?this.charToByteMapWebSafe_:this.charToByteMap_,s=[];for(let t=0;t<e.length;){const i=n[e.charAt(t++)],r=t<e.length?n[e.charAt(t)]:0;++t;const o=t<e.length?n[e.charAt(t)]:64;++t;const a=t<e.length?n[e.charAt(t)]:64;if(++t,null==i||null==r||null==o||null==a)throw Error();const c=i<<2|r>>4;if(s.push(c),64!==o){const e=r<<4&240|o>>2;if(s.push(e),64!==a){const e=o<<6&192|a;s.push(e)}}}return s},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}},a=function(e){return function(e){const t=r(e);return o.encodeByteArray(t,!0)}(e).replace(/\./g,"")};class c{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}wrapCallback(e){return(t,n)=>{t?this.reject(t):this.resolve(n),"function"==typeof e&&(this.promise.catch((()=>{})),1===e.length?e(t):e(t,n))}}}function u(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function h(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(u())}function l(){const e="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof e&&void 0!==e.id}function d(){return"object"==typeof navigator&&"ReactNative"===navigator.product}function f(){const e=u();return e.indexOf("MSIE ")>=0||e.indexOf("Trident/")>=0}class p extends Error{constructor(e,t,n){super(t),this.code=e,this.customData=n,this.name="FirebaseError",Object.setPrototypeOf(this,p.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,m.prototype.create)}}class m{constructor(e,t,n){this.service=e,this.serviceName=t,this.errors=n}create(e,...t){const n=t[0]||{},s=`${this.service}/${e}`,i=this.errors[e],r=i?function(e,t){return e.replace(g,((e,n)=>{const s=t[n];return null!=s?String(s):`<${n}?>`}))}(i,n):"Error",o=`${this.serviceName}: ${r} (${s}).`;return new p(s,o,n)}}const g=/\{\$([^}]+)}/g;function y(e,t){if(e===t)return!0;const n=Object.keys(e),s=Object.keys(t);for(const i of n){if(!s.includes(i))return!1;const n=e[i],r=t[i];if(v(n)&&v(r)){if(!y(n,r))return!1}else if(n!==r)return!1}for(const e of s)if(!n.includes(e))return!1;return!0}function v(e){return null!==e&&"object"==typeof e}function w(e){const t=[];for(const[n,s]of Object.entries(e))Array.isArray(s)?s.forEach((e=>{t.push(encodeURIComponent(n)+"="+encodeURIComponent(e))})):t.push(encodeURIComponent(n)+"="+encodeURIComponent(s));return t.length?"&"+t.join("&"):""}function E(e){const t={};return e.replace(/^\?/,"").split("&").forEach((e=>{if(e){const[n,s]=e.split("=");t[decodeURIComponent(n)]=decodeURIComponent(s)}})),t}function I(e){const t=e.indexOf("?");if(!t)return"";const n=e.indexOf("#",t);return e.substring(t,n>0?n:void 0)}class T{constructor(e,t){this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=t,this.task.then((()=>{e(this)})).catch((e=>{this.error(e)}))}next(e){this.forEachObserver((t=>{t.next(e)}))}error(e){this.forEachObserver((t=>{t.error(e)})),this.close(e)}complete(){this.forEachObserver((e=>{e.complete()})),this.close()}subscribe(e,t,n){let s;if(void 0===e&&void 0===t&&void 0===n)throw new Error("Missing Observer.");s=function(e,t){if("object"!=typeof e||null===e)return!1;for(const t of["next","error","complete"])if(t in e&&"function"==typeof e[t])return!0;return!1}(e)?e:{next:e,error:t,complete:n},void 0===s.next&&(s.next=b),void 0===s.error&&(s.error=b),void 0===s.complete&&(s.complete=b);const i=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((()=>{try{this.finalError?s.error(this.finalError):s.complete()}catch(e){}})),this.observers.push(s),i}unsubscribeOne(e){void 0!==this.observers&&void 0!==this.observers[e]&&(delete this.observers[e],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))}forEachObserver(e){if(!this.finalized)for(let t=0;t<this.observers.length;t++)this.sendOne(t,e)}sendOne(e,t){this.task.then((()=>{if(void 0!==this.observers&&void 0!==this.observers[e])try{t(this.observers[e])}catch(e){"undefined"!=typeof console&&console.error&&console.error(e)}}))}close(e){this.finalized||(this.finalized=!0,void 0!==e&&(this.finalError=e),this.task.then((()=>{this.observers=void 0,this.onNoObservers=void 0})))}}function b(){}function _(e){return e&&e._delegate?e._delegate:e}class S{constructor(e,t,n){this.name=e,this.instanceFactory=t,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(e){return this.instantiationMode=e,this}setMultipleInstances(e){return this.multipleInstances=e,this}setServiceProps(e){return this.serviceProps=e,this}setInstanceCreatedCallback(e){return this.onInstanceCreated=e,this}}const C="[DEFAULT]";class k{constructor(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(e){const t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){const e=new c;if(this.instancesDeferred.set(t,e),this.isInitialized(t)||this.shouldAutoInitialize())try{const n=this.getOrInitializeService({instanceIdentifier:t});n&&e.resolve(n)}catch(e){}}return this.instancesDeferred.get(t).promise}getImmediate(e){var t;const n=this.normalizeInstanceIdentifier(null==e?void 0:e.identifier),s=null!==(t=null==e?void 0:e.optional)&&void 0!==t&&t;if(!this.isInitialized(n)&&!this.shouldAutoInitialize()){if(s)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:n})}catch(e){if(s)return null;throw e}}getComponent(){return this.component}setComponent(e){if(e.name!==this.name)throw Error(`Mismatching Component ${e.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=e,this.shouldAutoInitialize()){if(function(e){return"EAGER"===e.instantiationMode}(e))try{this.getOrInitializeService({instanceIdentifier:C})}catch(e){}for(const[e,t]of this.instancesDeferred.entries()){const n=this.normalizeInstanceIdentifier(e);try{const e=this.getOrInitializeService({instanceIdentifier:n});t.resolve(e)}catch(e){}}}}clearInstance(e="[DEFAULT]"){this.instancesDeferred.delete(e),this.instancesOptions.delete(e),this.instances.delete(e)}async delete(){const e=Array.from(this.instances.values());await Promise.all([...e.filter((e=>"INTERNAL"in e)).map((e=>e.INTERNAL.delete())),...e.filter((e=>"_delete"in e)).map((e=>e._delete()))])}isComponentSet(){return null!=this.component}isInitialized(e="[DEFAULT]"){return this.instances.has(e)}getOptions(e="[DEFAULT]"){return this.instancesOptions.get(e)||{}}initialize(e={}){const{options:t={}}=e,n=this.normalizeInstanceIdentifier(e.instanceIdentifier);if(this.isInitialized(n))throw Error(`${this.name}(${n}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const s=this.getOrInitializeService({instanceIdentifier:n,options:t});for(const[e,t]of this.instancesDeferred.entries())n===this.normalizeInstanceIdentifier(e)&&t.resolve(s);return s}onInit(e,t){var n;const s=this.normalizeInstanceIdentifier(t),i=null!==(n=this.onInitCallbacks.get(s))&&void 0!==n?n:new Set;i.add(e),this.onInitCallbacks.set(s,i);const r=this.instances.get(s);return r&&e(r,s),()=>{i.delete(e)}}invokeOnInitCallbacks(e,t){const n=this.onInitCallbacks.get(t);if(n)for(const s of n)try{s(e,t)}catch(e){}}getOrInitializeService({instanceIdentifier:e,options:t={}}){let n=this.instances.get(e);if(!n&&this.component&&(n=this.component.instanceFactory(this.container,{instanceIdentifier:(s=e,s===C?void 0:s),options:t}),this.instances.set(e,n),this.instancesOptions.set(e,t),this.invokeOnInitCallbacks(n,e),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,e,n)}catch(e){}var s;return n||null}normalizeInstanceIdentifier(e="[DEFAULT]"){return this.component?this.component.multipleInstances?e:C:e}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class A{constructor(e){this.name=e,this.providers=new Map}addComponent(e){const t=this.getProvider(e.name);if(t.isComponentSet())throw new Error(`Component ${e.name} has already been registered with ${this.name}`);t.setComponent(e)}addOrOverwriteComponent(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)}getProvider(e){if(this.providers.has(e))return this.providers.get(e);const t=new k(e,this);return this.providers.set(e,t),t}getProviders(){return Array.from(this.providers.values())}}const N=[];var D,R;(R=D||(D={}))[R.DEBUG=0]="DEBUG",R[R.VERBOSE=1]="VERBOSE",R[R.INFO=2]="INFO",R[R.WARN=3]="WARN",R[R.ERROR=4]="ERROR",R[R.SILENT=5]="SILENT";const O={debug:D.DEBUG,verbose:D.VERBOSE,info:D.INFO,warn:D.WARN,error:D.ERROR,silent:D.SILENT},L=D.INFO,P={[D.DEBUG]:"log",[D.VERBOSE]:"log",[D.INFO]:"info",[D.WARN]:"warn",[D.ERROR]:"error"},M=(e,t,...n)=>{if(t<e.logLevel)return;const s=(new Date).toISOString(),i=P[t];if(!i)throw new Error(`Attempted to log a message with an invalid logType (value: ${t})`);console[i](`[${s}]  ${e.name}:`,...n)};class x{constructor(e){this.name=e,this._logLevel=L,this._logHandler=M,this._userLogHandler=null,N.push(this)}get logLevel(){return this._logLevel}set logLevel(e){if(!(e in D))throw new TypeError(`Invalid value "${e}" assigned to \`logLevel\``);this._logLevel=e}setLogLevel(e){this._logLevel="string"==typeof e?O[e]:e}get logHandler(){return this._logHandler}set logHandler(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e}get userLogHandler(){return this._userLogHandler}set userLogHandler(e){this._userLogHandler=e}debug(...e){this._userLogHandler&&this._userLogHandler(this,D.DEBUG,...e),this._logHandler(this,D.DEBUG,...e)}log(...e){this._userLogHandler&&this._userLogHandler(this,D.VERBOSE,...e),this._logHandler(this,D.VERBOSE,...e)}info(...e){this._userLogHandler&&this._userLogHandler(this,D.INFO,...e),this._logHandler(this,D.INFO,...e)}warn(...e){this._userLogHandler&&this._userLogHandler(this,D.WARN,...e),this._logHandler(this,D.WARN,...e)}error(...e){this._userLogHandler&&this._userLogHandler(this,D.ERROR,...e),this._logHandler(this,D.ERROR,...e)}}let U,F;const V=new WeakMap,B=new WeakMap,j=new WeakMap,q=new WeakMap,z=new WeakMap;let K={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return B.get(e);if("objectStoreNames"===t)return e.objectStoreNames||j.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return H(e[t])},set:(e,t,n)=>(e[t]=n,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function $(e){return"function"==typeof e?(t=e)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(F||(F=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(G(this),e),H(V.get(this))}:function(...e){return H(t.apply(G(this),e))}:function(e,...n){const s=t.call(G(this),e,...n);return j.set(s,e.sort?e.sort():[e]),H(s)}:(e instanceof IDBTransaction&&function(e){if(B.has(e))return;const t=new Promise(((t,n)=>{const s=()=>{e.removeEventListener("complete",i),e.removeEventListener("error",r),e.removeEventListener("abort",r)},i=()=>{t(),s()},r=()=>{n(e.error||new DOMException("AbortError","AbortError")),s()};e.addEventListener("complete",i),e.addEventListener("error",r),e.addEventListener("abort",r)}));B.set(e,t)}(e),n=e,(U||(U=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction])).some((e=>n instanceof e))?new Proxy(e,K):e);var t,n}function H(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,n)=>{const s=()=>{e.removeEventListener("success",i),e.removeEventListener("error",r)},i=()=>{t(H(e.result)),s()},r=()=>{n(e.error),s()};e.addEventListener("success",i),e.addEventListener("error",r)}));return t.then((t=>{t instanceof IDBCursor&&V.set(t,e)})).catch((()=>{})),z.set(t,e),t}(e);if(q.has(e))return q.get(e);const t=$(e);return t!==e&&(q.set(e,t),z.set(t,e)),t}const G=e=>z.get(e),W=["get","getKey","getAll","getAllKeys","count"],Q=["put","add","delete","clear"],X=new Map;function J(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(X.get(t))return X.get(t);const n=t.replace(/FromIndex$/,""),s=t!==n,i=Q.includes(n);if(!(n in(s?IDBIndex:IDBObjectStore).prototype)||!i&&!W.includes(n))return;const r=async function(e,...t){const r=this.transaction(e,i?"readwrite":"readonly");let o=r.store;return s&&(o=o.index(t.shift())),(await Promise.all([o[n](...t),i&&r.done]))[0]};return X.set(t,r),r}var Y;Y=K,K={...Y,get:(e,t,n)=>J(e,t)||Y.get(e,t,n),has:(e,t)=>!!J(e,t)||Y.has(e,t)};class Z{constructor(e){this.container=e}getPlatformInfoString(){return this.container.getProviders().map((e=>{if(function(e){const t=e.getComponent();return"VERSION"===(null==t?void 0:t.type)}(e)){const t=e.getImmediate();return`${t.library}/${t.version}`}return null})).filter((e=>e)).join(" ")}}const ee="@firebase/app",te="0.7.28",ne=new x("@firebase/app"),se={[ee]:"fire-core","@firebase/app-compat":"fire-core-compat","@firebase/analytics":"fire-analytics","@firebase/analytics-compat":"fire-analytics-compat","@firebase/app-check":"fire-app-check","@firebase/app-check-compat":"fire-app-check-compat","@firebase/auth":"fire-auth","@firebase/auth-compat":"fire-auth-compat","@firebase/database":"fire-rtdb","@firebase/database-compat":"fire-rtdb-compat","@firebase/functions":"fire-fn","@firebase/functions-compat":"fire-fn-compat","@firebase/installations":"fire-iid","@firebase/installations-compat":"fire-iid-compat","@firebase/messaging":"fire-fcm","@firebase/messaging-compat":"fire-fcm-compat","@firebase/performance":"fire-perf","@firebase/performance-compat":"fire-perf-compat","@firebase/remote-config":"fire-rc","@firebase/remote-config-compat":"fire-rc-compat","@firebase/storage":"fire-gcs","@firebase/storage-compat":"fire-gcs-compat","@firebase/firestore":"fire-fst","@firebase/firestore-compat":"fire-fst-compat","fire-js":"fire-js",firebase:"fire-js-all"},ie=new Map,re=new Map;function oe(e,t){try{e.container.addComponent(t)}catch(n){ne.debug(`Component ${t.name} failed to register with FirebaseApp ${e.name}`,n)}}function ae(e){const t=e.name;if(re.has(t))return ne.debug(`There were multiple attempts to register component ${t}.`),!1;re.set(t,e);for(const t of ie.values())oe(t,e);return!0}function ce(e,t){const n=e.container.getProvider("heartbeat").getImmediate({optional:!0});return n&&n.triggerHeartbeat(),e.container.getProvider(t)}const ue=new m("app","Firebase",{"no-app":"No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","storage-open":"Error thrown when opening storage. Original error: {$originalErrorMessage}.","storage-get":"Error thrown when reading from storage. Original error: {$originalErrorMessage}.","storage-set":"Error thrown when writing to storage. Original error: {$originalErrorMessage}.","storage-delete":"Error thrown when deleting from storage. Original error: {$originalErrorMessage}."});class he{constructor(e,t,n){this._isDeleted=!1,this._options=Object.assign({},e),this._config=Object.assign({},t),this._name=t.name,this._automaticDataCollectionEnabled=t.automaticDataCollectionEnabled,this._container=n,this.container.addComponent(new S("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(e){this.checkDestroyed(),this._automaticDataCollectionEnabled=e}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(e){this._isDeleted=e}checkDestroyed(){if(this.isDeleted)throw ue.create("app-deleted",{appName:this._name})}}const le="9.9.0";function de(e="[DEFAULT]"){const t=ie.get(e);if(!t)throw ue.create("no-app",{appName:e});return t}function fe(e,t,n){var s;let i=null!==(s=se[e])&&void 0!==s?s:e;n&&(i+=`-${n}`);const r=i.match(/\s|\//),o=t.match(/\s|\//);if(r||o){const e=[`Unable to register library "${i}" with version "${t}":`];return r&&e.push(`library name "${i}" contains illegal characters (whitespace or "/")`),r&&o&&e.push("and"),o&&e.push(`version name "${t}" contains illegal characters (whitespace or "/")`),void ne.warn(e.join(" "))}ae(new S(`${i}-version`,(()=>({library:i,version:t})),"VERSION"))}const pe="firebase-heartbeat-store";let me=null;function ge(){return me||(me=function(e,t,{blocked:n,upgrade:s,blocking:i,terminated:r}={}){const o=indexedDB.open(e,t),a=H(o);return s&&o.addEventListener("upgradeneeded",(e=>{s(H(o.result),e.oldVersion,e.newVersion,H(o.transaction))})),n&&o.addEventListener("blocked",(()=>n())),a.then((e=>{r&&e.addEventListener("close",(()=>r())),i&&e.addEventListener("versionchange",(()=>i()))})).catch((()=>{})),a}("firebase-heartbeat-database",1,{upgrade:(e,t)=>{0===t&&e.createObjectStore(pe)}}).catch((e=>{throw ue.create("storage-open",{originalErrorMessage:e.message})}))),me}async function ye(e,t){var n;try{const n=(await ge()).transaction(pe,"readwrite"),s=n.objectStore(pe);return await s.put(t,ve(e)),n.done}catch(e){throw ue.create("storage-set",{originalErrorMessage:null===(n=e)||void 0===n?void 0:n.message})}}function ve(e){return`${e.name}!${e.options.appId}`}class we{constructor(e){this.container=e,this._heartbeatsCache=null;const t=this.container.getProvider("app").getImmediate();this._storage=new Ie(t),this._heartbeatsCachePromise=this._storage.read().then((e=>(this._heartbeatsCache=e,e)))}async triggerHeartbeat(){const e=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),t=Ee();if(null===this._heartbeatsCache&&(this._heartbeatsCache=await this._heartbeatsCachePromise),this._heartbeatsCache.lastSentHeartbeatDate!==t&&!this._heartbeatsCache.heartbeats.some((e=>e.date===t)))return this._heartbeatsCache.heartbeats.push({date:t,agent:e}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((e=>{const t=new Date(e.date).valueOf();return Date.now()-t<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null===this._heartbeatsCache||0===this._heartbeatsCache.heartbeats.length)return"";const e=Ee(),{heartbeatsToSend:t,unsentEntries:n}=function(e,t=1024){const n=[];let s=e.slice();for(const i of e){const e=n.find((e=>e.agent===i.agent));if(e){if(e.dates.push(i.date),Te(n)>t){e.dates.pop();break}}else if(n.push({agent:i.agent,dates:[i.date]}),Te(n)>t){n.pop();break}s=s.slice(1)}return{heartbeatsToSend:n,unsentEntries:s}}(this._heartbeatsCache.heartbeats),s=a(JSON.stringify({version:2,heartbeats:t}));return this._heartbeatsCache.lastSentHeartbeatDate=e,n.length>0?(this._heartbeatsCache.heartbeats=n,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),s}}function Ee(){return(new Date).toISOString().substring(0,10)}class Ie{constructor(e){this.app=e,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return"object"==typeof indexedDB&&new Promise(((e,t)=>{try{let n=!0;const s="validate-browser-context-for-indexeddb-analytics-module",i=self.indexedDB.open(s);i.onsuccess=()=>{i.result.close(),n||self.indexedDB.deleteDatabase(s),e(!0)},i.onupgradeneeded=()=>{n=!1},i.onerror=()=>{var e;t((null===(e=i.error)||void 0===e?void 0:e.message)||"")}}catch(e){t(e)}})).then((()=>!0)).catch((()=>!1))}async read(){if(await this._canUseIndexedDBPromise){const e=await async function(e){var t;try{return(await ge()).transaction(pe).objectStore(pe).get(ve(e))}catch(e){throw ue.create("storage-get",{originalErrorMessage:null===(t=e)||void 0===t?void 0:t.message})}}(this.app);return e||{heartbeats:[]}}return{heartbeats:[]}}async overwrite(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return ye(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:e.heartbeats})}}async add(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return ye(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:[...n.heartbeats,...e.heartbeats]})}}}function Te(e){return a(JSON.stringify({version:2,heartbeats:e})).length}ae(new S("platform-logger",(e=>new Z(e)),"PRIVATE")),ae(new S("heartbeat",(e=>new we(e)),"PRIVATE")),fe(ee,te,""),fe(ee,te,"esm2017"),fe("fire-js",""),fe("firebase","9.9.0","app");const be=function(e,t={}){"object"!=typeof t&&(t={name:t});const n=Object.assign({name:"[DEFAULT]",automaticDataCollectionEnabled:!1},t),s=n.name;if("string"!=typeof s||!s)throw ue.create("bad-app-name",{appName:String(s)});const i=ie.get(s);if(i){if(y(e,i.options)&&y(n,i.config))return i;throw ue.create("duplicate-app",{appName:s})}const r=new A(s);for(const e of re.values())r.addComponent(e);const o=new he(e,n,r);return ie.set(s,o),o}({apiKey:"AIzaSyDlTB4y1HE3RV_1T-0wIdNRYgm5Q25VIjs",authDomain:"music-player-69865.firebaseapp.com",projectId:"music-player-69865",storageBucket:"music-player-69865.appspot.com",messagingSenderId:"837123490445",appId:"1:837123490445:web:bff60c5f376108ac53d8c4"});function _e(e,t){var n={};for(var s in e)Object.prototype.hasOwnProperty.call(e,s)&&t.indexOf(s)<0&&(n[s]=e[s]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(s=Object.getOwnPropertySymbols(e);i<s.length;i++)t.indexOf(s[i])<0&&Object.prototype.propertyIsEnumerable.call(e,s[i])&&(n[s[i]]=e[s[i]])}return n}Object.create,Object.create;const Se=function(){return{"dependent-sdk-initialized-before-auth":"Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."}},Ce=new m("auth","Firebase",{"dependent-sdk-initialized-before-auth":"Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."}),ke=new x("@firebase/auth");function Ae(e,...t){ke.logLevel<=D.ERROR&&ke.error(`Auth (9.9.0): ${e}`,...t)}function Ne(e,...t){throw Oe(e,...t)}function De(e,...t){return Oe(e,...t)}function Re(e,t,n){const s=Object.assign(Object.assign({},Se()),{[t]:n});return new m("auth","Firebase",s).create(t,{appName:e.name})}function Oe(e,...t){if("string"!=typeof e){const n=t[0],s=[...t.slice(1)];return s[0]&&(s[0].appName=e.name),e._errorFactory.create(n,...s)}return Ce.create(e,...t)}function Le(e,t,...n){if(!e)throw Oe(t,...n)}function Pe(e){const t="INTERNAL ASSERTION FAILED: "+e;throw Ae(t),new Error(t)}function Me(e,t){e||Pe(t)}const xe=new Map;function Ue(e){Me(e instanceof Function,"Expected a class definition");let t=xe.get(e);return t?(Me(t instanceof e,"Instance stored in cache mismatched with class"),t):(t=new e,xe.set(e,t),t)}function Fe(){var e;return"undefined"!=typeof self&&(null===(e=self.location)||void 0===e?void 0:e.href)||""}function Ve(){var e;return"undefined"!=typeof self&&(null===(e=self.location)||void 0===e?void 0:e.protocol)||null}class Be{constructor(e,t){this.shortDelay=e,this.longDelay=t,Me(t>e,"Short delay should be less than long delay!"),this.isMobile=h()||d()}get(){return"undefined"!=typeof navigator&&navigator&&"onLine"in navigator&&"boolean"==typeof navigator.onLine&&("http:"===Ve()||"https:"===Ve()||l()||"connection"in navigator)&&!navigator.onLine?Math.min(5e3,this.shortDelay):this.isMobile?this.longDelay:this.shortDelay}}function je(e,t){Me(e.emulator,"Emulator should always be set here");const{url:n}=e.emulator;return t?`${n}${t.startsWith("/")?t.slice(1):t}`:n}class qe{static initialize(e,t,n){this.fetchImpl=e,t&&(this.headersImpl=t),n&&(this.responseImpl=n)}static fetch(){return this.fetchImpl?this.fetchImpl:"undefined"!=typeof self&&"fetch"in self?self.fetch:void Pe("Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}static headers(){return this.headersImpl?this.headersImpl:"undefined"!=typeof self&&"Headers"in self?self.Headers:void Pe("Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}static response(){return this.responseImpl?this.responseImpl:"undefined"!=typeof self&&"Response"in self?self.Response:void Pe("Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill")}}const ze={CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_PASSWORD:"wrong-password",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_REQ_TYPE:"internal-error",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",INVALID_CODE:"invalid-verification-code",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_SESSION_INFO:"missing-verification-id",SESSION_EXPIRED:"code-expired",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",ADMIN_ONLY_OPERATION:"admin-restricted-operation",INVALID_MFA_PENDING_CREDENTIAL:"invalid-multi-factor-session",MFA_ENROLLMENT_NOT_FOUND:"multi-factor-info-not-found",MISSING_MFA_ENROLLMENT_ID:"missing-multi-factor-info",MISSING_MFA_PENDING_CREDENTIAL:"missing-multi-factor-session",SECOND_FACTOR_EXISTS:"second-factor-already-in-use",SECOND_FACTOR_LIMIT_EXCEEDED:"maximum-second-factor-count-exceeded",BLOCKING_FUNCTION_ERROR_RESPONSE:"internal-error"},Ke=new Be(3e4,6e4);function $e(e,t){return e.tenantId&&!t.tenantId?Object.assign(Object.assign({},t),{tenantId:e.tenantId}):t}async function He(e,t,n,s,i={}){return Ge(e,i,(async()=>{let i={},r={};s&&("GET"===t?r=s:i={body:JSON.stringify(s)});const o=w(Object.assign({key:e.config.apiKey},r)).slice(1),a=await e._getAdditionalHeaders();return a["Content-Type"]="application/json",e.languageCode&&(a["X-Firebase-Locale"]=e.languageCode),qe.fetch()(Qe(e,e.config.apiHost,n,o),Object.assign({method:t,headers:a,referrerPolicy:"no-referrer"},i))}))}async function Ge(e,t,n){e._canInitEmulator=!1;const s=Object.assign(Object.assign({},ze),t);try{const t=new Xe(e),i=await Promise.race([n(),t.promise]);t.clearNetworkTimeout();const r=await i.json();if("needConfirmation"in r)throw Je(e,"account-exists-with-different-credential",r);if(i.ok&&!("errorMessage"in r))return r;{const t=i.ok?r.errorMessage:r.error.message,[n,o]=t.split(" : ");if("FEDERATED_USER_ID_ALREADY_LINKED"===n)throw Je(e,"credential-already-in-use",r);if("EMAIL_EXISTS"===n)throw Je(e,"email-already-in-use",r);if("USER_DISABLED"===n)throw Je(e,"user-disabled",r);const a=s[n]||n.toLowerCase().replace(/[_\s]+/g,"-");if(o)throw Re(e,a,o);Ne(e,a)}}catch(t){if(t instanceof p)throw t;Ne(e,"network-request-failed")}}async function We(e,t,n,s,i={}){const r=await He(e,t,n,s,i);return"mfaPendingCredential"in r&&Ne(e,"multi-factor-auth-required",{_serverResponse:r}),r}function Qe(e,t,n,s){const i=`${t}${n}?${s}`;return e.config.emulator?je(e.config,i):`${e.config.apiScheme}://${i}`}class Xe{constructor(e){this.auth=e,this.timer=null,this.promise=new Promise(((e,t)=>{this.timer=setTimeout((()=>t(De(this.auth,"network-request-failed"))),Ke.get())}))}clearNetworkTimeout(){clearTimeout(this.timer)}}function Je(e,t,n){const s={appName:e.name};n.email&&(s.email=n.email),n.phoneNumber&&(s.phoneNumber=n.phoneNumber);const i=De(e,t,s);return i.customData._tokenResponse=n,i}function Ye(e){if(e)try{const t=new Date(Number(e));if(!isNaN(t.getTime()))return t.toUTCString()}catch(e){}}function Ze(e){return 1e3*Number(e)}function et(e){var t;const[n,s,i]=e.split(".");if(void 0===n||void 0===s||void 0===i)return Ae("JWT malformed, contained fewer than 3 sections"),null;try{const e=function(e){try{return o.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null}(s);return e?JSON.parse(e):(Ae("Failed to decode base64 JWT payload"),null)}catch(e){return Ae("Caught error parsing JWT payload as JSON",null===(t=e)||void 0===t?void 0:t.toString()),null}}async function tt(e,t,n=!1){if(n)return t;try{return await t}catch(t){throw t instanceof p&&function({code:e}){return"auth/user-disabled"===e||"auth/user-token-expired"===e}(t)&&e.auth.currentUser===e&&await e.auth.signOut(),t}}class nt{constructor(e){this.user=e,this.isRunning=!1,this.timerId=null,this.errorBackoff=3e4}_start(){this.isRunning||(this.isRunning=!0,this.schedule())}_stop(){this.isRunning&&(this.isRunning=!1,null!==this.timerId&&clearTimeout(this.timerId))}getInterval(e){var t;if(e){const e=this.errorBackoff;return this.errorBackoff=Math.min(2*this.errorBackoff,96e4),e}{this.errorBackoff=3e4;const e=(null!==(t=this.user.stsTokenManager.expirationTime)&&void 0!==t?t:0)-Date.now()-3e5;return Math.max(0,e)}}schedule(e=!1){if(!this.isRunning)return;const t=this.getInterval(e);this.timerId=setTimeout((async()=>{await this.iteration()}),t)}async iteration(){var e;try{await this.user.getIdToken(!0)}catch(t){return void("auth/network-request-failed"===(null===(e=t)||void 0===e?void 0:e.code)&&this.schedule(!0))}this.schedule()}}class st{constructor(e,t){this.createdAt=e,this.lastLoginAt=t,this._initializeTime()}_initializeTime(){this.lastSignInTime=Ye(this.lastLoginAt),this.creationTime=Ye(this.createdAt)}_copy(e){this.createdAt=e.createdAt,this.lastLoginAt=e.lastLoginAt,this._initializeTime()}toJSON(){return{createdAt:this.createdAt,lastLoginAt:this.lastLoginAt}}}async function it(e){var t;const n=e.auth,s=await e.getIdToken(),i=await tt(e,async function(e,t){return He(e,"POST","/v1/accounts:lookup",t)}(n,{idToken:s}));Le(null==i?void 0:i.users.length,n,"internal-error");const r=i.users[0];e._notifyReloadListener(r);const o=(null===(t=r.providerUserInfo)||void 0===t?void 0:t.length)?r.providerUserInfo.map((e=>{var{providerId:t}=e,n=_e(e,["providerId"]);return{providerId:t,uid:n.rawId||"",displayName:n.displayName||null,email:n.email||null,phoneNumber:n.phoneNumber||null,photoURL:n.photoUrl||null}})):[],a=(c=e.providerData,u=o,[...c.filter((e=>!u.some((t=>t.providerId===e.providerId)))),...u]);var c,u;const h=e.isAnonymous,l=!(e.email&&r.passwordHash||(null==a?void 0:a.length)),d=!!h&&l,f={uid:r.localId,displayName:r.displayName||null,photoURL:r.photoUrl||null,email:r.email||null,emailVerified:r.emailVerified||!1,phoneNumber:r.phoneNumber||null,tenantId:r.tenantId||null,providerData:a,metadata:new st(r.createdAt,r.lastLoginAt),isAnonymous:d};Object.assign(e,f)}class rt{constructor(){this.refreshToken=null,this.accessToken=null,this.expirationTime=null}get isExpired(){return!this.expirationTime||Date.now()>this.expirationTime-3e4}updateFromServerResponse(e){Le(e.idToken,"internal-error"),Le(void 0!==e.idToken,"internal-error"),Le(void 0!==e.refreshToken,"internal-error");const t="expiresIn"in e&&void 0!==e.expiresIn?Number(e.expiresIn):function(e){const t=et(e);return Le(t,"internal-error"),Le(void 0!==t.exp,"internal-error"),Le(void 0!==t.iat,"internal-error"),Number(t.exp)-Number(t.iat)}(e.idToken);this.updateTokensAndExpiration(e.idToken,e.refreshToken,t)}async getToken(e,t=!1){return Le(!this.accessToken||this.refreshToken,e,"user-token-expired"),t||!this.accessToken||this.isExpired?this.refreshToken?(await this.refresh(e,this.refreshToken),this.accessToken):null:this.accessToken}clearRefreshToken(){this.refreshToken=null}async refresh(e,t){const{accessToken:n,refreshToken:s,expiresIn:i}=await async function(e,t){const n=await Ge(e,{},(async()=>{const n=w({grant_type:"refresh_token",refresh_token:t}).slice(1),{tokenApiHost:s,apiKey:i}=e.config,r=Qe(e,s,"/v1/token",`key=${i}`),o=await e._getAdditionalHeaders();return o["Content-Type"]="application/x-www-form-urlencoded",qe.fetch()(r,{method:"POST",headers:o,body:n})}));return{accessToken:n.access_token,expiresIn:n.expires_in,refreshToken:n.refresh_token}}(e,t);this.updateTokensAndExpiration(n,s,Number(i))}updateTokensAndExpiration(e,t,n){this.refreshToken=t||null,this.accessToken=e||null,this.expirationTime=Date.now()+1e3*n}static fromJSON(e,t){const{refreshToken:n,accessToken:s,expirationTime:i}=t,r=new rt;return n&&(Le("string"==typeof n,"internal-error",{appName:e}),r.refreshToken=n),s&&(Le("string"==typeof s,"internal-error",{appName:e}),r.accessToken=s),i&&(Le("number"==typeof i,"internal-error",{appName:e}),r.expirationTime=i),r}toJSON(){return{refreshToken:this.refreshToken,accessToken:this.accessToken,expirationTime:this.expirationTime}}_assign(e){this.accessToken=e.accessToken,this.refreshToken=e.refreshToken,this.expirationTime=e.expirationTime}_clone(){return Object.assign(new rt,this.toJSON())}_performRefresh(){return Pe("not implemented")}}function ot(e,t){Le("string"==typeof e||void 0===e,"internal-error",{appName:t})}class at{constructor(e){var{uid:t,auth:n,stsTokenManager:s}=e,i=_e(e,["uid","auth","stsTokenManager"]);this.providerId="firebase",this.proactiveRefresh=new nt(this),this.reloadUserInfo=null,this.reloadListener=null,this.uid=t,this.auth=n,this.stsTokenManager=s,this.accessToken=s.accessToken,this.displayName=i.displayName||null,this.email=i.email||null,this.emailVerified=i.emailVerified||!1,this.phoneNumber=i.phoneNumber||null,this.photoURL=i.photoURL||null,this.isAnonymous=i.isAnonymous||!1,this.tenantId=i.tenantId||null,this.providerData=i.providerData?[...i.providerData]:[],this.metadata=new st(i.createdAt||void 0,i.lastLoginAt||void 0)}async getIdToken(e){const t=await tt(this,this.stsTokenManager.getToken(this.auth,e));return Le(t,this.auth,"internal-error"),this.accessToken!==t&&(this.accessToken=t,await this.auth._persistUserIfCurrent(this),this.auth._notifyListenersIfCurrent(this)),t}getIdTokenResult(e){return async function(e,t=!1){const n=_(e),s=await n.getIdToken(t),i=et(s);Le(i&&i.exp&&i.auth_time&&i.iat,n.auth,"internal-error");const r="object"==typeof i.firebase?i.firebase:void 0,o=null==r?void 0:r.sign_in_provider;return{claims:i,token:s,authTime:Ye(Ze(i.auth_time)),issuedAtTime:Ye(Ze(i.iat)),expirationTime:Ye(Ze(i.exp)),signInProvider:o||null,signInSecondFactor:(null==r?void 0:r.sign_in_second_factor)||null}}(this,e)}reload(){return async function(e){const t=_(e);await it(t),await t.auth._persistUserIfCurrent(t),t.auth._notifyListenersIfCurrent(t)}(this)}_assign(e){this!==e&&(Le(this.uid===e.uid,this.auth,"internal-error"),this.displayName=e.displayName,this.photoURL=e.photoURL,this.email=e.email,this.emailVerified=e.emailVerified,this.phoneNumber=e.phoneNumber,this.isAnonymous=e.isAnonymous,this.tenantId=e.tenantId,this.providerData=e.providerData.map((e=>Object.assign({},e))),this.metadata._copy(e.metadata),this.stsTokenManager._assign(e.stsTokenManager))}_clone(e){return new at(Object.assign(Object.assign({},this),{auth:e,stsTokenManager:this.stsTokenManager._clone()}))}_onReload(e){Le(!this.reloadListener,this.auth,"internal-error"),this.reloadListener=e,this.reloadUserInfo&&(this._notifyReloadListener(this.reloadUserInfo),this.reloadUserInfo=null)}_notifyReloadListener(e){this.reloadListener?this.reloadListener(e):this.reloadUserInfo=e}_startProactiveRefresh(){this.proactiveRefresh._start()}_stopProactiveRefresh(){this.proactiveRefresh._stop()}async _updateTokensIfNecessary(e,t=!1){let n=!1;e.idToken&&e.idToken!==this.stsTokenManager.accessToken&&(this.stsTokenManager.updateFromServerResponse(e),n=!0),t&&await it(this),await this.auth._persistUserIfCurrent(this),n&&this.auth._notifyListenersIfCurrent(this)}async delete(){const e=await this.getIdToken();return await tt(this,async function(e,t){return He(e,"POST","/v1/accounts:delete",t)}(this.auth,{idToken:e})),this.stsTokenManager.clearRefreshToken(),this.auth.signOut()}toJSON(){return Object.assign(Object.assign({uid:this.uid,email:this.email||void 0,emailVerified:this.emailVerified,displayName:this.displayName||void 0,isAnonymous:this.isAnonymous,photoURL:this.photoURL||void 0,phoneNumber:this.phoneNumber||void 0,tenantId:this.tenantId||void 0,providerData:this.providerData.map((e=>Object.assign({},e))),stsTokenManager:this.stsTokenManager.toJSON(),_redirectEventId:this._redirectEventId},this.metadata.toJSON()),{apiKey:this.auth.config.apiKey,appName:this.auth.name})}get refreshToken(){return this.stsTokenManager.refreshToken||""}static _fromJSON(e,t){var n,s,i,r,o,a,c,u;const h=null!==(n=t.displayName)&&void 0!==n?n:void 0,l=null!==(s=t.email)&&void 0!==s?s:void 0,d=null!==(i=t.phoneNumber)&&void 0!==i?i:void 0,f=null!==(r=t.photoURL)&&void 0!==r?r:void 0,p=null!==(o=t.tenantId)&&void 0!==o?o:void 0,m=null!==(a=t._redirectEventId)&&void 0!==a?a:void 0,g=null!==(c=t.createdAt)&&void 0!==c?c:void 0,y=null!==(u=t.lastLoginAt)&&void 0!==u?u:void 0,{uid:v,emailVerified:w,isAnonymous:E,providerData:I,stsTokenManager:T}=t;Le(v&&T,e,"internal-error");const b=rt.fromJSON(this.name,T);Le("string"==typeof v,e,"internal-error"),ot(h,e.name),ot(l,e.name),Le("boolean"==typeof w,e,"internal-error"),Le("boolean"==typeof E,e,"internal-error"),ot(d,e.name),ot(f,e.name),ot(p,e.name),ot(m,e.name),ot(g,e.name),ot(y,e.name);const _=new at({uid:v,auth:e,email:l,emailVerified:w,displayName:h,isAnonymous:E,photoURL:f,phoneNumber:d,tenantId:p,stsTokenManager:b,createdAt:g,lastLoginAt:y});return I&&Array.isArray(I)&&(_.providerData=I.map((e=>Object.assign({},e)))),m&&(_._redirectEventId=m),_}static async _fromIdTokenResponse(e,t,n=!1){const s=new rt;s.updateFromServerResponse(t);const i=new at({uid:t.localId,auth:e,stsTokenManager:s,isAnonymous:n});return await it(i),i}}class ct{constructor(){this.type="NONE",this.storage={}}async _isAvailable(){return!0}async _set(e,t){this.storage[e]=t}async _get(e){const t=this.storage[e];return void 0===t?null:t}async _remove(e){delete this.storage[e]}_addListener(e,t){}_removeListener(e,t){}}ct.type="NONE";const ut=ct;function ht(e,t,n){return`firebase:${e}:${t}:${n}`}class lt{constructor(e,t,n){this.persistence=e,this.auth=t,this.userKey=n;const{config:s,name:i}=this.auth;this.fullUserKey=ht(this.userKey,s.apiKey,i),this.fullPersistenceKey=ht("persistence",s.apiKey,i),this.boundEventHandler=t._onStorageEvent.bind(t),this.persistence._addListener(this.fullUserKey,this.boundEventHandler)}setCurrentUser(e){return this.persistence._set(this.fullUserKey,e.toJSON())}async getCurrentUser(){const e=await this.persistence._get(this.fullUserKey);return e?at._fromJSON(this.auth,e):null}removeCurrentUser(){return this.persistence._remove(this.fullUserKey)}savePersistenceForRedirect(){return this.persistence._set(this.fullPersistenceKey,this.persistence.type)}async setPersistence(e){if(this.persistence===e)return;const t=await this.getCurrentUser();return await this.removeCurrentUser(),this.persistence=e,t?this.setCurrentUser(t):void 0}delete(){this.persistence._removeListener(this.fullUserKey,this.boundEventHandler)}static async create(e,t,n="authUser"){if(!t.length)return new lt(Ue(ut),e,n);const s=(await Promise.all(t.map((async e=>{if(await e._isAvailable())return e})))).filter((e=>e));let i=s[0]||Ue(ut);const r=ht(n,e.config.apiKey,e.name);let o=null;for(const n of t)try{const t=await n._get(r);if(t){const s=at._fromJSON(e,t);n!==i&&(o=s),i=n;break}}catch(e){}const a=s.filter((e=>e._shouldAllowMigration));return i._shouldAllowMigration&&a.length?(i=a[0],o&&await i._set(r,o.toJSON()),await Promise.all(t.map((async e=>{if(e!==i)try{await e._remove(r)}catch(e){}}))),new lt(i,e,n)):new lt(i,e,n)}}function dt(e){const t=e.toLowerCase();if(t.includes("opera/")||t.includes("opr/")||t.includes("opios/"))return"Opera";if(gt(t))return"IEMobile";if(t.includes("msie")||t.includes("trident/"))return"IE";if(t.includes("edge/"))return"Edge";if(ft(t))return"Firefox";if(t.includes("silk/"))return"Silk";if(vt(t))return"Blackberry";if(wt(t))return"Webos";if(pt(t))return"Safari";if((t.includes("chrome/")||mt(t))&&!t.includes("edge/"))return"Chrome";if(yt(t))return"Android";{const t=/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/,n=e.match(t);if(2===(null==n?void 0:n.length))return n[1]}return"Other"}function ft(e=u()){return/firefox\//i.test(e)}function pt(e=u()){const t=e.toLowerCase();return t.includes("safari/")&&!t.includes("chrome/")&&!t.includes("crios/")&&!t.includes("android")}function mt(e=u()){return/crios\//i.test(e)}function gt(e=u()){return/iemobile/i.test(e)}function yt(e=u()){return/android/i.test(e)}function vt(e=u()){return/blackberry/i.test(e)}function wt(e=u()){return/webos/i.test(e)}function Et(e=u()){return/iphone|ipad|ipod/i.test(e)||/macintosh/i.test(e)&&/mobile/i.test(e)}function It(e=u()){return Et(e)||yt(e)||wt(e)||vt(e)||/windows phone/i.test(e)||gt(e)}function Tt(e,t=[]){let n;switch(e){case"Browser":n=dt(u());break;case"Worker":n=`${dt(u())}-${e}`;break;default:n=e}return`${n}/JsCore/9.9.0/${t.length?t.join(","):"FirebaseCore-web"}`}class bt{constructor(e){this.auth=e,this.queue=[]}pushCallback(e,t){const n=t=>new Promise(((n,s)=>{try{n(e(t))}catch(e){s(e)}}));n.onAbort=t,this.queue.push(n);const s=this.queue.length-1;return()=>{this.queue[s]=()=>Promise.resolve()}}async runMiddleware(e){var t;if(this.auth.currentUser===e)return;const n=[];try{for(const t of this.queue)await t(e),t.onAbort&&n.push(t.onAbort)}catch(e){n.reverse();for(const e of n)try{e()}catch(e){}throw this.auth._errorFactory.create("login-blocked",{originalMessage:null===(t=e)||void 0===t?void 0:t.message})}}}class _t{constructor(e,t,n){this.app=e,this.heartbeatServiceProvider=t,this.config=n,this.currentUser=null,this.emulatorConfig=null,this.operations=Promise.resolve(),this.authStateSubscription=new Ct(this),this.idTokenSubscription=new Ct(this),this.beforeStateQueue=new bt(this),this.redirectUser=null,this.isProactiveRefreshEnabled=!1,this._canInitEmulator=!0,this._isInitialized=!1,this._deleted=!1,this._initializationPromise=null,this._popupRedirectResolver=null,this._errorFactory=Ce,this.lastNotifiedUid=void 0,this.languageCode=null,this.tenantId=null,this.settings={appVerificationDisabledForTesting:!1},this.frameworks=[],this.name=e.name,this.clientVersion=n.sdkClientVersion}_initializeWithPersistence(e,t){return t&&(this._popupRedirectResolver=Ue(t)),this._initializationPromise=this.queue((async()=>{var n,s;if(!this._deleted&&(this.persistenceManager=await lt.create(this,e),!this._deleted)){if(null===(n=this._popupRedirectResolver)||void 0===n?void 0:n._shouldInitProactively)try{await this._popupRedirectResolver._initialize(this)}catch(e){}await this.initializeCurrentUser(t),this.lastNotifiedUid=(null===(s=this.currentUser)||void 0===s?void 0:s.uid)||null,this._deleted||(this._isInitialized=!0)}})),this._initializationPromise}async _onStorageEvent(){if(this._deleted)return;const e=await this.assertedPersistence.getCurrentUser();return this.currentUser||e?this.currentUser&&e&&this.currentUser.uid===e.uid?(this._currentUser._assign(e),void await this.currentUser.getIdToken()):void await this._updateCurrentUser(e,!0):void 0}async initializeCurrentUser(e){var t;const n=await this.assertedPersistence.getCurrentUser();let s=n,i=!1;if(e&&this.config.authDomain){await this.getOrInitRedirectPersistenceManager();const n=null===(t=this.redirectUser)||void 0===t?void 0:t._redirectEventId,r=null==s?void 0:s._redirectEventId,o=await this.tryRedirectSignIn(e);n&&n!==r||!(null==o?void 0:o.user)||(s=o.user,i=!0)}if(!s)return this.directlySetCurrentUser(null);if(!s._redirectEventId){if(i)try{await this.beforeStateQueue.runMiddleware(s)}catch(e){s=n,this._popupRedirectResolver._overrideRedirectResult(this,(()=>Promise.reject(e)))}return s?this.reloadAndSetCurrentUserOrClear(s):this.directlySetCurrentUser(null)}return Le(this._popupRedirectResolver,this,"argument-error"),await this.getOrInitRedirectPersistenceManager(),this.redirectUser&&this.redirectUser._redirectEventId===s._redirectEventId?this.directlySetCurrentUser(s):this.reloadAndSetCurrentUserOrClear(s)}async tryRedirectSignIn(e){let t=null;try{t=await this._popupRedirectResolver._completeRedirectFn(this,e,!0)}catch(e){await this._setRedirectUser(null)}return t}async reloadAndSetCurrentUserOrClear(e){var t;try{await it(e)}catch(e){if("auth/network-request-failed"!==(null===(t=e)||void 0===t?void 0:t.code))return this.directlySetCurrentUser(null)}return this.directlySetCurrentUser(e)}useDeviceLanguage(){this.languageCode=function(){if("undefined"==typeof navigator)return null;const e=navigator;return e.languages&&e.languages[0]||e.language||null}()}async _delete(){this._deleted=!0}async updateCurrentUser(e){const t=e?_(e):null;return t&&Le(t.auth.config.apiKey===this.config.apiKey,this,"invalid-user-token"),this._updateCurrentUser(t&&t._clone(this))}async _updateCurrentUser(e,t=!1){if(!this._deleted)return e&&Le(this.tenantId===e.tenantId,this,"tenant-id-mismatch"),t||await this.beforeStateQueue.runMiddleware(e),this.queue((async()=>{await this.directlySetCurrentUser(e),this.notifyAuthListeners()}))}async signOut(){return await this.beforeStateQueue.runMiddleware(null),(this.redirectPersistenceManager||this._popupRedirectResolver)&&await this._setRedirectUser(null),this._updateCurrentUser(null,!0)}setPersistence(e){return this.queue((async()=>{await this.assertedPersistence.setPersistence(Ue(e))}))}_getPersistence(){return this.assertedPersistence.persistence.type}_updateErrorMap(e){this._errorFactory=new m("auth","Firebase",e())}onAuthStateChanged(e,t,n){return this.registerStateListener(this.authStateSubscription,e,t,n)}beforeAuthStateChanged(e,t){return this.beforeStateQueue.pushCallback(e,t)}onIdTokenChanged(e,t,n){return this.registerStateListener(this.idTokenSubscription,e,t,n)}toJSON(){var e;return{apiKey:this.config.apiKey,authDomain:this.config.authDomain,appName:this.name,currentUser:null===(e=this._currentUser)||void 0===e?void 0:e.toJSON()}}async _setRedirectUser(e,t){const n=await this.getOrInitRedirectPersistenceManager(t);return null===e?n.removeCurrentUser():n.setCurrentUser(e)}async getOrInitRedirectPersistenceManager(e){if(!this.redirectPersistenceManager){const t=e&&Ue(e)||this._popupRedirectResolver;Le(t,this,"argument-error"),this.redirectPersistenceManager=await lt.create(this,[Ue(t._redirectPersistence)],"redirectUser"),this.redirectUser=await this.redirectPersistenceManager.getCurrentUser()}return this.redirectPersistenceManager}async _redirectUserForId(e){var t,n;return this._isInitialized&&await this.queue((async()=>{})),(null===(t=this._currentUser)||void 0===t?void 0:t._redirectEventId)===e?this._currentUser:(null===(n=this.redirectUser)||void 0===n?void 0:n._redirectEventId)===e?this.redirectUser:null}async _persistUserIfCurrent(e){if(e===this.currentUser)return this.queue((async()=>this.directlySetCurrentUser(e)))}_notifyListenersIfCurrent(e){e===this.currentUser&&this.notifyAuthListeners()}_key(){return`${this.config.authDomain}:${this.config.apiKey}:${this.name}`}_startProactiveRefresh(){this.isProactiveRefreshEnabled=!0,this.currentUser&&this._currentUser._startProactiveRefresh()}_stopProactiveRefresh(){this.isProactiveRefreshEnabled=!1,this.currentUser&&this._currentUser._stopProactiveRefresh()}get _currentUser(){return this.currentUser}notifyAuthListeners(){var e,t;if(!this._isInitialized)return;this.idTokenSubscription.next(this.currentUser);const n=null!==(t=null===(e=this.currentUser)||void 0===e?void 0:e.uid)&&void 0!==t?t:null;this.lastNotifiedUid!==n&&(this.lastNotifiedUid=n,this.authStateSubscription.next(this.currentUser))}registerStateListener(e,t,n,s){if(this._deleted)return()=>{};const i="function"==typeof t?t:t.next.bind(t),r=this._isInitialized?Promise.resolve():this._initializationPromise;return Le(r,this,"internal-error"),r.then((()=>i(this.currentUser))),"function"==typeof t?e.addObserver(t,n,s):e.addObserver(t)}async directlySetCurrentUser(e){this.currentUser&&this.currentUser!==e&&(this._currentUser._stopProactiveRefresh(),e&&this.isProactiveRefreshEnabled&&e._startProactiveRefresh()),this.currentUser=e,e?await this.assertedPersistence.setCurrentUser(e):await this.assertedPersistence.removeCurrentUser()}queue(e){return this.operations=this.operations.then(e,e),this.operations}get assertedPersistence(){return Le(this.persistenceManager,this,"internal-error"),this.persistenceManager}_logFramework(e){e&&!this.frameworks.includes(e)&&(this.frameworks.push(e),this.frameworks.sort(),this.clientVersion=Tt(this.config.clientPlatform,this._getFrameworks()))}_getFrameworks(){return this.frameworks}async _getAdditionalHeaders(){var e;const t={"X-Client-Version":this.clientVersion};this.app.options.appId&&(t["X-Firebase-gmpid"]=this.app.options.appId);const n=await(null===(e=this.heartbeatServiceProvider.getImmediate({optional:!0}))||void 0===e?void 0:e.getHeartbeatsHeader());return n&&(t["X-Firebase-Client"]=n),t}}function St(e){return _(e)}class Ct{constructor(e){this.auth=e,this.observer=null,this.addObserver=function(e,t){const n=new T(e,void 0);return n.subscribe.bind(n)}((e=>this.observer=e))}get next(){return Le(this.observer,this.auth,"internal-error"),this.observer.next.bind(this.observer)}}class kt{constructor(e,t){this.providerId=e,this.signInMethod=t}toJSON(){return Pe("not implemented")}_getIdTokenResponse(e){return Pe("not implemented")}_linkToIdToken(e,t){return Pe("not implemented")}_getReauthenticationResolver(e){return Pe("not implemented")}}class At extends kt{constructor(e,t,n,s=null){super("password",n),this._email=e,this._password=t,this._tenantId=s}static _fromEmailAndPassword(e,t){return new At(e,t,"password")}static _fromEmailAndCode(e,t,n=null){return new At(e,t,"emailLink",n)}toJSON(){return{email:this._email,password:this._password,signInMethod:this.signInMethod,tenantId:this._tenantId}}static fromJSON(e){const t="string"==typeof e?JSON.parse(e):e;if((null==t?void 0:t.email)&&(null==t?void 0:t.password)){if("password"===t.signInMethod)return this._fromEmailAndPassword(t.email,t.password);if("emailLink"===t.signInMethod)return this._fromEmailAndCode(t.email,t.password,t.tenantId)}return null}async _getIdTokenResponse(e){switch(this.signInMethod){case"password":return async function(e,t){return We(e,"POST","/v1/accounts:signInWithPassword",$e(e,t))}(e,{returnSecureToken:!0,email:this._email,password:this._password});case"emailLink":return async function(e,t){return We(e,"POST","/v1/accounts:signInWithEmailLink",$e(e,t))}(e,{email:this._email,oobCode:this._password});default:Ne(e,"internal-error")}}async _linkToIdToken(e,t){switch(this.signInMethod){case"password":return async function(e,t){return He(e,"POST","/v1/accounts:update",t)}(e,{idToken:t,returnSecureToken:!0,email:this._email,password:this._password});case"emailLink":return async function(e,t){return We(e,"POST","/v1/accounts:signInWithEmailLink",$e(e,t))}(e,{idToken:t,email:this._email,oobCode:this._password});default:Ne(e,"internal-error")}}_getReauthenticationResolver(e){return this._getIdTokenResponse(e)}}async function Nt(e,t){return We(e,"POST","/v1/accounts:signInWithIdp",$e(e,t))}class Dt extends kt{constructor(){super(...arguments),this.pendingToken=null}static _fromParams(e){const t=new Dt(e.providerId,e.signInMethod);return e.idToken||e.accessToken?(e.idToken&&(t.idToken=e.idToken),e.accessToken&&(t.accessToken=e.accessToken),e.nonce&&!e.pendingToken&&(t.nonce=e.nonce),e.pendingToken&&(t.pendingToken=e.pendingToken)):e.oauthToken&&e.oauthTokenSecret?(t.accessToken=e.oauthToken,t.secret=e.oauthTokenSecret):Ne("argument-error"),t}toJSON(){return{idToken:this.idToken,accessToken:this.accessToken,secret:this.secret,nonce:this.nonce,pendingToken:this.pendingToken,providerId:this.providerId,signInMethod:this.signInMethod}}static fromJSON(e){const t="string"==typeof e?JSON.parse(e):e,{providerId:n,signInMethod:s}=t,i=_e(t,["providerId","signInMethod"]);if(!n||!s)return null;const r=new Dt(n,s);return r.idToken=i.idToken||void 0,r.accessToken=i.accessToken||void 0,r.secret=i.secret,r.nonce=i.nonce,r.pendingToken=i.pendingToken||null,r}_getIdTokenResponse(e){return Nt(e,this.buildRequest())}_linkToIdToken(e,t){const n=this.buildRequest();return n.idToken=t,Nt(e,n)}_getReauthenticationResolver(e){const t=this.buildRequest();return t.autoCreate=!1,Nt(e,t)}buildRequest(){const e={requestUri:"http://localhost",returnSecureToken:!0};if(this.pendingToken)e.pendingToken=this.pendingToken;else{const t={};this.idToken&&(t.id_token=this.idToken),this.accessToken&&(t.access_token=this.accessToken),this.secret&&(t.oauth_token_secret=this.secret),t.providerId=this.providerId,this.nonce&&!this.pendingToken&&(t.nonce=this.nonce),e.postBody=w(t)}return e}}const Rt={USER_NOT_FOUND:"user-not-found"};class Ot extends kt{constructor(e){super("phone","phone"),this.params=e}static _fromVerification(e,t){return new Ot({verificationId:e,verificationCode:t})}static _fromTokenResponse(e,t){return new Ot({phoneNumber:e,temporaryProof:t})}_getIdTokenResponse(e){return async function(e,t){return We(e,"POST","/v1/accounts:signInWithPhoneNumber",$e(e,t))}(e,this._makeVerificationRequest())}_linkToIdToken(e,t){return async function(e,t){const n=await We(e,"POST","/v1/accounts:signInWithPhoneNumber",$e(e,t));if(n.temporaryProof)throw Je(e,"account-exists-with-different-credential",n);return n}(e,Object.assign({idToken:t},this._makeVerificationRequest()))}_getReauthenticationResolver(e){return async function(e,t){return We(e,"POST","/v1/accounts:signInWithPhoneNumber",$e(e,Object.assign(Object.assign({},t),{operation:"REAUTH"})),Rt)}(e,this._makeVerificationRequest())}_makeVerificationRequest(){const{temporaryProof:e,phoneNumber:t,verificationId:n,verificationCode:s}=this.params;return e&&t?{temporaryProof:e,phoneNumber:t}:{sessionInfo:n,code:s}}toJSON(){const e={providerId:this.providerId};return this.params.phoneNumber&&(e.phoneNumber=this.params.phoneNumber),this.params.temporaryProof&&(e.temporaryProof=this.params.temporaryProof),this.params.verificationCode&&(e.verificationCode=this.params.verificationCode),this.params.verificationId&&(e.verificationId=this.params.verificationId),e}static fromJSON(e){"string"==typeof e&&(e=JSON.parse(e));const{verificationId:t,verificationCode:n,phoneNumber:s,temporaryProof:i}=e;return n||t||s||i?new Ot({verificationId:t,verificationCode:n,phoneNumber:s,temporaryProof:i}):null}}class Lt{constructor(e){var t,n,s,i,r,o;const a=E(I(e)),c=null!==(t=a.apiKey)&&void 0!==t?t:null,u=null!==(n=a.oobCode)&&void 0!==n?n:null,h=function(e){switch(e){case"recoverEmail":return"RECOVER_EMAIL";case"resetPassword":return"PASSWORD_RESET";case"signIn":return"EMAIL_SIGNIN";case"verifyEmail":return"VERIFY_EMAIL";case"verifyAndChangeEmail":return"VERIFY_AND_CHANGE_EMAIL";case"revertSecondFactorAddition":return"REVERT_SECOND_FACTOR_ADDITION";default:return null}}(null!==(s=a.mode)&&void 0!==s?s:null);Le(c&&u&&h,"argument-error"),this.apiKey=c,this.operation=h,this.code=u,this.continueUrl=null!==(i=a.continueUrl)&&void 0!==i?i:null,this.languageCode=null!==(r=a.languageCode)&&void 0!==r?r:null,this.tenantId=null!==(o=a.tenantId)&&void 0!==o?o:null}static parseLink(e){const t=function(e){const t=E(I(e)).link,n=t?E(I(t)).deep_link_id:null,s=E(I(e)).deep_link_id;return(s?E(I(s)).link:null)||s||n||t||e}(e);try{return new Lt(t)}catch(e){return null}}}class Pt{constructor(){this.providerId=Pt.PROVIDER_ID}static credential(e,t){return At._fromEmailAndPassword(e,t)}static credentialWithLink(e,t){const n=Lt.parseLink(t);return Le(n,"argument-error"),At._fromEmailAndCode(e,n.code,n.tenantId)}}Pt.PROVIDER_ID="password",Pt.EMAIL_PASSWORD_SIGN_IN_METHOD="password",Pt.EMAIL_LINK_SIGN_IN_METHOD="emailLink";class Mt{constructor(e){this.providerId=e,this.defaultLanguageCode=null,this.customParameters={}}setDefaultLanguage(e){this.defaultLanguageCode=e}setCustomParameters(e){return this.customParameters=e,this}getCustomParameters(){return this.customParameters}}class xt extends Mt{constructor(){super(...arguments),this.scopes=[]}addScope(e){return this.scopes.includes(e)||this.scopes.push(e),this}getScopes(){return[...this.scopes]}}class Ut extends xt{constructor(){super("facebook.com")}static credential(e){return Dt._fromParams({providerId:Ut.PROVIDER_ID,signInMethod:Ut.FACEBOOK_SIGN_IN_METHOD,accessToken:e})}static credentialFromResult(e){return Ut.credentialFromTaggedObject(e)}static credentialFromError(e){return Ut.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e||!("oauthAccessToken"in e))return null;if(!e.oauthAccessToken)return null;try{return Ut.credential(e.oauthAccessToken)}catch(e){return null}}}Ut.FACEBOOK_SIGN_IN_METHOD="facebook.com",Ut.PROVIDER_ID="facebook.com";class Ft extends xt{constructor(){super("google.com"),this.addScope("profile")}static credential(e,t){return Dt._fromParams({providerId:Ft.PROVIDER_ID,signInMethod:Ft.GOOGLE_SIGN_IN_METHOD,idToken:e,accessToken:t})}static credentialFromResult(e){return Ft.credentialFromTaggedObject(e)}static credentialFromError(e){return Ft.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e)return null;const{oauthIdToken:t,oauthAccessToken:n}=e;if(!t&&!n)return null;try{return Ft.credential(t,n)}catch(e){return null}}}Ft.GOOGLE_SIGN_IN_METHOD="google.com",Ft.PROVIDER_ID="google.com";class Vt extends xt{constructor(){super("github.com")}static credential(e){return Dt._fromParams({providerId:Vt.PROVIDER_ID,signInMethod:Vt.GITHUB_SIGN_IN_METHOD,accessToken:e})}static credentialFromResult(e){return Vt.credentialFromTaggedObject(e)}static credentialFromError(e){return Vt.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e||!("oauthAccessToken"in e))return null;if(!e.oauthAccessToken)return null;try{return Vt.credential(e.oauthAccessToken)}catch(e){return null}}}Vt.GITHUB_SIGN_IN_METHOD="github.com",Vt.PROVIDER_ID="github.com";class Bt extends xt{constructor(){super("twitter.com")}static credential(e,t){return Dt._fromParams({providerId:Bt.PROVIDER_ID,signInMethod:Bt.TWITTER_SIGN_IN_METHOD,oauthToken:e,oauthTokenSecret:t})}static credentialFromResult(e){return Bt.credentialFromTaggedObject(e)}static credentialFromError(e){return Bt.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e)return null;const{oauthAccessToken:t,oauthTokenSecret:n}=e;if(!t||!n)return null;try{return Bt.credential(t,n)}catch(e){return null}}}Bt.TWITTER_SIGN_IN_METHOD="twitter.com",Bt.PROVIDER_ID="twitter.com";class jt{constructor(e){this.user=e.user,this.providerId=e.providerId,this._tokenResponse=e._tokenResponse,this.operationType=e.operationType}static async _fromIdTokenResponse(e,t,n,s=!1){const i=await at._fromIdTokenResponse(e,n,s),r=qt(n);return new jt({user:i,providerId:r,_tokenResponse:n,operationType:t})}static async _forOperation(e,t,n){await e._updateTokensIfNecessary(n,!0);const s=qt(n);return new jt({user:e,providerId:s,_tokenResponse:n,operationType:t})}}function qt(e){return e.providerId?e.providerId:"phoneNumber"in e?"phone":null}class zt extends p{constructor(e,t,n,s){var i;super(t.code,t.message),this.operationType=n,this.user=s,Object.setPrototypeOf(this,zt.prototype),this.customData={appName:e.name,tenantId:null!==(i=e.tenantId)&&void 0!==i?i:void 0,_serverResponse:t.customData._serverResponse,operationType:n}}static _fromErrorAndOperation(e,t,n,s){return new zt(e,t,n,s)}}function Kt(e,t,n,s){return("reauthenticate"===t?n._getReauthenticationResolver(e):n._getIdTokenResponse(e)).catch((n=>{if("auth/multi-factor-auth-required"===n.code)throw zt._fromErrorAndOperation(e,n,t,s);throw n}))}new WeakMap;const $t="__sak";class Ht{constructor(e,t){this.storageRetriever=e,this.type=t}_isAvailable(){try{return this.storage?(this.storage.setItem($t,"1"),this.storage.removeItem($t),Promise.resolve(!0)):Promise.resolve(!1)}catch(e){return Promise.resolve(!1)}}_set(e,t){return this.storage.setItem(e,JSON.stringify(t)),Promise.resolve()}_get(e){const t=this.storage.getItem(e);return Promise.resolve(t?JSON.parse(t):null)}_remove(e){return this.storage.removeItem(e),Promise.resolve()}get storage(){return this.storageRetriever()}}class Gt extends Ht{constructor(){super((()=>window.localStorage),"LOCAL"),this.boundEventHandler=(e,t)=>this.onStorageEvent(e,t),this.listeners={},this.localCache={},this.pollTimer=null,this.safariLocalStorageNotSynced=function(){const e=u();return pt(e)||Et(e)}()&&function(){try{return!(!window||window===window.top)}catch(e){return!1}}(),this.fallbackToPolling=It(),this._shouldAllowMigration=!0}forAllChangedKeys(e){for(const t of Object.keys(this.listeners)){const n=this.storage.getItem(t),s=this.localCache[t];n!==s&&e(t,s,n)}}onStorageEvent(e,t=!1){if(!e.key)return void this.forAllChangedKeys(((e,t,n)=>{this.notifyListeners(e,n)}));const n=e.key;if(t?this.detachListener():this.stopPolling(),this.safariLocalStorageNotSynced){const s=this.storage.getItem(n);if(e.newValue!==s)null!==e.newValue?this.storage.setItem(n,e.newValue):this.storage.removeItem(n);else if(this.localCache[n]===e.newValue&&!t)return}const s=()=>{const e=this.storage.getItem(n);(t||this.localCache[n]!==e)&&this.notifyListeners(n,e)},i=this.storage.getItem(n);f()&&10===document.documentMode&&i!==e.newValue&&e.newValue!==e.oldValue?setTimeout(s,10):s()}notifyListeners(e,t){this.localCache[e]=t;const n=this.listeners[e];if(n)for(const e of Array.from(n))e(t?JSON.parse(t):t)}startPolling(){this.stopPolling(),this.pollTimer=setInterval((()=>{this.forAllChangedKeys(((e,t,n)=>{this.onStorageEvent(new StorageEvent("storage",{key:e,oldValue:t,newValue:n}),!0)}))}),1e3)}stopPolling(){this.pollTimer&&(clearInterval(this.pollTimer),this.pollTimer=null)}attachListener(){window.addEventListener("storage",this.boundEventHandler)}detachListener(){window.removeEventListener("storage",this.boundEventHandler)}_addListener(e,t){0===Object.keys(this.listeners).length&&(this.fallbackToPolling?this.startPolling():this.attachListener()),this.listeners[e]||(this.listeners[e]=new Set,this.localCache[e]=this.storage.getItem(e)),this.listeners[e].add(t)}_removeListener(e,t){this.listeners[e]&&(this.listeners[e].delete(t),0===this.listeners[e].size&&delete this.listeners[e]),0===Object.keys(this.listeners).length&&(this.detachListener(),this.stopPolling())}async _set(e,t){await super._set(e,t),this.localCache[e]=JSON.stringify(t)}async _get(e){const t=await super._get(e);return this.localCache[e]=JSON.stringify(t),t}async _remove(e){await super._remove(e),delete this.localCache[e]}}Gt.type="LOCAL";const Wt=Gt;class Qt extends Ht{constructor(){super((()=>window.sessionStorage),"SESSION")}_addListener(e,t){}_removeListener(e,t){}}Qt.type="SESSION";const Xt=Qt;class Jt{constructor(e){this.eventTarget=e,this.handlersMap={},this.boundEventHandler=this.handleEvent.bind(this)}static _getInstance(e){const t=this.receivers.find((t=>t.isListeningto(e)));if(t)return t;const n=new Jt(e);return this.receivers.push(n),n}isListeningto(e){return this.eventTarget===e}async handleEvent(e){const t=e,{eventId:n,eventType:s,data:i}=t.data,r=this.handlersMap[s];if(!(null==r?void 0:r.size))return;t.ports[0].postMessage({status:"ack",eventId:n,eventType:s});const o=Array.from(r).map((async e=>e(t.origin,i))),a=await function(e){return Promise.all(e.map((async e=>{try{return{fulfilled:!0,value:await e}}catch(e){return{fulfilled:!1,reason:e}}})))}(o);t.ports[0].postMessage({status:"done",eventId:n,eventType:s,response:a})}_subscribe(e,t){0===Object.keys(this.handlersMap).length&&this.eventTarget.addEventListener("message",this.boundEventHandler),this.handlersMap[e]||(this.handlersMap[e]=new Set),this.handlersMap[e].add(t)}_unsubscribe(e,t){this.handlersMap[e]&&t&&this.handlersMap[e].delete(t),t&&0!==this.handlersMap[e].size||delete this.handlersMap[e],0===Object.keys(this.handlersMap).length&&this.eventTarget.removeEventListener("message",this.boundEventHandler)}}function Yt(e="",t=10){let n="";for(let e=0;e<t;e++)n+=Math.floor(10*Math.random());return e+n}Jt.receivers=[];class Zt{constructor(e){this.target=e,this.handlers=new Set}removeMessageHandler(e){e.messageChannel&&(e.messageChannel.port1.removeEventListener("message",e.onMessage),e.messageChannel.port1.close()),this.handlers.delete(e)}async _send(e,t,n=50){const s="undefined"!=typeof MessageChannel?new MessageChannel:null;if(!s)throw new Error("connection_unavailable");let i,r;return new Promise(((o,a)=>{const c=Yt("",20);s.port1.start();const u=setTimeout((()=>{a(new Error("unsupported_event"))}),n);r={messageChannel:s,onMessage(e){const t=e;if(t.data.eventId===c)switch(t.data.status){case"ack":clearTimeout(u),i=setTimeout((()=>{a(new Error("timeout"))}),3e3);break;case"done":clearTimeout(i),o(t.data.response);break;default:clearTimeout(u),clearTimeout(i),a(new Error("invalid_response"))}}},this.handlers.add(r),s.port1.addEventListener("message",r.onMessage),this.target.postMessage({eventType:e,eventId:c,data:t},[s.port2])})).finally((()=>{r&&this.removeMessageHandler(r)}))}}function en(){return window}function tn(){return void 0!==en().WorkerGlobalScope&&"function"==typeof en().importScripts}const nn="firebaseLocalStorageDb",sn="firebaseLocalStorage",rn="fbase_key";class on{constructor(e){this.request=e}toPromise(){return new Promise(((e,t)=>{this.request.addEventListener("success",(()=>{e(this.request.result)})),this.request.addEventListener("error",(()=>{t(this.request.error)}))}))}}function an(e,t){return e.transaction([sn],t?"readwrite":"readonly").objectStore(sn)}function cn(){const e=indexedDB.open(nn,1);return new Promise(((t,n)=>{e.addEventListener("error",(()=>{n(e.error)})),e.addEventListener("upgradeneeded",(()=>{const t=e.result;try{t.createObjectStore(sn,{keyPath:rn})}catch(e){n(e)}})),e.addEventListener("success",(async()=>{const n=e.result;n.objectStoreNames.contains(sn)?t(n):(n.close(),await function(){const e=indexedDB.deleteDatabase(nn);return new on(e).toPromise()}(),t(await cn()))}))}))}async function un(e,t,n){const s=an(e,!0).put({[rn]:t,value:n});return new on(s).toPromise()}function hn(e,t){const n=an(e,!0).delete(t);return new on(n).toPromise()}class ln{constructor(){this.type="LOCAL",this._shouldAllowMigration=!0,this.listeners={},this.localCache={},this.pollTimer=null,this.pendingWrites=0,this.receiver=null,this.sender=null,this.serviceWorkerReceiverAvailable=!1,this.activeServiceWorker=null,this._workerInitializationPromise=this.initializeServiceWorkerMessaging().then((()=>{}),(()=>{}))}async _openDb(){return this.db||(this.db=await cn()),this.db}async _withRetries(e){let t=0;for(;;)try{const t=await this._openDb();return await e(t)}catch(e){if(t++>3)throw e;this.db&&(this.db.close(),this.db=void 0)}}async initializeServiceWorkerMessaging(){return tn()?this.initializeReceiver():this.initializeSender()}async initializeReceiver(){this.receiver=Jt._getInstance(tn()?self:null),this.receiver._subscribe("keyChanged",(async(e,t)=>({keyProcessed:(await this._poll()).includes(t.key)}))),this.receiver._subscribe("ping",(async(e,t)=>["keyChanged"]))}async initializeSender(){var e,t;if(this.activeServiceWorker=await async function(){if(!(null===navigator||void 0===navigator?void 0:navigator.serviceWorker))return null;try{return(await navigator.serviceWorker.ready).active}catch(e){return null}}(),!this.activeServiceWorker)return;this.sender=new Zt(this.activeServiceWorker);const n=await this.sender._send("ping",{},800);n&&(null===(e=n[0])||void 0===e?void 0:e.fulfilled)&&(null===(t=n[0])||void 0===t?void 0:t.value.includes("keyChanged"))&&(this.serviceWorkerReceiverAvailable=!0)}async notifyServiceWorker(e){if(this.sender&&this.activeServiceWorker&&function(){var e;return(null===(e=null===navigator||void 0===navigator?void 0:navigator.serviceWorker)||void 0===e?void 0:e.controller)||null}()===this.activeServiceWorker)try{await this.sender._send("keyChanged",{key:e},this.serviceWorkerReceiverAvailable?800:50)}catch(e){}}async _isAvailable(){try{if(!indexedDB)return!1;const e=await cn();return await un(e,$t,"1"),await hn(e,$t),!0}catch(e){}return!1}async _withPendingWrite(e){this.pendingWrites++;try{await e()}finally{this.pendingWrites--}}async _set(e,t){return this._withPendingWrite((async()=>(await this._withRetries((n=>un(n,e,t))),this.localCache[e]=t,this.notifyServiceWorker(e))))}async _get(e){const t=await this._withRetries((t=>async function(e,t){const n=an(e,!1).get(t),s=await new on(n).toPromise();return void 0===s?null:s.value}(t,e)));return this.localCache[e]=t,t}async _remove(e){return this._withPendingWrite((async()=>(await this._withRetries((t=>hn(t,e))),delete this.localCache[e],this.notifyServiceWorker(e))))}async _poll(){const e=await this._withRetries((e=>{const t=an(e,!1).getAll();return new on(t).toPromise()}));if(!e)return[];if(0!==this.pendingWrites)return[];const t=[],n=new Set;for(const{fbase_key:s,value:i}of e)n.add(s),JSON.stringify(this.localCache[s])!==JSON.stringify(i)&&(this.notifyListeners(s,i),t.push(s));for(const e of Object.keys(this.localCache))this.localCache[e]&&!n.has(e)&&(this.notifyListeners(e,null),t.push(e));return t}notifyListeners(e,t){this.localCache[e]=t;const n=this.listeners[e];if(n)for(const e of Array.from(n))e(t)}startPolling(){this.stopPolling(),this.pollTimer=setInterval((async()=>this._poll()),800)}stopPolling(){this.pollTimer&&(clearInterval(this.pollTimer),this.pollTimer=null)}_addListener(e,t){0===Object.keys(this.listeners).length&&this.startPolling(),this.listeners[e]||(this.listeners[e]=new Set,this._get(e)),this.listeners[e].add(t)}_removeListener(e,t){this.listeners[e]&&(this.listeners[e].delete(t),0===this.listeners[e].size&&delete this.listeners[e]),0===Object.keys(this.listeners).length&&this.stopPolling()}}ln.type="LOCAL";const dn=ln;function fn(e){return`__${e}${Math.floor(1e6*Math.random())}`}fn("rcb"),new Be(3e4,6e4);class pn{constructor(e){this.providerId=pn.PROVIDER_ID,this.auth=St(e)}verifyPhoneNumber(e,t){return async function(e,t,n){var s;const i=await n.verify();try{let r;if(Le("string"==typeof i,e,"argument-error"),Le("recaptcha"===n.type,e,"argument-error"),r="string"==typeof t?{phoneNumber:t}:t,"session"in r){const t=r.session;if("phoneNumber"in r){Le("enroll"===t.type,e,"internal-error");const n=await function(e,t){return He(e,"POST","/v2/accounts/mfaEnrollment:start",$e(e,t))}(e,{idToken:t.credential,phoneEnrollmentInfo:{phoneNumber:r.phoneNumber,recaptchaToken:i}});return n.phoneSessionInfo.sessionInfo}{Le("signin"===t.type,e,"internal-error");const n=(null===(s=r.multiFactorHint)||void 0===s?void 0:s.uid)||r.multiFactorUid;Le(n,e,"missing-multi-factor-info");const o=await function(e,t){return He(e,"POST","/v2/accounts/mfaSignIn:start",$e(e,t))}(e,{mfaPendingCredential:t.credential,mfaEnrollmentId:n,phoneSignInInfo:{recaptchaToken:i}});return o.phoneResponseInfo.sessionInfo}}{const{sessionInfo:t}=await async function(e,t){return He(e,"POST","/v1/accounts:sendVerificationCode",$e(e,t))}(e,{phoneNumber:r.phoneNumber,recaptchaToken:i});return t}}finally{n._reset()}}(this.auth,e,_(t))}static credential(e,t){return Ot._fromVerification(e,t)}static credentialFromResult(e){const t=e;return pn.credentialFromTaggedObject(t)}static credentialFromError(e){return pn.credentialFromTaggedObject(e.customData||{})}static credentialFromTaggedObject({_tokenResponse:e}){if(!e)return null;const{phoneNumber:t,temporaryProof:n}=e;return t&&n?Ot._fromTokenResponse(t,n):null}}function mn(e,t){return t?Ue(t):(Le(e._popupRedirectResolver,e,"argument-error"),e._popupRedirectResolver)}pn.PROVIDER_ID="phone",pn.PHONE_SIGN_IN_METHOD="phone";class gn extends kt{constructor(e){super("custom","custom"),this.params=e}_getIdTokenResponse(e){return Nt(e,this._buildIdpRequest())}_linkToIdToken(e,t){return Nt(e,this._buildIdpRequest(t))}_getReauthenticationResolver(e){return Nt(e,this._buildIdpRequest())}_buildIdpRequest(e){const t={requestUri:this.params.requestUri,sessionId:this.params.sessionId,postBody:this.params.postBody,tenantId:this.params.tenantId,pendingToken:this.params.pendingToken,returnSecureToken:!0,returnIdpCredential:!0};return e&&(t.idToken=e),t}}function yn(e){return async function(e,t,n=!1){const s="signIn",i=await Kt(e,s,t),r=await jt._fromIdTokenResponse(e,s,i);return n||await e._updateCurrentUser(r.user),r}(e.auth,new gn(e),e.bypassAuthState)}function vn(e){const{auth:t,user:n}=e;return Le(n,t,"internal-error"),async function(e,t,n=!1){var s;const{auth:i}=e,r="reauthenticate";try{const s=await tt(e,Kt(i,r,t,e),n);Le(s.idToken,i,"internal-error");const o=et(s.idToken);Le(o,i,"internal-error");const{sub:a}=o;return Le(e.uid===a,i,"user-mismatch"),jt._forOperation(e,r,s)}catch(e){throw"auth/user-not-found"===(null===(s=e)||void 0===s?void 0:s.code)&&Ne(i,"user-mismatch"),e}}(n,new gn(e),e.bypassAuthState)}async function wn(e){const{auth:t,user:n}=e;return Le(n,t,"internal-error"),async function(e,t,n=!1){const s=await tt(e,t._linkToIdToken(e.auth,await e.getIdToken()),n);return jt._forOperation(e,"link",s)}(n,new gn(e),e.bypassAuthState)}class En{constructor(e,t,n,s,i=!1){this.auth=e,this.resolver=n,this.user=s,this.bypassAuthState=i,this.pendingPromise=null,this.eventManager=null,this.filter=Array.isArray(t)?t:[t]}execute(){return new Promise((async(e,t)=>{this.pendingPromise={resolve:e,reject:t};try{this.eventManager=await this.resolver._initialize(this.auth),await this.onExecution(),this.eventManager.registerConsumer(this)}catch(e){this.reject(e)}}))}async onAuthEvent(e){const{urlResponse:t,sessionId:n,postBody:s,tenantId:i,error:r,type:o}=e;if(r)return void this.reject(r);const a={auth:this.auth,requestUri:t,sessionId:n,tenantId:i||void 0,postBody:s||void 0,user:this.user,bypassAuthState:this.bypassAuthState};try{this.resolve(await this.getIdpTask(o)(a))}catch(e){this.reject(e)}}onError(e){this.reject(e)}getIdpTask(e){switch(e){case"signInViaPopup":case"signInViaRedirect":return yn;case"linkViaPopup":case"linkViaRedirect":return wn;case"reauthViaPopup":case"reauthViaRedirect":return vn;default:Ne(this.auth,"internal-error")}}resolve(e){Me(this.pendingPromise,"Pending promise was never set"),this.pendingPromise.resolve(e),this.unregisterAndCleanUp()}reject(e){Me(this.pendingPromise,"Pending promise was never set"),this.pendingPromise.reject(e),this.unregisterAndCleanUp()}unregisterAndCleanUp(){this.eventManager&&this.eventManager.unregisterConsumer(this),this.pendingPromise=null,this.cleanUp()}}const In=new Be(2e3,1e4);class Tn extends En{constructor(e,t,n,s,i){super(e,t,s,i),this.provider=n,this.authWindow=null,this.pollId=null,Tn.currentPopupAction&&Tn.currentPopupAction.cancel(),Tn.currentPopupAction=this}async executeNotNull(){const e=await this.execute();return Le(e,this.auth,"internal-error"),e}async onExecution(){Me(1===this.filter.length,"Popup operations only handle one event");const e=Yt();this.authWindow=await this.resolver._openPopup(this.auth,this.provider,this.filter[0],e),this.authWindow.associatedEvent=e,this.resolver._originValidation(this.auth).catch((e=>{this.reject(e)})),this.resolver._isIframeWebStorageSupported(this.auth,(e=>{e||this.reject(De(this.auth,"web-storage-unsupported"))})),this.pollUserCancellation()}get eventId(){var e;return(null===(e=this.authWindow)||void 0===e?void 0:e.associatedEvent)||null}cancel(){this.reject(De(this.auth,"cancelled-popup-request"))}cleanUp(){this.authWindow&&this.authWindow.close(),this.pollId&&window.clearTimeout(this.pollId),this.authWindow=null,this.pollId=null,Tn.currentPopupAction=null}pollUserCancellation(){const e=()=>{var t,n;(null===(n=null===(t=this.authWindow)||void 0===t?void 0:t.window)||void 0===n?void 0:n.closed)?this.pollId=window.setTimeout((()=>{this.pollId=null,this.reject(De(this.auth,"popup-closed-by-user"))}),2e3):this.pollId=window.setTimeout(e,In.get())};e()}}Tn.currentPopupAction=null;const bn=new Map;class _n extends En{constructor(e,t,n=!1){super(e,["signInViaRedirect","linkViaRedirect","reauthViaRedirect","unknown"],t,void 0,n),this.eventId=null}async execute(){let e=bn.get(this.auth._key());if(!e){try{const t=await async function(e,t){const n=function(e){return ht("pendingRedirect",e.config.apiKey,e.name)}(t),s=function(e){return Ue(e._redirectPersistence)}(e);if(!await s._isAvailable())return!1;const i="true"===await s._get(n);return await s._remove(n),i}(this.resolver,this.auth)?await super.execute():null;e=()=>Promise.resolve(t)}catch(t){e=()=>Promise.reject(t)}bn.set(this.auth._key(),e)}return this.bypassAuthState||bn.set(this.auth._key(),(()=>Promise.resolve(null))),e()}async onAuthEvent(e){if("signInViaRedirect"===e.type)return super.onAuthEvent(e);if("unknown"!==e.type){if(e.eventId){const t=await this.auth._redirectUserForId(e.eventId);if(t)return this.user=t,super.onAuthEvent(e);this.resolve(null)}}else this.resolve(null)}async onExecution(){}cleanUp(){}}function Sn(e,t){bn.set(e._key(),t)}async function Cn(e,t,n=!1){const s=St(e),i=mn(s,t),r=new _n(s,i,n),o=await r.execute();return o&&!n&&(delete o.user._redirectEventId,await s._persistUserIfCurrent(o.user),await s._setRedirectUser(null,t)),o}class kn{constructor(e){this.auth=e,this.cachedEventUids=new Set,this.consumers=new Set,this.queuedRedirectEvent=null,this.hasHandledPotentialRedirect=!1,this.lastProcessedEventTime=Date.now()}registerConsumer(e){this.consumers.add(e),this.queuedRedirectEvent&&this.isEventForConsumer(this.queuedRedirectEvent,e)&&(this.sendToConsumer(this.queuedRedirectEvent,e),this.saveEventToCache(this.queuedRedirectEvent),this.queuedRedirectEvent=null)}unregisterConsumer(e){this.consumers.delete(e)}onEvent(e){if(this.hasEventBeenHandled(e))return!1;let t=!1;return this.consumers.forEach((n=>{this.isEventForConsumer(e,n)&&(t=!0,this.sendToConsumer(e,n),this.saveEventToCache(e))})),this.hasHandledPotentialRedirect||!function(e){switch(e.type){case"signInViaRedirect":case"linkViaRedirect":case"reauthViaRedirect":return!0;case"unknown":return Nn(e);default:return!1}}(e)||(this.hasHandledPotentialRedirect=!0,t||(this.queuedRedirectEvent=e,t=!0)),t}sendToConsumer(e,t){var n;if(e.error&&!Nn(e)){const s=(null===(n=e.error.code)||void 0===n?void 0:n.split("auth/")[1])||"internal-error";t.onError(De(this.auth,s))}else t.onAuthEvent(e)}isEventForConsumer(e,t){const n=null===t.eventId||!!e.eventId&&e.eventId===t.eventId;return t.filter.includes(e.type)&&n}hasEventBeenHandled(e){return Date.now()-this.lastProcessedEventTime>=6e5&&this.cachedEventUids.clear(),this.cachedEventUids.has(An(e))}saveEventToCache(e){this.cachedEventUids.add(An(e)),this.lastProcessedEventTime=Date.now()}}function An(e){return[e.type,e.eventId,e.sessionId,e.tenantId].filter((e=>e)).join("-")}function Nn({type:e,error:t}){return"unknown"===e&&"auth/no-auth-event"===(null==t?void 0:t.code)}const Dn=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,Rn=/^https?/;function On(e){const t=Fe(),{protocol:n,hostname:s}=new URL(t);if(e.startsWith("chrome-extension://")){const i=new URL(e);return""===i.hostname&&""===s?"chrome-extension:"===n&&e.replace("chrome-extension://","")===t.replace("chrome-extension://",""):"chrome-extension:"===n&&i.hostname===s}if(!Rn.test(n))return!1;if(Dn.test(e))return s===e;const i=e.replace(/\./g,"\\.");return new RegExp("^(.+\\."+i+"|"+i+")$","i").test(s)}const Ln=new Be(3e4,6e4);function Pn(){const e=en().___jsl;if(null==e?void 0:e.H)for(const t of Object.keys(e.H))if(e.H[t].r=e.H[t].r||[],e.H[t].L=e.H[t].L||[],e.H[t].r=[...e.H[t].L],e.CP)for(let t=0;t<e.CP.length;t++)e.CP[t]=null}let Mn=null;function xn(e){return Mn=Mn||function(e){return new Promise(((t,n)=>{var s,i,r,o;function a(){Pn(),gapi.load("gapi.iframes",{callback:()=>{t(gapi.iframes.getContext())},ontimeout:()=>{Pn(),n(De(e,"network-request-failed"))},timeout:Ln.get()})}if(null===(i=null===(s=en().gapi)||void 0===s?void 0:s.iframes)||void 0===i?void 0:i.Iframe)t(gapi.iframes.getContext());else{if(!(null===(r=en().gapi)||void 0===r?void 0:r.load)){const t=fn("iframefcb");return en()[t]=()=>{gapi.load?a():n(De(e,"network-request-failed"))},(o=`https://apis.google.com/js/api.js?onload=${t}`,new Promise(((e,t)=>{const n=document.createElement("script");n.setAttribute("src",o),n.onload=e,n.onerror=e=>{const n=De("internal-error");n.customData=e,t(n)},n.type="text/javascript",n.charset="UTF-8",function(){var e,t;return null!==(t=null===(e=document.getElementsByTagName("head"))||void 0===e?void 0:e[0])&&void 0!==t?t:document}().appendChild(n)}))).catch((e=>n(e)))}a()}})).catch((e=>{throw Mn=null,e}))}(e),Mn}const Un=new Be(5e3,15e3),Fn={style:{position:"absolute",top:"-100px",width:"1px",height:"1px"},"aria-hidden":"true",tabindex:"-1"},Vn=new Map([["identitytoolkit.googleapis.com","p"],["staging-identitytoolkit.sandbox.googleapis.com","s"],["test-identitytoolkit.sandbox.googleapis.com","t"]]);function Bn(e){const t=e.config;Le(t.authDomain,e,"auth-domain-config-required");const n=t.emulator?je(t,"emulator/auth/iframe"):`https://${e.config.authDomain}/__/auth/iframe`,s={apiKey:t.apiKey,appName:e.name,v:le},i=Vn.get(e.config.apiHost);i&&(s.eid=i);const r=e._getFrameworks();return r.length&&(s.fw=r.join(",")),`${n}?${w(s).slice(1)}`}const jn={location:"yes",resizable:"yes",statusbar:"yes",toolbar:"no"};class qn{constructor(e){this.window=e,this.associatedEvent=null}close(){if(this.window)try{this.window.close()}catch(e){}}}function zn(e,t,n,s,i,r){Le(e.config.authDomain,e,"auth-domain-config-required"),Le(e.config.apiKey,e,"invalid-api-key");const o={apiKey:e.config.apiKey,appName:e.name,authType:n,redirectUrl:s,v:le,eventId:i};if(t instanceof Mt){t.setDefaultLanguage(e.languageCode),o.providerId=t.providerId||"",function(e){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0}(t.getCustomParameters())||(o.customParameters=JSON.stringify(t.getCustomParameters()));for(const[e,t]of Object.entries(r||{}))o[e]=t}if(t instanceof xt){const e=t.getScopes().filter((e=>""!==e));e.length>0&&(o.scopes=e.join(","))}e.tenantId&&(o.tid=e.tenantId);const a=o;for(const e of Object.keys(a))void 0===a[e]&&delete a[e];return`${function({config:e}){return e.emulator?je(e,"emulator/auth/handler"):`https://${e.authDomain}/__/auth/handler`}(e)}?${w(a).slice(1)}`}const Kn="webStorageSupport",$n=class{constructor(){this.eventManagers={},this.iframes={},this.originValidationPromises={},this._redirectPersistence=Xt,this._completeRedirectFn=Cn,this._overrideRedirectResult=Sn}async _openPopup(e,t,n,s){var i;return Me(null===(i=this.eventManagers[e._key()])||void 0===i?void 0:i.manager,"_initialize() not called before _openPopup()"),function(e,t,n,s=500,i=600){const r=Math.max((window.screen.availHeight-i)/2,0).toString(),o=Math.max((window.screen.availWidth-s)/2,0).toString();let a="";const c=Object.assign(Object.assign({},jn),{width:s.toString(),height:i.toString(),top:r,left:o}),h=u().toLowerCase();n&&(a=mt(h)?"_blank":n),ft(h)&&(t=t||"http://localhost",c.scrollbars="yes");const l=Object.entries(c).reduce(((e,[t,n])=>`${e}${t}=${n},`),"");if(function(e=u()){var t;return Et(e)&&!!(null===(t=window.navigator)||void 0===t?void 0:t.standalone)}(h)&&"_self"!==a)return function(e,t){const n=document.createElement("a");n.href=e,n.target=t;const s=document.createEvent("MouseEvent");s.initMouseEvent("click",!0,!0,window,1,0,0,0,0,!1,!1,!1,!1,1,null),n.dispatchEvent(s)}(t||"",a),new qn(null);const d=window.open(t||"",a,l);Le(d,e,"popup-blocked");try{d.focus()}catch(e){}return new qn(d)}(e,zn(e,t,n,Fe(),s),Yt())}async _openRedirect(e,t,n,s){var i;return await this._originValidation(e),i=zn(e,t,n,Fe(),s),en().location.href=i,new Promise((()=>{}))}_initialize(e){const t=e._key();if(this.eventManagers[t]){const{manager:e,promise:n}=this.eventManagers[t];return e?Promise.resolve(e):(Me(n,"If manager is not set, promise should be"),n)}const n=this.initAndGetManager(e);return this.eventManagers[t]={promise:n},n.catch((()=>{delete this.eventManagers[t]})),n}async initAndGetManager(e){const t=await async function(e){const t=await xn(e),n=en().gapi;return Le(n,e,"internal-error"),t.open({where:document.body,url:Bn(e),messageHandlersFilter:n.iframes.CROSS_ORIGIN_IFRAMES_FILTER,attributes:Fn,dontclear:!0},(t=>new Promise((async(n,s)=>{await t.restyle({setHideOnLeave:!1});const i=De(e,"network-request-failed"),r=en().setTimeout((()=>{s(i)}),Un.get());function o(){en().clearTimeout(r),n(t)}t.ping(o).then(o,(()=>{s(i)}))}))))}(e),n=new kn(e);return t.register("authEvent",(t=>(Le(null==t?void 0:t.authEvent,e,"invalid-auth-event"),{status:n.onEvent(t.authEvent)?"ACK":"ERROR"})),gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER),this.eventManagers[e._key()]={manager:n},this.iframes[e._key()]=t,n}_isIframeWebStorageSupported(e,t){this.iframes[e._key()].send(Kn,{type:Kn},(n=>{var s;const i=null===(s=null==n?void 0:n[0])||void 0===s?void 0:s.webStorageSupport;void 0!==i&&t(!!i),Ne(e,"internal-error")}),gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER)}_originValidation(e){const t=e._key();return this.originValidationPromises[t]||(this.originValidationPromises[t]=async function(e){if(e.config.emulator)return;const{authorizedDomains:t}=await async function(e,t={}){return He(e,"GET","/v1/projects",t)}(e);for(const e of t)try{if(On(e))return}catch(e){}Ne(e,"unauthorized-domain")}(e)),this.originValidationPromises[t]}get _shouldInitProactively(){return It()||pt()||Et()}};var Hn,Gn="@firebase/auth",Wn="0.20.5";class Qn{constructor(e){this.auth=e,this.internalListeners=new Map}getUid(){var e;return this.assertAuthConfigured(),(null===(e=this.auth.currentUser)||void 0===e?void 0:e.uid)||null}async getToken(e){return this.assertAuthConfigured(),await this.auth._initializationPromise,this.auth.currentUser?{accessToken:await this.auth.currentUser.getIdToken(e)}:null}addAuthTokenListener(e){if(this.assertAuthConfigured(),this.internalListeners.has(e))return;const t=this.auth.onIdTokenChanged((t=>{var n;e((null===(n=t)||void 0===n?void 0:n.stsTokenManager.accessToken)||null)}));this.internalListeners.set(e,t),this.updateProactiveRefresh()}removeAuthTokenListener(e){this.assertAuthConfigured();const t=this.internalListeners.get(e);t&&(this.internalListeners.delete(e),t(),this.updateProactiveRefresh())}assertAuthConfigured(){Le(this.auth._initializationPromise,"dependent-sdk-initialized-before-auth")}updateProactiveRefresh(){this.internalListeners.size>0?this.auth._startProactiveRefresh():this.auth._stopProactiveRefresh()}}function Xn(e=de()){const t=ce(e,"auth");return t.isInitialized()?t.getImmediate():function(e,t){const n=ce(e,"auth");if(n.isInitialized()){const e=n.getImmediate();if(y(n.getOptions(),null!=t?t:{}))return e;Ne(e,"already-initialized")}return n.initialize({options:t})}(e,{popupRedirectResolver:$n,persistence:[dn,Wt,Xt]})}Hn="Browser",ae(new S("auth",((e,{options:t})=>{const n=e.getProvider("app").getImmediate(),s=e.getProvider("heartbeat"),{apiKey:i,authDomain:r}=n.options;return((e,n)=>{Le(i&&!i.includes(":"),"invalid-api-key",{appName:e.name}),Le(!(null==r?void 0:r.includes(":")),"argument-error",{appName:e.name});const s={apiKey:i,authDomain:r,clientPlatform:Hn,apiHost:"identitytoolkit.googleapis.com",tokenApiHost:"securetoken.googleapis.com",apiScheme:"https",sdkClientVersion:Tt(Hn)},o=new _t(e,n,s);return function(e,t){const n=(null==t?void 0:t.persistence)||[],s=(Array.isArray(n)?n:[n]).map(Ue);(null==t?void 0:t.errorMap)&&e._updateErrorMap(t.errorMap),e._initializeWithPersistence(s,null==t?void 0:t.popupRedirectResolver)}(o,t),o})(n,s)}),"PUBLIC").setInstantiationMode("EXPLICIT").setInstanceCreatedCallback(((e,t,n)=>{e.getProvider("auth-internal").initialize()}))),ae(new S("auth-internal",(e=>{return t=St(e.getProvider("auth").getImmediate()),new Qn(t);var t}),"PRIVATE").setInstantiationMode("EXPLICIT")),fe(Gn,Wn,void 0),fe(Gn,Wn,"esm2017");var Jn,Yn="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==e.g?e.g:"undefined"!=typeof self?self:{},Zn={},es=es||{},ts=Yn||self;function ns(){}function ss(e){var t=typeof e;return"array"==(t="object"!=t?t:e?Array.isArray(e)?"array":t:"null")||"object"==t&&"number"==typeof e.length}function is(e){var t=typeof e;return"object"==t&&null!=e||"function"==t}var rs="closure_uid_"+(1e9*Math.random()>>>0),os=0;function as(e,t,n){return e.call.apply(e.bind,arguments)}function cs(e,t,n){if(!e)throw Error();if(2<arguments.length){var s=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,s),e.apply(t,n)}}return function(){return e.apply(t,arguments)}}function us(e,t,n){return(us=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?as:cs).apply(null,arguments)}function hs(e,t){var n=Array.prototype.slice.call(arguments,1);return function(){var t=n.slice();return t.push.apply(t,arguments),e.apply(this,t)}}function ls(e,t){function n(){}n.prototype=t.prototype,e.Z=t.prototype,e.prototype=new n,e.prototype.constructor=e,e.Vb=function(e,n,s){for(var i=Array(arguments.length-2),r=2;r<arguments.length;r++)i[r-2]=arguments[r];return t.prototype[n].apply(e,i)}}function ds(){this.s=this.s,this.o=this.o}var fs={};ds.prototype.s=!1,ds.prototype.na=function(){if(!this.s&&(this.s=!0,this.M(),0)){var e=function(e){return Object.prototype.hasOwnProperty.call(e,rs)&&e[rs]||(e[rs]=++os)}(this);delete fs[e]}},ds.prototype.M=function(){if(this.o)for(;this.o.length;)this.o.shift()()};const ps=Array.prototype.indexOf?function(e,t){return Array.prototype.indexOf.call(e,t,void 0)}:function(e,t){if("string"==typeof e)return"string"!=typeof t||1!=t.length?-1:e.indexOf(t,0);for(let n=0;n<e.length;n++)if(n in e&&e[n]===t)return n;return-1},ms=Array.prototype.forEach?function(e,t,n){Array.prototype.forEach.call(e,t,n)}:function(e,t,n){const s=e.length,i="string"==typeof e?e.split(""):e;for(let r=0;r<s;r++)r in i&&t.call(n,i[r],r,e)};function gs(e){return Array.prototype.concat.apply([],arguments)}function ys(e){const t=e.length;if(0<t){const n=Array(t);for(let s=0;s<t;s++)n[s]=e[s];return n}return[]}function vs(e){return/^[\s\xa0]*$/.test(e)}var ws,Es=String.prototype.trim?function(e){return e.trim()}:function(e){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(e)[1]};function Is(e,t){return-1!=e.indexOf(t)}function Ts(e,t){return e<t?-1:e>t?1:0}e:{var bs=ts.navigator;if(bs){var _s=bs.userAgent;if(_s){ws=_s;break e}}ws=""}function Ss(e,t,n){for(const s in e)t.call(n,e[s],s,e)}function Cs(e){const t={};for(const n in e)t[n]=e[n];return t}var ks="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function As(e,t){let n,s;for(let t=1;t<arguments.length;t++){for(n in s=arguments[t],s)e[n]=s[n];for(let t=0;t<ks.length;t++)n=ks[t],Object.prototype.hasOwnProperty.call(s,n)&&(e[n]=s[n])}}function Ns(e){return Ns[" "](e),e}Ns[" "]=ns;var Ds,Rs,Os=Is(ws,"Opera"),Ls=Is(ws,"Trident")||Is(ws,"MSIE"),Ps=Is(ws,"Edge"),Ms=Ps||Ls,xs=Is(ws,"Gecko")&&!(Is(ws.toLowerCase(),"webkit")&&!Is(ws,"Edge"))&&!(Is(ws,"Trident")||Is(ws,"MSIE"))&&!Is(ws,"Edge"),Us=Is(ws.toLowerCase(),"webkit")&&!Is(ws,"Edge");function Fs(){var e=ts.document;return e?e.documentMode:void 0}e:{var Vs="",Bs=(Rs=ws,xs?/rv:([^\);]+)(\)|;)/.exec(Rs):Ps?/Edge\/([\d\.]+)/.exec(Rs):Ls?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(Rs):Us?/WebKit\/(\S+)/.exec(Rs):Os?/(?:Version)[ \/]?(\S+)/.exec(Rs):void 0);if(Bs&&(Vs=Bs?Bs[1]:""),Ls){var js=Fs();if(null!=js&&js>parseFloat(Vs)){Ds=String(js);break e}}Ds=Vs}var qs,zs={};function Ks(){return e=zs,Object.prototype.hasOwnProperty.call(e,9)?e[9]:e[9]=function(){let e=0;const t=Es(String(Ds)).split("."),n=Es("9").split("."),s=Math.max(t.length,n.length);for(let o=0;0==e&&o<s;o++){var i=t[o]||"",r=n[o]||"";do{if(i=/(\d*)(\D*)(.*)/.exec(i)||["","","",""],r=/(\d*)(\D*)(.*)/.exec(r)||["","","",""],0==i[0].length&&0==r[0].length)break;e=Ts(0==i[1].length?0:parseInt(i[1],10),0==r[1].length?0:parseInt(r[1],10))||Ts(0==i[2].length,0==r[2].length)||Ts(i[2],r[2]),i=i[3],r=r[3]}while(0==e)}return 0<=e}();var e}ts.document&&Ls?qs=Fs()||parseInt(Ds,10)||void 0:qs=void 0;var $s=qs,Hs=function(){if(!ts.addEventListener||!Object.defineProperty)return!1;var e=!1,t=Object.defineProperty({},"passive",{get:function(){e=!0}});try{ts.addEventListener("test",ns,t),ts.removeEventListener("test",ns,t)}catch(e){}return e}();function Gs(e,t){this.type=e,this.g=this.target=t,this.defaultPrevented=!1}function Ws(e,t){if(Gs.call(this,e?e.type:""),this.relatedTarget=this.g=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.state=null,this.pointerId=0,this.pointerType="",this.i=null,e){var n=this.type=e.type,s=e.changedTouches&&e.changedTouches.length?e.changedTouches[0]:null;if(this.target=e.target||e.srcElement,this.g=t,t=e.relatedTarget){if(xs){e:{try{Ns(t.nodeName);var i=!0;break e}catch(e){}i=!1}i||(t=null)}}else"mouseover"==n?t=e.fromElement:"mouseout"==n&&(t=e.toElement);this.relatedTarget=t,s?(this.clientX=void 0!==s.clientX?s.clientX:s.pageX,this.clientY=void 0!==s.clientY?s.clientY:s.pageY,this.screenX=s.screenX||0,this.screenY=s.screenY||0):(this.clientX=void 0!==e.clientX?e.clientX:e.pageX,this.clientY=void 0!==e.clientY?e.clientY:e.pageY,this.screenX=e.screenX||0,this.screenY=e.screenY||0),this.button=e.button,this.key=e.key||"",this.ctrlKey=e.ctrlKey,this.altKey=e.altKey,this.shiftKey=e.shiftKey,this.metaKey=e.metaKey,this.pointerId=e.pointerId||0,this.pointerType="string"==typeof e.pointerType?e.pointerType:Qs[e.pointerType]||"",this.state=e.state,this.i=e,e.defaultPrevented&&Ws.Z.h.call(this)}}Gs.prototype.h=function(){this.defaultPrevented=!0},ls(Ws,Gs);var Qs={2:"touch",3:"pen",4:"mouse"};Ws.prototype.h=function(){Ws.Z.h.call(this);var e=this.i;e.preventDefault?e.preventDefault():e.returnValue=!1};var Xs="closure_listenable_"+(1e6*Math.random()|0),Js=0;function Ys(e,t,n,s,i){this.listener=e,this.proxy=null,this.src=t,this.type=n,this.capture=!!s,this.ia=i,this.key=++Js,this.ca=this.fa=!1}function Zs(e){e.ca=!0,e.listener=null,e.proxy=null,e.src=null,e.ia=null}function ei(e){this.src=e,this.g={},this.h=0}function ti(e,t){var n=t.type;if(n in e.g){var s,i=e.g[n],r=ps(i,t);(s=0<=r)&&Array.prototype.splice.call(i,r,1),s&&(Zs(t),0==e.g[n].length&&(delete e.g[n],e.h--))}}function ni(e,t,n,s){for(var i=0;i<e.length;++i){var r=e[i];if(!r.ca&&r.listener==t&&r.capture==!!n&&r.ia==s)return i}return-1}ei.prototype.add=function(e,t,n,s,i){var r=e.toString();(e=this.g[r])||(e=this.g[r]=[],this.h++);var o=ni(e,t,s,i);return-1<o?(t=e[o],n||(t.fa=!1)):((t=new Ys(t,this.src,r,!!s,i)).fa=n,e.push(t)),t};var si="closure_lm_"+(1e6*Math.random()|0),ii={};function ri(e,t,n,s,i){if(s&&s.once)return ai(e,t,n,s,i);if(Array.isArray(t)){for(var r=0;r<t.length;r++)ri(e,t[r],n,s,i);return null}return n=pi(n),e&&e[Xs]?e.N(t,n,is(s)?!!s.capture:!!s,i):oi(e,t,n,!1,s,i)}function oi(e,t,n,s,i,r){if(!t)throw Error("Invalid event type");var o=is(i)?!!i.capture:!!i,a=di(e);if(a||(e[si]=a=new ei(e)),(n=a.add(t,n,s,o,r)).proxy)return n;if(s=function(){var e=li;return function t(n){return e.call(t.src,t.listener,n)}}(),n.proxy=s,s.src=e,s.listener=n,e.addEventListener)Hs||(i=o),void 0===i&&(i=!1),e.addEventListener(t.toString(),s,i);else if(e.attachEvent)e.attachEvent(hi(t.toString()),s);else{if(!e.addListener||!e.removeListener)throw Error("addEventListener and attachEvent are unavailable.");e.addListener(s)}return n}function ai(e,t,n,s,i){if(Array.isArray(t)){for(var r=0;r<t.length;r++)ai(e,t[r],n,s,i);return null}return n=pi(n),e&&e[Xs]?e.O(t,n,is(s)?!!s.capture:!!s,i):oi(e,t,n,!0,s,i)}function ci(e,t,n,s,i){if(Array.isArray(t))for(var r=0;r<t.length;r++)ci(e,t[r],n,s,i);else s=is(s)?!!s.capture:!!s,n=pi(n),e&&e[Xs]?(e=e.i,(t=String(t).toString())in e.g&&-1<(n=ni(r=e.g[t],n,s,i))&&(Zs(r[n]),Array.prototype.splice.call(r,n,1),0==r.length&&(delete e.g[t],e.h--))):e&&(e=di(e))&&(t=e.g[t.toString()],e=-1,t&&(e=ni(t,n,s,i)),(n=-1<e?t[e]:null)&&ui(n))}function ui(e){if("number"!=typeof e&&e&&!e.ca){var t=e.src;if(t&&t[Xs])ti(t.i,e);else{var n=e.type,s=e.proxy;t.removeEventListener?t.removeEventListener(n,s,e.capture):t.detachEvent?t.detachEvent(hi(n),s):t.addListener&&t.removeListener&&t.removeListener(s),(n=di(t))?(ti(n,e),0==n.h&&(n.src=null,t[si]=null)):Zs(e)}}}function hi(e){return e in ii?ii[e]:ii[e]="on"+e}function li(e,t){if(e.ca)e=!0;else{t=new Ws(t,this);var n=e.listener,s=e.ia||e.src;e.fa&&ui(e),e=n.call(s,t)}return e}function di(e){return(e=e[si])instanceof ei?e:null}var fi="__closure_events_fn_"+(1e9*Math.random()>>>0);function pi(e){return"function"==typeof e?e:(e[fi]||(e[fi]=function(t){return e.handleEvent(t)}),e[fi])}function mi(){ds.call(this),this.i=new ei(this),this.P=this,this.I=null}function gi(e,t){var n,s=e.I;if(s)for(n=[];s;s=s.I)n.push(s);if(e=e.P,s=t.type||t,"string"==typeof t)t=new Gs(t,e);else if(t instanceof Gs)t.target=t.target||e;else{var i=t;As(t=new Gs(s,e),i)}if(i=!0,n)for(var r=n.length-1;0<=r;r--){var o=t.g=n[r];i=yi(o,s,!0,t)&&i}if(i=yi(o=t.g=e,s,!0,t)&&i,i=yi(o,s,!1,t)&&i,n)for(r=0;r<n.length;r++)i=yi(o=t.g=n[r],s,!1,t)&&i}function yi(e,t,n,s){if(!(t=e.i.g[String(t)]))return!0;t=t.concat();for(var i=!0,r=0;r<t.length;++r){var o=t[r];if(o&&!o.ca&&o.capture==n){var a=o.listener,c=o.ia||o.src;o.fa&&ti(e.i,o),i=!1!==a.call(c,s)&&i}}return i&&!s.defaultPrevented}ls(mi,ds),mi.prototype[Xs]=!0,mi.prototype.removeEventListener=function(e,t,n,s){ci(this,e,t,n,s)},mi.prototype.M=function(){if(mi.Z.M.call(this),this.i){var e,t=this.i;for(e in t.g){for(var n=t.g[e],s=0;s<n.length;s++)Zs(n[s]);delete t.g[e],t.h--}}this.I=null},mi.prototype.N=function(e,t,n,s){return this.i.add(String(e),t,!1,n,s)},mi.prototype.O=function(e,t,n,s){return this.i.add(String(e),t,!0,n,s)};var vi=ts.JSON.stringify;function wi(){var e=Ci;let t=null;return e.g&&(t=e.g,e.g=e.g.next,e.g||(e.h=null),t.next=null),t}var Ei,Ii=new class{constructor(e,t){this.i=e,this.j=t,this.h=0,this.g=null}get(){let e;return 0<this.h?(this.h--,e=this.g,this.g=e.next,e.next=null):e=this.i(),e}}((()=>new Ti),(e=>e.reset()));class Ti{constructor(){this.next=this.g=this.h=null}set(e,t){this.h=e,this.g=t,this.next=null}reset(){this.next=this.g=this.h=null}}function bi(e){ts.setTimeout((()=>{throw e}),0)}function _i(e,t){Ei||function(){var e=ts.Promise.resolve(void 0);Ei=function(){e.then(ki)}}(),Si||(Ei(),Si=!0),Ci.add(e,t)}var Si=!1,Ci=new class{constructor(){this.h=this.g=null}add(e,t){const n=Ii.get();n.set(e,t),this.h?this.h.next=n:this.g=n,this.h=n}};function ki(){for(var e;e=wi();){try{e.h.call(e.g)}catch(e){bi(e)}var t=Ii;t.j(e),100>t.h&&(t.h++,e.next=t.g,t.g=e)}Si=!1}function Ai(e,t){mi.call(this),this.h=e||1,this.g=t||ts,this.j=us(this.kb,this),this.l=Date.now()}function Ni(e){e.da=!1,e.S&&(e.g.clearTimeout(e.S),e.S=null)}function Di(e,t,n){if("function"==typeof e)n&&(e=us(e,n));else{if(!e||"function"!=typeof e.handleEvent)throw Error("Invalid listener argument");e=us(e.handleEvent,e)}return 2147483647<Number(t)?-1:ts.setTimeout(e,t||0)}function Ri(e){e.g=Di((()=>{e.g=null,e.i&&(e.i=!1,Ri(e))}),e.j);const t=e.h;e.h=null,e.m.apply(null,t)}ls(Ai,mi),(Jn=Ai.prototype).da=!1,Jn.S=null,Jn.kb=function(){if(this.da){var e=Date.now()-this.l;0<e&&e<.8*this.h?this.S=this.g.setTimeout(this.j,this.h-e):(this.S&&(this.g.clearTimeout(this.S),this.S=null),gi(this,"tick"),this.da&&(Ni(this),this.start()))}},Jn.start=function(){this.da=!0,this.S||(this.S=this.g.setTimeout(this.j,this.h),this.l=Date.now())},Jn.M=function(){Ai.Z.M.call(this),Ni(this),delete this.g};class Oi extends ds{constructor(e,t){super(),this.m=e,this.j=t,this.h=null,this.i=!1,this.g=null}l(e){this.h=arguments,this.g?this.i=!0:Ri(this)}M(){super.M(),this.g&&(ts.clearTimeout(this.g),this.g=null,this.i=!1,this.h=null)}}function Li(e){ds.call(this),this.h=e,this.g={}}ls(Li,ds);var Pi=[];function Mi(e,t,n,s){Array.isArray(n)||(n&&(Pi[0]=n.toString()),n=Pi);for(var i=0;i<n.length;i++){var r=ri(t,n[i],s||e.handleEvent,!1,e.h||e);if(!r)break;e.g[r.key]=r}}function xi(e){Ss(e.g,(function(e,t){this.g.hasOwnProperty(t)&&ui(e)}),e),e.g={}}function Ui(){this.g=!0}function Fi(e,t,n,s){e.info((function(){return"XMLHTTP TEXT ("+t+"): "+function(e,t){if(!e.g)return t;if(!t)return null;try{var n=JSON.parse(t);if(n)for(e=0;e<n.length;e++)if(Array.isArray(n[e])){var s=n[e];if(!(2>s.length)){var i=s[1];if(Array.isArray(i)&&!(1>i.length)){var r=i[0];if("noop"!=r&&"stop"!=r&&"close"!=r)for(var o=1;o<i.length;o++)i[o]=""}}}return vi(n)}catch(e){return t}}(e,n)+(s?" "+s:"")}))}Li.prototype.M=function(){Li.Z.M.call(this),xi(this)},Li.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented")},Ui.prototype.Aa=function(){this.g=!1},Ui.prototype.info=function(){};var Vi={},Bi=null;function ji(){return Bi=Bi||new mi}function qi(e){Gs.call(this,Vi.Ma,e)}function zi(e){const t=ji();gi(t,new qi(t,e))}function Ki(e,t){Gs.call(this,Vi.STAT_EVENT,e),this.stat=t}function $i(e){const t=ji();gi(t,new Ki(t,e))}function Hi(e,t){Gs.call(this,Vi.Na,e),this.size=t}function Gi(e,t){if("function"!=typeof e)throw Error("Fn must not be null and must be a function");return ts.setTimeout((function(){e()}),t)}Vi.Ma="serverreachability",ls(qi,Gs),Vi.STAT_EVENT="statevent",ls(Ki,Gs),Vi.Na="timingevent",ls(Hi,Gs);var Wi={NO_ERROR:0,lb:1,yb:2,xb:3,sb:4,wb:5,zb:6,Ja:7,TIMEOUT:8,Cb:9},Qi={qb:"complete",Mb:"success",Ka:"error",Ja:"abort",Eb:"ready",Fb:"readystatechange",TIMEOUT:"timeout",Ab:"incrementaldata",Db:"progress",tb:"downloadprogress",Ub:"uploadprogress"};function Xi(){}function Ji(e){return e.h||(e.h=e.i())}function Yi(){}Xi.prototype.h=null;var Zi,er={OPEN:"a",pb:"b",Ka:"c",Bb:"d"};function tr(){Gs.call(this,"d")}function nr(){Gs.call(this,"c")}function sr(){}function ir(e,t,n,s){this.l=e,this.j=t,this.m=n,this.X=s||1,this.V=new Li(this),this.P=or,e=Ms?125:void 0,this.W=new Ai(e),this.H=null,this.i=!1,this.s=this.A=this.v=this.K=this.F=this.Y=this.B=null,this.D=[],this.g=null,this.C=0,this.o=this.u=null,this.N=-1,this.I=!1,this.O=0,this.L=null,this.aa=this.J=this.$=this.U=!1,this.h=new rr}function rr(){this.i=null,this.g="",this.h=!1}ls(tr,Gs),ls(nr,Gs),ls(sr,Xi),sr.prototype.g=function(){return new XMLHttpRequest},sr.prototype.i=function(){return{}},Zi=new sr;var or=45e3,ar={},cr={};function ur(e,t,n){e.K=1,e.v=Or(Cr(t)),e.s=n,e.U=!0,hr(e,null)}function hr(e,t){e.F=Date.now(),pr(e),e.A=Cr(e.v);var n=e.A,s=e.X;Array.isArray(s)||(s=[String(s)]),$r(n.h,"t",s),e.C=0,n=e.l.H,e.h=new rr,e.g=Ho(e.l,n?t:null,!e.s),0<e.O&&(e.L=new Oi(us(e.Ia,e,e.g),e.O)),Mi(e.V,e.g,"readystatechange",e.gb),t=e.H?Cs(e.H):{},e.s?(e.u||(e.u="POST"),t["Content-Type"]="application/x-www-form-urlencoded",e.g.ea(e.A,e.u,e.s,t)):(e.u="GET",e.g.ea(e.A,e.u,null,t)),zi(1),function(e,t,n,s,i,r){e.info((function(){if(e.g)if(r)for(var o="",a=r.split("&"),c=0;c<a.length;c++){var u=a[c].split("=");if(1<u.length){var h=u[0];u=u[1];var l=h.split("_");o=2<=l.length&&"type"==l[1]?o+(h+"=")+u+"&":o+(h+"=redacted&")}}else o=null;else o=r;return"XMLHTTP REQ ("+s+") [attempt "+i+"]: "+t+"\n"+n+"\n"+o}))}(e.j,e.u,e.A,e.m,e.X,e.s)}function lr(e){return!!e.g&&"GET"==e.u&&2!=e.K&&e.l.Ba}function dr(e,t,n){let s,i=!0;for(;!e.I&&e.C<n.length;){if(s=fr(e,n),s==cr){4==t&&(e.o=4,$i(14),i=!1),Fi(e.j,e.m,null,"[Incomplete Response]");break}if(s==ar){e.o=4,$i(15),Fi(e.j,e.m,n,"[Invalid Chunk]"),i=!1;break}Fi(e.j,e.m,s,null),wr(e,s)}lr(e)&&s!=cr&&s!=ar&&(e.h.g="",e.C=0),4!=t||0!=n.length||e.h.h||(e.o=1,$i(16),i=!1),e.i=e.i&&i,i?0<n.length&&!e.aa&&(e.aa=!0,(t=e.l).g==e&&t.$&&!t.L&&(t.h.info("Great, no buffering proxy detected. Bytes received: "+n.length),Fo(t),t.L=!0,$i(11))):(Fi(e.j,e.m,n,"[Invalid Chunked Response]"),vr(e),yr(e))}function fr(e,t){var n=e.C,s=t.indexOf("\n",n);return-1==s?cr:(n=Number(t.substring(n,s)),isNaN(n)?ar:(s+=1)+n>t.length?cr:(t=t.substr(s,n),e.C=s+n,t))}function pr(e){e.Y=Date.now()+e.P,mr(e,e.P)}function mr(e,t){if(null!=e.B)throw Error("WatchDog timer not null");e.B=Gi(us(e.eb,e),t)}function gr(e){e.B&&(ts.clearTimeout(e.B),e.B=null)}function yr(e){0==e.l.G||e.I||jo(e.l,e)}function vr(e){gr(e);var t=e.L;t&&"function"==typeof t.na&&t.na(),e.L=null,Ni(e.W),xi(e.V),e.g&&(t=e.g,e.g=null,t.abort(),t.na())}function wr(e,t){try{var n=e.l;if(0!=n.G&&(n.g==e||Jr(n.i,e)))if(n.I=e.N,!e.J&&Jr(n.i,e)&&3==n.G){try{var s=n.Ca.g.parse(t)}catch(e){s=null}if(Array.isArray(s)&&3==s.length){var i=s;if(0==i[0]){e:if(!n.u){if(n.g){if(!(n.g.F+3e3<e.F))break e;Bo(n),No(n)}Uo(n),$i(18)}}else n.ta=i[1],0<n.ta-n.U&&37500>i[2]&&n.N&&0==n.A&&!n.v&&(n.v=Gi(us(n.ab,n),6e3));if(1>=Xr(n.i)&&n.ka){try{n.ka()}catch(e){}n.ka=void 0}}else zo(n,11)}else if((e.J||n.g==e)&&Bo(n),!vs(t))for(i=n.Ca.g.parse(t),t=0;t<i.length;t++){let u=i[t];if(n.U=u[0],u=u[1],2==n.G)if("c"==u[0]){n.J=u[1],n.la=u[2];const t=u[3];null!=t&&(n.ma=t,n.h.info("VER="+n.ma));const i=u[4];null!=i&&(n.za=i,n.h.info("SVER="+n.za));const h=u[5];null!=h&&"number"==typeof h&&0<h&&(s=1.5*h,n.K=s,n.h.info("backChannelRequestTimeoutMs_="+s)),s=n;const l=e.g;if(l){const e=l.g?l.g.getResponseHeader("X-Client-Wire-Protocol"):null;if(e){var r=s.i;!r.g&&(Is(e,"spdy")||Is(e,"quic")||Is(e,"h2"))&&(r.j=r.l,r.g=new Set,r.h&&(Yr(r,r.h),r.h=null))}if(s.D){const e=l.g?l.g.getResponseHeader("X-HTTP-Session-Id"):null;e&&(s.sa=e,Rr(s.F,s.D,e))}}n.G=3,n.j&&n.j.xa(),n.$&&(n.O=Date.now()-e.F,n.h.info("Handshake RTT: "+n.O+"ms"));var o=e;if((s=n).oa=$o(s,s.H?s.la:null,s.W),o.J){Zr(s.i,o);var a=o,c=s.K;c&&a.setTimeout(c),a.B&&(gr(a),pr(a)),s.g=o}else xo(s);0<n.l.length&&Oo(n)}else"stop"!=u[0]&&"close"!=u[0]||zo(n,7);else 3==n.G&&("stop"==u[0]||"close"==u[0]?"stop"==u[0]?zo(n,7):Ao(n):"noop"!=u[0]&&n.j&&n.j.wa(u),n.A=0)}zi(4)}catch(e){}}function Er(e,t){if(e.forEach&&"function"==typeof e.forEach)e.forEach(t,void 0);else if(ss(e)||"string"==typeof e)ms(e,t,void 0);else{if(e.T&&"function"==typeof e.T)var n=e.T();else if(e.R&&"function"==typeof e.R)n=void 0;else if(ss(e)||"string"==typeof e){n=[];for(var s=e.length,i=0;i<s;i++)n.push(i)}else for(i in n=[],s=0,e)n[s++]=i;s=function(e){if(e.R&&"function"==typeof e.R)return e.R();if("string"==typeof e)return e.split("");if(ss(e)){for(var t=[],n=e.length,s=0;s<n;s++)t.push(e[s]);return t}for(s in t=[],n=0,e)t[n++]=e[s];return t}(e),i=s.length;for(var r=0;r<i;r++)t.call(void 0,s[r],n&&n[r],e)}}function Ir(e,t){this.h={},this.g=[],this.i=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var s=0;s<n;s+=2)this.set(arguments[s],arguments[s+1])}else if(e)if(e instanceof Ir)for(n=e.T(),s=0;s<n.length;s++)this.set(n[s],e.get(n[s]));else for(s in e)this.set(s,e[s])}function Tr(e){if(e.i!=e.g.length){for(var t=0,n=0;t<e.g.length;){var s=e.g[t];br(e.h,s)&&(e.g[n++]=s),t++}e.g.length=n}if(e.i!=e.g.length){var i={};for(n=t=0;t<e.g.length;)br(i,s=e.g[t])||(e.g[n++]=s,i[s]=1),t++;e.g.length=n}}function br(e,t){return Object.prototype.hasOwnProperty.call(e,t)}(Jn=ir.prototype).setTimeout=function(e){this.P=e},Jn.gb=function(e){e=e.target;const t=this.L;t&&3==bo(e)?t.l():this.Ia(e)},Jn.Ia=function(e){try{if(e==this.g)e:{const h=bo(this.g);var t=this.g.Da();const l=this.g.ba();if(!(3>h)&&(3!=h||Ms||this.g&&(this.h.h||this.g.ga()||_o(this.g)))){this.I||4!=h||7==t||zi(8==t||0>=l?3:2),gr(this);var n=this.g.ba();this.N=n;t:if(lr(this)){var s=_o(this.g);e="";var i=s.length,r=4==bo(this.g);if(!this.h.i){if("undefined"==typeof TextDecoder){vr(this),yr(this);var o="";break t}this.h.i=new ts.TextDecoder}for(t=0;t<i;t++)this.h.h=!0,e+=this.h.i.decode(s[t],{stream:r&&t==i-1});s.splice(0,i),this.h.g+=e,this.C=0,o=this.h.g}else o=this.g.ga();if(this.i=200==n,function(e,t,n,s,i,r,o){e.info((function(){return"XMLHTTP RESP ("+s+") [ attempt "+i+"]: "+t+"\n"+n+"\n"+r+" "+o}))}(this.j,this.u,this.A,this.m,this.X,h,n),this.i){if(this.$&&!this.J){t:{if(this.g){var a,c=this.g;if((a=c.g?c.g.getResponseHeader("X-HTTP-Initial-Response"):null)&&!vs(a)){var u=a;break t}}u=null}if(!(n=u)){this.i=!1,this.o=3,$i(12),vr(this),yr(this);break e}Fi(this.j,this.m,n,"Initial handshake response via X-HTTP-Initial-Response"),this.J=!0,wr(this,n)}this.U?(dr(this,h,o),Ms&&this.i&&3==h&&(Mi(this.V,this.W,"tick",this.fb),this.W.start())):(Fi(this.j,this.m,o,null),wr(this,o)),4==h&&vr(this),this.i&&!this.I&&(4==h?jo(this.l,this):(this.i=!1,pr(this)))}else 400==n&&0<o.indexOf("Unknown SID")?(this.o=3,$i(12)):(this.o=0,$i(13)),vr(this),yr(this)}}}catch(e){}},Jn.fb=function(){if(this.g){var e=bo(this.g),t=this.g.ga();this.C<t.length&&(gr(this),dr(this,e,t),this.i&&4!=e&&pr(this))}},Jn.cancel=function(){this.I=!0,vr(this)},Jn.eb=function(){this.B=null;const e=Date.now();0<=e-this.Y?(function(e,t){e.info((function(){return"TIMEOUT: "+t}))}(this.j,this.A),2!=this.K&&(zi(3),$i(17)),vr(this),this.o=2,yr(this)):mr(this,this.Y-e)},(Jn=Ir.prototype).R=function(){Tr(this);for(var e=[],t=0;t<this.g.length;t++)e.push(this.h[this.g[t]]);return e},Jn.T=function(){return Tr(this),this.g.concat()},Jn.get=function(e,t){return br(this.h,e)?this.h[e]:t},Jn.set=function(e,t){br(this.h,e)||(this.i++,this.g.push(e)),this.h[e]=t},Jn.forEach=function(e,t){for(var n=this.T(),s=0;s<n.length;s++){var i=n[s],r=this.get(i);e.call(t,r,i,this)}};var _r=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Sr(e,t){if(this.i=this.s=this.j="",this.m=null,this.o=this.l="",this.g=!1,e instanceof Sr){this.g=void 0!==t?t:e.g,kr(this,e.j),this.s=e.s,Ar(this,e.i),Nr(this,e.m),this.l=e.l,t=e.h;var n=new jr;n.i=t.i,t.g&&(n.g=new Ir(t.g),n.h=t.h),Dr(this,n),this.o=e.o}else e&&(n=String(e).match(_r))?(this.g=!!t,kr(this,n[1]||"",!0),this.s=Lr(n[2]||""),Ar(this,n[3]||"",!0),Nr(this,n[4]),this.l=Lr(n[5]||"",!0),Dr(this,n[6]||"",!0),this.o=Lr(n[7]||"")):(this.g=!!t,this.h=new jr(null,this.g))}function Cr(e){return new Sr(e)}function kr(e,t,n){e.j=n?Lr(t,!0):t,e.j&&(e.j=e.j.replace(/:$/,""))}function Ar(e,t,n){e.i=n?Lr(t,!0):t}function Nr(e,t){if(t){if(t=Number(t),isNaN(t)||0>t)throw Error("Bad port number "+t);e.m=t}else e.m=null}function Dr(e,t,n){t instanceof jr?(e.h=t,function(e,t){t&&!e.j&&(qr(e),e.i=null,e.g.forEach((function(e,t){var n=t.toLowerCase();t!=n&&(zr(this,t),$r(this,n,e))}),e)),e.j=t}(e.h,e.g)):(n||(t=Pr(t,Vr)),e.h=new jr(t,e.g))}function Rr(e,t,n){e.h.set(t,n)}function Or(e){return Rr(e,"zx",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^Date.now()).toString(36)),e}function Lr(e,t){return e?t?decodeURI(e.replace(/%25/g,"%2525")):decodeURIComponent(e):""}function Pr(e,t,n){return"string"==typeof e?(e=encodeURI(e).replace(t,Mr),n&&(e=e.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),e):null}function Mr(e){return"%"+((e=e.charCodeAt(0))>>4&15).toString(16)+(15&e).toString(16)}Sr.prototype.toString=function(){var e=[],t=this.j;t&&e.push(Pr(t,xr,!0),":");var n=this.i;return(n||"file"==t)&&(e.push("//"),(t=this.s)&&e.push(Pr(t,xr,!0),"@"),e.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.m)&&e.push(":",String(n))),(n=this.l)&&(this.i&&"/"!=n.charAt(0)&&e.push("/"),e.push(Pr(n,"/"==n.charAt(0)?Fr:Ur,!0))),(n=this.h.toString())&&e.push("?",n),(n=this.o)&&e.push("#",Pr(n,Br)),e.join("")};var xr=/[#\/\?@]/g,Ur=/[#\?:]/g,Fr=/[#\?]/g,Vr=/[#\?@]/g,Br=/#/g;function jr(e,t){this.h=this.g=null,this.i=e||null,this.j=!!t}function qr(e){e.g||(e.g=new Ir,e.h=0,e.i&&function(e,t){if(e){e=e.split("&");for(var n=0;n<e.length;n++){var s=e[n].indexOf("="),i=null;if(0<=s){var r=e[n].substring(0,s);i=e[n].substring(s+1)}else r=e[n];t(r,i?decodeURIComponent(i.replace(/\+/g," ")):"")}}}(e.i,(function(t,n){e.add(decodeURIComponent(t.replace(/\+/g," ")),n)})))}function zr(e,t){qr(e),t=Hr(e,t),br(e.g.h,t)&&(e.i=null,e.h-=e.g.get(t).length,br((e=e.g).h,t)&&(delete e.h[t],e.i--,e.g.length>2*e.i&&Tr(e)))}function Kr(e,t){return qr(e),t=Hr(e,t),br(e.g.h,t)}function $r(e,t,n){zr(e,t),0<n.length&&(e.i=null,e.g.set(Hr(e,t),ys(n)),e.h+=n.length)}function Hr(e,t){return t=String(t),e.j&&(t=t.toLowerCase()),t}function Gr(e){this.l=e||Wr,e=ts.PerformanceNavigationTiming?0<(e=ts.performance.getEntriesByType("navigation")).length&&("hq"==e[0].nextHopProtocol||"h2"==e[0].nextHopProtocol):!!(ts.g&&ts.g.Ea&&ts.g.Ea()&&ts.g.Ea().Zb),this.j=e?this.l:1,this.g=null,1<this.j&&(this.g=new Set),this.h=null,this.i=[]}(Jn=jr.prototype).add=function(e,t){qr(this),this.i=null,e=Hr(this,e);var n=this.g.get(e);return n||this.g.set(e,n=[]),n.push(t),this.h+=1,this},Jn.forEach=function(e,t){qr(this),this.g.forEach((function(n,s){ms(n,(function(n){e.call(t,n,s,this)}),this)}),this)},Jn.T=function(){qr(this);for(var e=this.g.R(),t=this.g.T(),n=[],s=0;s<t.length;s++)for(var i=e[s],r=0;r<i.length;r++)n.push(t[s]);return n},Jn.R=function(e){qr(this);var t=[];if("string"==typeof e)Kr(this,e)&&(t=gs(t,this.g.get(Hr(this,e))));else{e=this.g.R();for(var n=0;n<e.length;n++)t=gs(t,e[n])}return t},Jn.set=function(e,t){return qr(this),this.i=null,Kr(this,e=Hr(this,e))&&(this.h-=this.g.get(e).length),this.g.set(e,[t]),this.h+=1,this},Jn.get=function(e,t){return e&&0<(e=this.R(e)).length?String(e[0]):t},Jn.toString=function(){if(this.i)return this.i;if(!this.g)return"";for(var e=[],t=this.g.T(),n=0;n<t.length;n++){var s=t[n],i=encodeURIComponent(String(s));s=this.R(s);for(var r=0;r<s.length;r++){var o=i;""!==s[r]&&(o+="="+encodeURIComponent(String(s[r]))),e.push(o)}}return this.i=e.join("&")};var Wr=10;function Qr(e){return!!e.h||!!e.g&&e.g.size>=e.j}function Xr(e){return e.h?1:e.g?e.g.size:0}function Jr(e,t){return e.h?e.h==t:!!e.g&&e.g.has(t)}function Yr(e,t){e.g?e.g.add(t):e.h=t}function Zr(e,t){e.h&&e.h==t?e.h=null:e.g&&e.g.has(t)&&e.g.delete(t)}function eo(e){if(null!=e.h)return e.i.concat(e.h.D);if(null!=e.g&&0!==e.g.size){let t=e.i;for(const n of e.g.values())t=t.concat(n.D);return t}return ys(e.i)}function to(){}function no(){this.g=new to}function so(e,t,n){const s=n||"";try{Er(e,(function(e,n){let i=e;is(e)&&(i=vi(e)),t.push(s+n+"="+encodeURIComponent(i))}))}catch(e){throw t.push(s+"type="+encodeURIComponent("_badmap")),e}}function io(e,t,n,s,i){try{t.onload=null,t.onerror=null,t.onabort=null,t.ontimeout=null,i(s)}catch(e){}}function ro(e){this.l=e.$b||null,this.j=e.ib||!1}function oo(e,t){mi.call(this),this.D=e,this.u=t,this.m=void 0,this.readyState=ao,this.status=0,this.responseType=this.responseText=this.response=this.statusText="",this.onreadystatechange=null,this.v=new Headers,this.h=null,this.C="GET",this.B="",this.g=!1,this.A=this.j=this.l=null}Gr.prototype.cancel=function(){if(this.i=eo(this),this.h)this.h.cancel(),this.h=null;else if(this.g&&0!==this.g.size){for(const e of this.g.values())e.cancel();this.g.clear()}},to.prototype.stringify=function(e){return ts.JSON.stringify(e,void 0)},to.prototype.parse=function(e){return ts.JSON.parse(e,void 0)},ls(ro,Xi),ro.prototype.g=function(){return new oo(this.l,this.j)},ro.prototype.i=function(e){return function(){return e}}({}),ls(oo,mi);var ao=0;function co(e){e.j.read().then(e.Sa.bind(e)).catch(e.ha.bind(e))}function uo(e){e.readyState=4,e.l=null,e.j=null,e.A=null,ho(e)}function ho(e){e.onreadystatechange&&e.onreadystatechange.call(e)}(Jn=oo.prototype).open=function(e,t){if(this.readyState!=ao)throw this.abort(),Error("Error reopening a connection");this.C=e,this.B=t,this.readyState=1,ho(this)},Jn.send=function(e){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.g=!0;const t={headers:this.v,method:this.C,credentials:this.m,cache:void 0};e&&(t.body=e),(this.D||ts).fetch(new Request(this.B,t)).then(this.Va.bind(this),this.ha.bind(this))},Jn.abort=function(){this.response=this.responseText="",this.v=new Headers,this.status=0,this.j&&this.j.cancel("Request was aborted."),1<=this.readyState&&this.g&&4!=this.readyState&&(this.g=!1,uo(this)),this.readyState=ao},Jn.Va=function(e){if(this.g&&(this.l=e,this.h||(this.status=this.l.status,this.statusText=this.l.statusText,this.h=e.headers,this.readyState=2,ho(this)),this.g&&(this.readyState=3,ho(this),this.g)))if("arraybuffer"===this.responseType)e.arrayBuffer().then(this.Ta.bind(this),this.ha.bind(this));else if(void 0!==ts.ReadableStream&&"body"in e){if(this.j=e.body.getReader(),this.u){if(this.responseType)throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');this.response=[]}else this.response=this.responseText="",this.A=new TextDecoder;co(this)}else e.text().then(this.Ua.bind(this),this.ha.bind(this))},Jn.Sa=function(e){if(this.g){if(this.u&&e.value)this.response.push(e.value);else if(!this.u){var t=e.value?e.value:new Uint8Array(0);(t=this.A.decode(t,{stream:!e.done}))&&(this.response=this.responseText+=t)}e.done?uo(this):ho(this),3==this.readyState&&co(this)}},Jn.Ua=function(e){this.g&&(this.response=this.responseText=e,uo(this))},Jn.Ta=function(e){this.g&&(this.response=e,uo(this))},Jn.ha=function(){this.g&&uo(this)},Jn.setRequestHeader=function(e,t){this.v.append(e,t)},Jn.getResponseHeader=function(e){return this.h&&this.h.get(e.toLowerCase())||""},Jn.getAllResponseHeaders=function(){if(!this.h)return"";const e=[],t=this.h.entries();for(var n=t.next();!n.done;)n=n.value,e.push(n[0]+": "+n[1]),n=t.next();return e.join("\r\n")},Object.defineProperty(oo.prototype,"withCredentials",{get:function(){return"include"===this.m},set:function(e){this.m=e?"include":"same-origin"}});var lo=ts.JSON.parse;function fo(e){mi.call(this),this.headers=new Ir,this.u=e||null,this.h=!1,this.C=this.g=null,this.H="",this.m=0,this.j="",this.l=this.F=this.v=this.D=!1,this.B=0,this.A=null,this.J=po,this.K=this.L=!1}ls(fo,mi);var po="",mo=/^https?$/i,go=["POST","PUT"];function yo(e){return"content-type"==e.toLowerCase()}function vo(e,t){e.h=!1,e.g&&(e.l=!0,e.g.abort(),e.l=!1),e.j=t,e.m=5,wo(e),Io(e)}function wo(e){e.D||(e.D=!0,gi(e,"complete"),gi(e,"error"))}function Eo(e){if(e.h&&void 0!==es&&(!e.C[1]||4!=bo(e)||2!=e.ba()))if(e.v&&4==bo(e))Di(e.Fa,0,e);else if(gi(e,"readystatechange"),4==bo(e)){e.h=!1;try{const a=e.ba();e:switch(a){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var t=!0;break e;default:t=!1}var n;if(!(n=t)){var s;if(s=0===a){var i=String(e.H).match(_r)[1]||null;if(!i&&ts.self&&ts.self.location){var r=ts.self.location.protocol;i=r.substr(0,r.length-1)}s=!mo.test(i?i.toLowerCase():"")}n=s}if(n)gi(e,"complete"),gi(e,"success");else{e.m=6;try{var o=2<bo(e)?e.g.statusText:""}catch(e){o=""}e.j=o+" ["+e.ba()+"]",wo(e)}}finally{Io(e)}}}function Io(e,t){if(e.g){To(e);const n=e.g,s=e.C[0]?ns:null;e.g=null,e.C=null,t||gi(e,"ready");try{n.onreadystatechange=s}catch(e){}}}function To(e){e.g&&e.K&&(e.g.ontimeout=null),e.A&&(ts.clearTimeout(e.A),e.A=null)}function bo(e){return e.g?e.g.readyState:0}function _o(e){try{if(!e.g)return null;if("response"in e.g)return e.g.response;switch(e.J){case po:case"text":return e.g.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in e.g)return e.g.mozResponseArrayBuffer}return null}catch(e){return null}}function So(e,t,n){e:{for(s in n){var s=!1;break e}s=!0}s||(n=function(e){let t="";return Ss(e,(function(e,n){t+=n,t+=":",t+=e,t+="\r\n"})),t}(n),"string"==typeof e?null!=n&&encodeURIComponent(String(n)):Rr(e,t,n))}function Co(e,t,n){return n&&n.internalChannelParams&&n.internalChannelParams[e]||t}function ko(e){this.za=0,this.l=[],this.h=new Ui,this.la=this.oa=this.F=this.W=this.g=this.sa=this.D=this.aa=this.o=this.P=this.s=null,this.Za=this.V=0,this.Xa=Co("failFast",!1,e),this.N=this.v=this.u=this.m=this.j=null,this.X=!0,this.I=this.ta=this.U=-1,this.Y=this.A=this.C=0,this.Pa=Co("baseRetryDelayMs",5e3,e),this.$a=Co("retryDelaySeedMs",1e4,e),this.Ya=Co("forwardChannelMaxRetries",2,e),this.ra=Co("forwardChannelRequestTimeoutMs",2e4,e),this.qa=e&&e.xmlHttpFactory||void 0,this.Ba=e&&e.Yb||!1,this.K=void 0,this.H=e&&e.supportsCrossDomainXhr||!1,this.J="",this.i=new Gr(e&&e.concurrentRequestLimit),this.Ca=new no,this.ja=e&&e.fastHandshake||!1,this.Ra=e&&e.Wb||!1,e&&e.Aa&&this.h.Aa(),e&&e.forceLongPolling&&(this.X=!1),this.$=!this.ja&&this.X&&e&&e.detectBufferingProxy||!1,this.ka=void 0,this.O=0,this.L=!1,this.B=null,this.Wa=!e||!1!==e.Xb}function Ao(e){if(Do(e),3==e.G){var t=e.V++,n=Cr(e.F);Rr(n,"SID",e.J),Rr(n,"RID",t),Rr(n,"TYPE","terminate"),Po(e,n),(t=new ir(e,e.h,t,void 0)).K=2,t.v=Or(Cr(n)),n=!1,ts.navigator&&ts.navigator.sendBeacon&&(n=ts.navigator.sendBeacon(t.v.toString(),"")),!n&&ts.Image&&((new Image).src=t.v,n=!0),n||(t.g=Ho(t.l,null),t.g.ea(t.v)),t.F=Date.now(),pr(t)}Ko(e)}function No(e){e.g&&(Fo(e),e.g.cancel(),e.g=null)}function Do(e){No(e),e.u&&(ts.clearTimeout(e.u),e.u=null),Bo(e),e.i.cancel(),e.m&&("number"==typeof e.m&&ts.clearTimeout(e.m),e.m=null)}function Ro(e,t){e.l.push(new class{constructor(e,t){this.h=e,this.g=t}}(e.Za++,t)),3==e.G&&Oo(e)}function Oo(e){Qr(e.i)||e.m||(e.m=!0,_i(e.Ha,e),e.C=0)}function Lo(e,t){var n;n=t?t.m:e.V++;const s=Cr(e.F);Rr(s,"SID",e.J),Rr(s,"RID",n),Rr(s,"AID",e.U),Po(e,s),e.o&&e.s&&So(s,e.o,e.s),n=new ir(e,e.h,n,e.C+1),null===e.o&&(n.H=e.s),t&&(e.l=t.D.concat(e.l)),t=Mo(e,n,1e3),n.setTimeout(Math.round(.5*e.ra)+Math.round(.5*e.ra*Math.random())),Yr(e.i,n),ur(n,s,t)}function Po(e,t){e.j&&Er({},(function(e,n){Rr(t,n,e)}))}function Mo(e,t,n){n=Math.min(e.l.length,n);var s=e.j?us(e.j.Oa,e.j,e):null;e:{var i=e.l;let t=-1;for(;;){const e=["count="+n];-1==t?0<n?(t=i[0].h,e.push("ofs="+t)):t=0:e.push("ofs="+t);let r=!0;for(let o=0;o<n;o++){let n=i[o].h;const a=i[o].g;if(n-=t,0>n)t=Math.max(0,i[o].h-100),r=!1;else try{so(a,e,"req"+n+"_")}catch(e){s&&s(a)}}if(r){s=e.join("&");break e}}}return e=e.l.splice(0,n),t.D=e,s}function xo(e){e.g||e.u||(e.Y=1,_i(e.Ga,e),e.A=0)}function Uo(e){return!(e.g||e.u||3<=e.A||(e.Y++,e.u=Gi(us(e.Ga,e),qo(e,e.A)),e.A++,0))}function Fo(e){null!=e.B&&(ts.clearTimeout(e.B),e.B=null)}function Vo(e){e.g=new ir(e,e.h,"rpc",e.Y),null===e.o&&(e.g.H=e.s),e.g.O=0;var t=Cr(e.oa);Rr(t,"RID","rpc"),Rr(t,"SID",e.J),Rr(t,"CI",e.N?"0":"1"),Rr(t,"AID",e.U),Po(e,t),Rr(t,"TYPE","xmlhttp"),e.o&&e.s&&So(t,e.o,e.s),e.K&&e.g.setTimeout(e.K);var n=e.g;e=e.la,n.K=1,n.v=Or(Cr(t)),n.s=null,n.U=!0,hr(n,e)}function Bo(e){null!=e.v&&(ts.clearTimeout(e.v),e.v=null)}function jo(e,t){var n=null;if(e.g==t){Bo(e),Fo(e),e.g=null;var s=2}else{if(!Jr(e.i,t))return;n=t.D,Zr(e.i,t),s=1}if(e.I=t.N,0!=e.G)if(t.i)if(1==s){n=t.s?t.s.length:0,t=Date.now()-t.F;var i=e.C;gi(s=ji(),new Hi(s,n,t,i)),Oo(e)}else xo(e);else if(3==(i=t.o)||0==i&&0<e.I||!(1==s&&function(e,t){return!(Xr(e.i)>=e.i.j-(e.m?1:0)||(e.m?(e.l=t.D.concat(e.l),0):1==e.G||2==e.G||e.C>=(e.Xa?0:e.Ya)||(e.m=Gi(us(e.Ha,e,t),qo(e,e.C)),e.C++,0)))}(e,t)||2==s&&Uo(e)))switch(n&&0<n.length&&(t=e.i,t.i=t.i.concat(n)),i){case 1:zo(e,5);break;case 4:zo(e,10);break;case 3:zo(e,6);break;default:zo(e,2)}}function qo(e,t){let n=e.Pa+Math.floor(Math.random()*e.$a);return e.j||(n*=2),n*t}function zo(e,t){if(e.h.info("Error code "+t),2==t){var n=null;e.j&&(n=null);var s=us(e.jb,e);n||(n=new Sr("//www.google.com/images/cleardot.gif"),ts.location&&"http"==ts.location.protocol||kr(n,"https"),Or(n)),function(e,t){const n=new Ui;if(ts.Image){const s=new Image;s.onload=hs(io,n,s,"TestLoadImage: loaded",!0,t),s.onerror=hs(io,n,s,"TestLoadImage: error",!1,t),s.onabort=hs(io,n,s,"TestLoadImage: abort",!1,t),s.ontimeout=hs(io,n,s,"TestLoadImage: timeout",!1,t),ts.setTimeout((function(){s.ontimeout&&s.ontimeout()}),1e4),s.src=e}else t(!1)}(n.toString(),s)}else $i(2);e.G=0,e.j&&e.j.va(t),Ko(e),Do(e)}function Ko(e){e.G=0,e.I=-1,e.j&&(0==eo(e.i).length&&0==e.l.length||(e.i.i.length=0,ys(e.l),e.l.length=0),e.j.ua())}function $o(e,t,n){let s=function(e){return e instanceof Sr?Cr(e):new Sr(e,void 0)}(n);if(""!=s.i)t&&Ar(s,t+"."+s.i),Nr(s,s.m);else{const e=ts.location;s=function(e,t,n,s){var i=new Sr(null,void 0);return e&&kr(i,e),t&&Ar(i,t),n&&Nr(i,n),s&&(i.l=s),i}(e.protocol,t?t+"."+e.hostname:e.hostname,+e.port,n)}return e.aa&&Ss(e.aa,(function(e,t){Rr(s,t,e)})),t=e.D,n=e.sa,t&&n&&Rr(s,t,n),Rr(s,"VER",e.ma),Po(e,s),s}function Ho(e,t,n){if(t&&!e.H)throw Error("Can't create secondary domain capable XhrIo object.");return(t=n&&e.Ba&&!e.qa?new fo(new ro({ib:!0})):new fo(e.qa)).L=e.H,t}function Go(){}function Wo(){if(Ls&&!(10<=Number($s)))throw Error("Environmental error: no available transport.")}function Qo(e,t){mi.call(this),this.g=new ko(t),this.l=e,this.h=t&&t.messageUrlParams||null,e=t&&t.messageHeaders||null,t&&t.clientProtocolHeaderRequired&&(e?e["X-Client-Protocol"]="webchannel":e={"X-Client-Protocol":"webchannel"}),this.g.s=e,e=t&&t.initMessageHeaders||null,t&&t.messageContentType&&(e?e["X-WebChannel-Content-Type"]=t.messageContentType:e={"X-WebChannel-Content-Type":t.messageContentType}),t&&t.ya&&(e?e["X-WebChannel-Client-Profile"]=t.ya:e={"X-WebChannel-Client-Profile":t.ya}),this.g.P=e,(e=t&&t.httpHeadersOverwriteParam)&&!vs(e)&&(this.g.o=e),this.A=t&&t.supportsCrossDomainXhr||!1,this.v=t&&t.sendRawJson||!1,(t=t&&t.httpSessionIdParam)&&!vs(t)&&(this.g.D=t,null!==(e=this.h)&&t in e&&t in(e=this.h)&&delete e[t]),this.j=new Yo(this)}function Xo(e){tr.call(this);var t=e.__sm__;if(t){e:{for(const n in t){e=n;break e}e=void 0}(this.i=e)&&(e=this.i,t=null!==t&&e in t?t[e]:void 0),this.data=t}else this.data=e}function Jo(){nr.call(this),this.status=1}function Yo(e){this.g=e}(Jn=fo.prototype).ea=function(e,t,n,s){if(this.g)throw Error("[goog.net.XhrIo] Object is active with another request="+this.H+"; newUri="+e);t=t?t.toUpperCase():"GET",this.H=e,this.j="",this.m=0,this.D=!1,this.h=!0,this.g=this.u?this.u.g():Zi.g(),this.C=this.u?Ji(this.u):Ji(Zi),this.g.onreadystatechange=us(this.Fa,this);try{this.F=!0,this.g.open(t,String(e),!0),this.F=!1}catch(e){return void vo(this,e)}e=n||"";const i=new Ir(this.headers);s&&Er(s,(function(e,t){i.set(t,e)})),s=function(e){e:{var t=yo;const n=e.length,s="string"==typeof e?e.split(""):e;for(let i=0;i<n;i++)if(i in s&&t.call(void 0,s[i],i,e)){t=i;break e}t=-1}return 0>t?null:"string"==typeof e?e.charAt(t):e[t]}(i.T()),n=ts.FormData&&e instanceof ts.FormData,!(0<=ps(go,t))||s||n||i.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),i.forEach((function(e,t){this.g.setRequestHeader(t,e)}),this),this.J&&(this.g.responseType=this.J),"withCredentials"in this.g&&this.g.withCredentials!==this.L&&(this.g.withCredentials=this.L);try{To(this),0<this.B&&((this.K=function(e){return Ls&&Ks()&&"number"==typeof e.timeout&&void 0!==e.ontimeout}(this.g))?(this.g.timeout=this.B,this.g.ontimeout=us(this.pa,this)):this.A=Di(this.pa,this.B,this)),this.v=!0,this.g.send(e),this.v=!1}catch(e){vo(this,e)}},Jn.pa=function(){void 0!==es&&this.g&&(this.j="Timed out after "+this.B+"ms, aborting",this.m=8,gi(this,"timeout"),this.abort(8))},Jn.abort=function(e){this.g&&this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1,this.m=e||7,gi(this,"complete"),gi(this,"abort"),Io(this))},Jn.M=function(){this.g&&(this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1),Io(this,!0)),fo.Z.M.call(this)},Jn.Fa=function(){this.s||(this.F||this.v||this.l?Eo(this):this.cb())},Jn.cb=function(){Eo(this)},Jn.ba=function(){try{return 2<bo(this)?this.g.status:-1}catch(e){return-1}},Jn.ga=function(){try{return this.g?this.g.responseText:""}catch(e){return""}},Jn.Qa=function(e){if(this.g){var t=this.g.responseText;return e&&0==t.indexOf(e)&&(t=t.substring(e.length)),lo(t)}},Jn.Da=function(){return this.m},Jn.La=function(){return"string"==typeof this.j?this.j:String(this.j)},(Jn=ko.prototype).ma=8,Jn.G=1,Jn.hb=function(e){try{this.h.info("Origin Trials invoked: "+e)}catch(e){}},Jn.Ha=function(e){if(this.m)if(this.m=null,1==this.G){if(!e){this.V=Math.floor(1e5*Math.random()),e=this.V++;const i=new ir(this,this.h,e,void 0);let r=this.s;if(this.P&&(r?(r=Cs(r),As(r,this.P)):r=this.P),null===this.o&&(i.H=r),this.ja)e:{for(var t=0,n=0;n<this.l.length;n++){var s=this.l[n];if(void 0===(s="__data__"in s.g&&"string"==typeof(s=s.g.__data__)?s.length:void 0))break;if(4096<(t+=s)){t=n;break e}if(4096===t||n===this.l.length-1){t=n+1;break e}}t=1e3}else t=1e3;t=Mo(this,i,t),Rr(n=Cr(this.F),"RID",e),Rr(n,"CVER",22),this.D&&Rr(n,"X-HTTP-Session-Id",this.D),Po(this,n),this.o&&r&&So(n,this.o,r),Yr(this.i,i),this.Ra&&Rr(n,"TYPE","init"),this.ja?(Rr(n,"$req",t),Rr(n,"SID","null"),i.$=!0,ur(i,n,null)):ur(i,n,t),this.G=2}}else 3==this.G&&(e?Lo(this,e):0==this.l.length||Qr(this.i)||Lo(this))},Jn.Ga=function(){if(this.u=null,Vo(this),this.$&&!(this.L||null==this.g||0>=this.O)){var e=2*this.O;this.h.info("BP detection timer enabled: "+e),this.B=Gi(us(this.bb,this),e)}},Jn.bb=function(){this.B&&(this.B=null,this.h.info("BP detection timeout reached."),this.h.info("Buffering proxy detected and switch to long-polling!"),this.N=!1,this.L=!0,$i(10),No(this),Vo(this))},Jn.ab=function(){null!=this.v&&(this.v=null,No(this),Uo(this),$i(19))},Jn.jb=function(e){e?(this.h.info("Successfully pinged google.com"),$i(2)):(this.h.info("Failed to ping google.com"),$i(1))},(Jn=Go.prototype).xa=function(){},Jn.wa=function(){},Jn.va=function(){},Jn.ua=function(){},Jn.Oa=function(){},Wo.prototype.g=function(e,t){return new Qo(e,t)},ls(Qo,mi),Qo.prototype.m=function(){this.g.j=this.j,this.A&&(this.g.H=!0);var e=this.g,t=this.l,n=this.h||void 0;e.Wa&&(e.h.info("Origin Trials enabled."),_i(us(e.hb,e,t))),$i(0),e.W=t,e.aa=n||{},e.N=e.X,e.F=$o(e,null,e.W),Oo(e)},Qo.prototype.close=function(){Ao(this.g)},Qo.prototype.u=function(e){if("string"==typeof e){var t={};t.__data__=e,Ro(this.g,t)}else this.v?((t={}).__data__=vi(e),Ro(this.g,t)):Ro(this.g,e)},Qo.prototype.M=function(){this.g.j=null,delete this.j,Ao(this.g),delete this.g,Qo.Z.M.call(this)},ls(Xo,tr),ls(Jo,nr),ls(Yo,Go),Yo.prototype.xa=function(){gi(this.g,"a")},Yo.prototype.wa=function(e){gi(this.g,new Xo(e))},Yo.prototype.va=function(e){gi(this.g,new Jo(e))},Yo.prototype.ua=function(){gi(this.g,"b")},Wo.prototype.createWebChannel=Wo.prototype.g,Qo.prototype.send=Qo.prototype.u,Qo.prototype.open=Qo.prototype.m,Qo.prototype.close=Qo.prototype.close,Wi.NO_ERROR=0,Wi.TIMEOUT=8,Wi.HTTP_ERROR=6,Qi.COMPLETE="complete",Yi.EventType=er,er.OPEN="a",er.CLOSE="b",er.ERROR="c",er.MESSAGE="d",mi.prototype.listen=mi.prototype.N,fo.prototype.listenOnce=fo.prototype.O,fo.prototype.getLastError=fo.prototype.La,fo.prototype.getLastErrorCode=fo.prototype.Da,fo.prototype.getStatus=fo.prototype.ba,fo.prototype.getResponseJson=fo.prototype.Qa,fo.prototype.getResponseText=fo.prototype.ga,fo.prototype.send=fo.prototype.ea;var Zo=Zn.createWebChannelTransport=function(){return new Wo},ea=Zn.getStatEventTarget=function(){return ji()},ta=Zn.ErrorCode=Wi,na=Zn.EventType=Qi,sa=Zn.Event=Vi,ia=Zn.Stat={rb:0,ub:1,vb:2,Ob:3,Tb:4,Qb:5,Rb:6,Pb:7,Nb:8,Sb:9,PROXY:10,NOPROXY:11,Lb:12,Hb:13,Ib:14,Gb:15,Jb:16,Kb:17,nb:18,mb:19,ob:20},ra=Zn.FetchXmlHttpFactory=ro,oa=Zn.WebChannel=Yi,aa=Zn.XhrIo=fo;const ca="@firebase/firestore";class ua{constructor(e){this.uid=e}isAuthenticated(){return null!=this.uid}toKey(){return this.isAuthenticated()?"uid:"+this.uid:"anonymous-user"}isEqual(e){return e.uid===this.uid}}ua.UNAUTHENTICATED=new ua(null),ua.GOOGLE_CREDENTIALS=new ua("google-credentials-uid"),ua.FIRST_PARTY=new ua("first-party-uid"),ua.MOCK_USER=new ua("mock-user");let ha="9.9.0";const la=new x("@firebase/firestore");function da(){return la.logLevel}function fa(e,...t){if(la.logLevel<=D.DEBUG){const n=t.map(ga);la.debug(`Firestore (${ha}): ${e}`,...n)}}function pa(e,...t){if(la.logLevel<=D.ERROR){const n=t.map(ga);la.error(`Firestore (${ha}): ${e}`,...n)}}function ma(e,...t){if(la.logLevel<=D.WARN){const n=t.map(ga);la.warn(`Firestore (${ha}): ${e}`,...n)}}function ga(e){if("string"==typeof e)return e;try{return t=e,JSON.stringify(t)}catch(t){return e}var t}function ya(e="Unexpected state"){const t=`FIRESTORE (${ha}) INTERNAL ASSERTION FAILED: `+e;throw pa(t),new Error(t)}function va(e,t){e||ya()}function wa(e,t){return e}const Ea={OK:"ok",CANCELLED:"cancelled",UNKNOWN:"unknown",INVALID_ARGUMENT:"invalid-argument",DEADLINE_EXCEEDED:"deadline-exceeded",NOT_FOUND:"not-found",ALREADY_EXISTS:"already-exists",PERMISSION_DENIED:"permission-denied",UNAUTHENTICATED:"unauthenticated",RESOURCE_EXHAUSTED:"resource-exhausted",FAILED_PRECONDITION:"failed-precondition",ABORTED:"aborted",OUT_OF_RANGE:"out-of-range",UNIMPLEMENTED:"unimplemented",INTERNAL:"internal",UNAVAILABLE:"unavailable",DATA_LOSS:"data-loss"};class Ia extends p{constructor(e,t){super(e,t),this.code=e,this.message=t,this.toString=()=>`${this.name}: [code=${this.code}]: ${this.message}`}}class Ta{constructor(){this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}}class ba{constructor(e,t){this.user=t,this.type="OAuth",this.headers=new Map,this.headers.set("Authorization",`Bearer ${e}`)}}class _a{getToken(){return Promise.resolve(null)}invalidateToken(){}start(e,t){e.enqueueRetryable((()=>t(ua.UNAUTHENTICATED)))}shutdown(){}}class Sa{constructor(e){this.t=e,this.currentUser=ua.UNAUTHENTICATED,this.i=0,this.forceRefresh=!1,this.auth=null}start(e,t){let n=this.i;const s=e=>this.i!==n?(n=this.i,t(e)):Promise.resolve();let i=new Ta;this.o=()=>{this.i++,this.currentUser=this.u(),i.resolve(),i=new Ta,e.enqueueRetryable((()=>s(this.currentUser)))};const r=()=>{const t=i;e.enqueueRetryable((async()=>{await t.promise,await s(this.currentUser)}))},o=e=>{fa("FirebaseAuthCredentialsProvider","Auth detected"),this.auth=e,this.auth.addAuthTokenListener(this.o),r()};this.t.onInit((e=>o(e))),setTimeout((()=>{if(!this.auth){const e=this.t.getImmediate({optional:!0});e?o(e):(fa("FirebaseAuthCredentialsProvider","Auth not yet detected"),i.resolve(),i=new Ta)}}),0),r()}getToken(){const e=this.i,t=this.forceRefresh;return this.forceRefresh=!1,this.auth?this.auth.getToken(t).then((t=>this.i!==e?(fa("FirebaseAuthCredentialsProvider","getToken aborted due to token change."),this.getToken()):t?(va("string"==typeof t.accessToken),new ba(t.accessToken,this.currentUser)):null)):Promise.resolve(null)}invalidateToken(){this.forceRefresh=!0}shutdown(){this.auth&&this.auth.removeAuthTokenListener(this.o)}u(){const e=this.auth&&this.auth.getUid();return va(null===e||"string"==typeof e),new ua(e)}}class Ca{constructor(e,t,n){this.type="FirstParty",this.user=ua.FIRST_PARTY,this.headers=new Map,this.headers.set("X-Goog-AuthUser",t);const s=e.auth.getAuthHeaderValueForFirstParty([]);s&&this.headers.set("Authorization",s),n&&this.headers.set("X-Goog-Iam-Authorization-Token",n)}}class ka{constructor(e,t,n){this.h=e,this.l=t,this.m=n}getToken(){return Promise.resolve(new Ca(this.h,this.l,this.m))}start(e,t){e.enqueueRetryable((()=>t(ua.FIRST_PARTY)))}shutdown(){}invalidateToken(){}}class Aa{constructor(e){this.value=e,this.type="AppCheck",this.headers=new Map,e&&e.length>0&&this.headers.set("x-firebase-appcheck",this.value)}}class Na{constructor(e){this.g=e,this.forceRefresh=!1,this.appCheck=null,this.p=null}start(e,t){const n=e=>{null!=e.error&&fa("FirebaseAppCheckTokenProvider",`Error getting App Check token; using placeholder token instead. Error: ${e.error.message}`);const n=e.token!==this.p;return this.p=e.token,fa("FirebaseAppCheckTokenProvider",`Received ${n?"new":"existing"} token.`),n?t(e.token):Promise.resolve()};this.o=t=>{e.enqueueRetryable((()=>n(t)))};const s=e=>{fa("FirebaseAppCheckTokenProvider","AppCheck detected"),this.appCheck=e,this.appCheck.addTokenListener(this.o)};this.g.onInit((e=>s(e))),setTimeout((()=>{if(!this.appCheck){const e=this.g.getImmediate({optional:!0});e?s(e):fa("FirebaseAppCheckTokenProvider","AppCheck not yet detected")}}),0)}getToken(){const e=this.forceRefresh;return this.forceRefresh=!1,this.appCheck?this.appCheck.getToken(e).then((e=>e?(va("string"==typeof e.token),this.p=e.token,new Aa(e.token)):null)):Promise.resolve(null)}invalidateToken(){this.forceRefresh=!0}shutdown(){this.appCheck&&this.appCheck.removeTokenListener(this.o)}}function Da(e){const t="undefined"!=typeof self&&(self.crypto||self.msCrypto),n=new Uint8Array(e);if(t&&"function"==typeof t.getRandomValues)t.getRandomValues(n);else for(let t=0;t<e;t++)n[t]=Math.floor(256*Math.random());return n}class Ra{static I(){const e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",t=Math.floor(256/e.length)*e.length;let n="";for(;n.length<20;){const s=Da(40);for(let i=0;i<s.length;++i)n.length<20&&s[i]<t&&(n+=e.charAt(s[i]%e.length))}return n}}function Oa(e,t){return e<t?-1:e>t?1:0}function La(e,t,n){return e.length===t.length&&e.every(((e,s)=>n(e,t[s])))}class Pa{constructor(e,t){if(this.seconds=e,this.nanoseconds=t,t<0)throw new Ia(Ea.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+t);if(t>=1e9)throw new Ia(Ea.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+t);if(e<-62135596800)throw new Ia(Ea.INVALID_ARGUMENT,"Timestamp seconds out of range: "+e);if(e>=253402300800)throw new Ia(Ea.INVALID_ARGUMENT,"Timestamp seconds out of range: "+e)}static now(){return Pa.fromMillis(Date.now())}static fromDate(e){return Pa.fromMillis(e.getTime())}static fromMillis(e){const t=Math.floor(e/1e3),n=Math.floor(1e6*(e-1e3*t));return new Pa(t,n)}toDate(){return new Date(this.toMillis())}toMillis(){return 1e3*this.seconds+this.nanoseconds/1e6}_compareTo(e){return this.seconds===e.seconds?Oa(this.nanoseconds,e.nanoseconds):Oa(this.seconds,e.seconds)}isEqual(e){return e.seconds===this.seconds&&e.nanoseconds===this.nanoseconds}toString(){return"Timestamp(seconds="+this.seconds+", nanoseconds="+this.nanoseconds+")"}toJSON(){return{seconds:this.seconds,nanoseconds:this.nanoseconds}}valueOf(){const e=this.seconds- -62135596800;return String(e).padStart(12,"0")+"."+String(this.nanoseconds).padStart(9,"0")}}class Ma{constructor(e){this.timestamp=e}static fromTimestamp(e){return new Ma(e)}static min(){return new Ma(new Pa(0,0))}static max(){return new Ma(new Pa(253402300799,999999999))}compareTo(e){return this.timestamp._compareTo(e.timestamp)}isEqual(e){return this.timestamp.isEqual(e.timestamp)}toMicroseconds(){return 1e6*this.timestamp.seconds+this.timestamp.nanoseconds/1e3}toString(){return"SnapshotVersion("+this.timestamp.toString()+")"}toTimestamp(){return this.timestamp}}class xa{constructor(e,t,n){void 0===t?t=0:t>e.length&&ya(),void 0===n?n=e.length-t:n>e.length-t&&ya(),this.segments=e,this.offset=t,this.len=n}get length(){return this.len}isEqual(e){return 0===xa.comparator(this,e)}child(e){const t=this.segments.slice(this.offset,this.limit());return e instanceof xa?e.forEach((e=>{t.push(e)})):t.push(e),this.construct(t)}limit(){return this.offset+this.length}popFirst(e){return e=void 0===e?1:e,this.construct(this.segments,this.offset+e,this.length-e)}popLast(){return this.construct(this.segments,this.offset,this.length-1)}firstSegment(){return this.segments[this.offset]}lastSegment(){return this.get(this.length-1)}get(e){return this.segments[this.offset+e]}isEmpty(){return 0===this.length}isPrefixOf(e){if(e.length<this.length)return!1;for(let t=0;t<this.length;t++)if(this.get(t)!==e.get(t))return!1;return!0}isImmediateParentOf(e){if(this.length+1!==e.length)return!1;for(let t=0;t<this.length;t++)if(this.get(t)!==e.get(t))return!1;return!0}forEach(e){for(let t=this.offset,n=this.limit();t<n;t++)e(this.segments[t])}toArray(){return this.segments.slice(this.offset,this.limit())}static comparator(e,t){const n=Math.min(e.length,t.length);for(let s=0;s<n;s++){const n=e.get(s),i=t.get(s);if(n<i)return-1;if(n>i)return 1}return e.length<t.length?-1:e.length>t.length?1:0}}class Ua extends xa{construct(e,t,n){return new Ua(e,t,n)}canonicalString(){return this.toArray().join("/")}toString(){return this.canonicalString()}static fromString(...e){const t=[];for(const n of e){if(n.indexOf("//")>=0)throw new Ia(Ea.INVALID_ARGUMENT,`Invalid segment (${n}). Paths must not contain // in them.`);t.push(...n.split("/").filter((e=>e.length>0)))}return new Ua(t)}static emptyPath(){return new Ua([])}}const Fa=/^[_a-zA-Z][_a-zA-Z0-9]*$/;class Va extends xa{construct(e,t,n){return new Va(e,t,n)}static isValidIdentifier(e){return Fa.test(e)}canonicalString(){return this.toArray().map((e=>(e=e.replace(/\\/g,"\\\\").replace(/`/g,"\\`"),Va.isValidIdentifier(e)||(e="`"+e+"`"),e))).join(".")}toString(){return this.canonicalString()}isKeyField(){return 1===this.length&&"__name__"===this.get(0)}static keyField(){return new Va(["__name__"])}static fromServerFormat(e){const t=[];let n="",s=0;const i=()=>{if(0===n.length)throw new Ia(Ea.INVALID_ARGUMENT,`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);t.push(n),n=""};let r=!1;for(;s<e.length;){const t=e[s];if("\\"===t){if(s+1===e.length)throw new Ia(Ea.INVALID_ARGUMENT,"Path has trailing escape character: "+e);const t=e[s+1];if("\\"!==t&&"."!==t&&"`"!==t)throw new Ia(Ea.INVALID_ARGUMENT,"Path has invalid escape sequence: "+e);n+=t,s+=2}else"`"===t?(r=!r,s++):"."!==t||r?(n+=t,s++):(i(),s++)}if(i(),r)throw new Ia(Ea.INVALID_ARGUMENT,"Unterminated ` in path: "+e);return new Va(t)}static emptyPath(){return new Va([])}}class Ba{constructor(e){this.path=e}static fromPath(e){return new Ba(Ua.fromString(e))}static fromName(e){return new Ba(Ua.fromString(e).popFirst(5))}static empty(){return new Ba(Ua.emptyPath())}get collectionGroup(){return this.path.popLast().lastSegment()}hasCollectionId(e){return this.path.length>=2&&this.path.get(this.path.length-2)===e}getCollectionGroup(){return this.path.get(this.path.length-2)}getCollectionPath(){return this.path.popLast()}isEqual(e){return null!==e&&0===Ua.comparator(this.path,e.path)}toString(){return this.path.toString()}static comparator(e,t){return Ua.comparator(e.path,t.path)}static isDocumentKey(e){return e.length%2==0}static fromSegments(e){return new Ba(new Ua(e.slice()))}}function ja(e){return new qa(e.readTime,e.key,-1)}class qa{constructor(e,t,n){this.readTime=e,this.documentKey=t,this.largestBatchId=n}static min(){return new qa(Ma.min(),Ba.empty(),-1)}static max(){return new qa(Ma.max(),Ba.empty(),-1)}}function za(e,t){let n=e.readTime.compareTo(t.readTime);return 0!==n?n:(n=Ba.comparator(e.documentKey,t.documentKey),0!==n?n:Oa(e.largestBatchId,t.largestBatchId))}async function Ka(e){if(e.code!==Ea.FAILED_PRECONDITION||"The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab."!==e.message)throw e;fa("LocalStore","Unexpectedly lost primary lease")}class $a{constructor(e){this.nextCallback=null,this.catchCallback=null,this.result=void 0,this.error=void 0,this.isDone=!1,this.callbackAttached=!1,e((e=>{this.isDone=!0,this.result=e,this.nextCallback&&this.nextCallback(e)}),(e=>{this.isDone=!0,this.error=e,this.catchCallback&&this.catchCallback(e)}))}catch(e){return this.next(void 0,e)}next(e,t){return this.callbackAttached&&ya(),this.callbackAttached=!0,this.isDone?this.error?this.wrapFailure(t,this.error):this.wrapSuccess(e,this.result):new $a(((n,s)=>{this.nextCallback=t=>{this.wrapSuccess(e,t).next(n,s)},this.catchCallback=e=>{this.wrapFailure(t,e).next(n,s)}}))}toPromise(){return new Promise(((e,t)=>{this.next(e,t)}))}wrapUserFunction(e){try{const t=e();return t instanceof $a?t:$a.resolve(t)}catch(e){return $a.reject(e)}}wrapSuccess(e,t){return e?this.wrapUserFunction((()=>e(t))):$a.resolve(t)}wrapFailure(e,t){return e?this.wrapUserFunction((()=>e(t))):$a.reject(t)}static resolve(e){return new $a(((t,n)=>{t(e)}))}static reject(e){return new $a(((t,n)=>{n(e)}))}static waitFor(e){return new $a(((t,n)=>{let s=0,i=0,r=!1;e.forEach((e=>{++s,e.next((()=>{++i,r&&i===s&&t()}),(e=>n(e)))})),r=!0,i===s&&t()}))}static or(e){let t=$a.resolve(!1);for(const n of e)t=t.next((e=>e?$a.resolve(e):n()));return t}static forEach(e,t){const n=[];return e.forEach(((e,s)=>{n.push(t.call(this,e,s))})),this.waitFor(n)}static mapArray(e,t){return new $a(((n,s)=>{const i=e.length,r=new Array(i);let o=0;for(let a=0;a<i;a++){const c=a;t(e[c]).next((e=>{r[c]=e,++o,o===i&&n(r)}),(e=>s(e)))}}))}static doWhile(e,t){return new $a(((n,s)=>{const i=()=>{!0===e()?t().next((()=>{i()}),s):n()};i()}))}}function Ha(e){return"IndexedDbTransactionError"===e.name}class Ga{constructor(e,t){this.previousValue=e,t&&(t.sequenceNumberHandler=e=>this.it(e),this.rt=e=>t.writeSequenceNumber(e))}it(e){return this.previousValue=Math.max(e,this.previousValue),this.previousValue}next(){const e=++this.previousValue;return this.rt&&this.rt(e),e}}function Wa(e){let t=0;for(const n in e)Object.prototype.hasOwnProperty.call(e,n)&&t++;return t}function Qa(e,t){for(const n in e)Object.prototype.hasOwnProperty.call(e,n)&&t(n,e[n])}function Xa(e){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0}Ga.ot=-1;class Ja{constructor(e,t){this.comparator=e,this.root=t||Za.EMPTY}insert(e,t){return new Ja(this.comparator,this.root.insert(e,t,this.comparator).copy(null,null,Za.BLACK,null,null))}remove(e){return new Ja(this.comparator,this.root.remove(e,this.comparator).copy(null,null,Za.BLACK,null,null))}get(e){let t=this.root;for(;!t.isEmpty();){const n=this.comparator(e,t.key);if(0===n)return t.value;n<0?t=t.left:n>0&&(t=t.right)}return null}indexOf(e){let t=0,n=this.root;for(;!n.isEmpty();){const s=this.comparator(e,n.key);if(0===s)return t+n.left.size;s<0?n=n.left:(t+=n.left.size+1,n=n.right)}return-1}isEmpty(){return this.root.isEmpty()}get size(){return this.root.size}minKey(){return this.root.minKey()}maxKey(){return this.root.maxKey()}inorderTraversal(e){return this.root.inorderTraversal(e)}forEach(e){this.inorderTraversal(((t,n)=>(e(t,n),!1)))}toString(){const e=[];return this.inorderTraversal(((t,n)=>(e.push(`${t}:${n}`),!1))),`{${e.join(", ")}}`}reverseTraversal(e){return this.root.reverseTraversal(e)}getIterator(){return new Ya(this.root,null,this.comparator,!1)}getIteratorFrom(e){return new Ya(this.root,e,this.comparator,!1)}getReverseIterator(){return new Ya(this.root,null,this.comparator,!0)}getReverseIteratorFrom(e){return new Ya(this.root,e,this.comparator,!0)}}class Ya{constructor(e,t,n,s){this.isReverse=s,this.nodeStack=[];let i=1;for(;!e.isEmpty();)if(i=t?n(e.key,t):1,t&&s&&(i*=-1),i<0)e=this.isReverse?e.left:e.right;else{if(0===i){this.nodeStack.push(e);break}this.nodeStack.push(e),e=this.isReverse?e.right:e.left}}getNext(){let e=this.nodeStack.pop();const t={key:e.key,value:e.value};if(this.isReverse)for(e=e.left;!e.isEmpty();)this.nodeStack.push(e),e=e.right;else for(e=e.right;!e.isEmpty();)this.nodeStack.push(e),e=e.left;return t}hasNext(){return this.nodeStack.length>0}peek(){if(0===this.nodeStack.length)return null;const e=this.nodeStack[this.nodeStack.length-1];return{key:e.key,value:e.value}}}class Za{constructor(e,t,n,s,i){this.key=e,this.value=t,this.color=null!=n?n:Za.RED,this.left=null!=s?s:Za.EMPTY,this.right=null!=i?i:Za.EMPTY,this.size=this.left.size+1+this.right.size}copy(e,t,n,s,i){return new Za(null!=e?e:this.key,null!=t?t:this.value,null!=n?n:this.color,null!=s?s:this.left,null!=i?i:this.right)}isEmpty(){return!1}inorderTraversal(e){return this.left.inorderTraversal(e)||e(this.key,this.value)||this.right.inorderTraversal(e)}reverseTraversal(e){return this.right.reverseTraversal(e)||e(this.key,this.value)||this.left.reverseTraversal(e)}min(){return this.left.isEmpty()?this:this.left.min()}minKey(){return this.min().key}maxKey(){return this.right.isEmpty()?this.key:this.right.maxKey()}insert(e,t,n){let s=this;const i=n(e,s.key);return s=i<0?s.copy(null,null,null,s.left.insert(e,t,n),null):0===i?s.copy(null,t,null,null,null):s.copy(null,null,null,null,s.right.insert(e,t,n)),s.fixUp()}removeMin(){if(this.left.isEmpty())return Za.EMPTY;let e=this;return e.left.isRed()||e.left.left.isRed()||(e=e.moveRedLeft()),e=e.copy(null,null,null,e.left.removeMin(),null),e.fixUp()}remove(e,t){let n,s=this;if(t(e,s.key)<0)s.left.isEmpty()||s.left.isRed()||s.left.left.isRed()||(s=s.moveRedLeft()),s=s.copy(null,null,null,s.left.remove(e,t),null);else{if(s.left.isRed()&&(s=s.rotateRight()),s.right.isEmpty()||s.right.isRed()||s.right.left.isRed()||(s=s.moveRedRight()),0===t(e,s.key)){if(s.right.isEmpty())return Za.EMPTY;n=s.right.min(),s=s.copy(n.key,n.value,null,null,s.right.removeMin())}s=s.copy(null,null,null,null,s.right.remove(e,t))}return s.fixUp()}isRed(){return this.color}fixUp(){let e=this;return e.right.isRed()&&!e.left.isRed()&&(e=e.rotateLeft()),e.left.isRed()&&e.left.left.isRed()&&(e=e.rotateRight()),e.left.isRed()&&e.right.isRed()&&(e=e.colorFlip()),e}moveRedLeft(){let e=this.colorFlip();return e.right.left.isRed()&&(e=e.copy(null,null,null,null,e.right.rotateRight()),e=e.rotateLeft(),e=e.colorFlip()),e}moveRedRight(){let e=this.colorFlip();return e.left.left.isRed()&&(e=e.rotateRight(),e=e.colorFlip()),e}rotateLeft(){const e=this.copy(null,null,Za.RED,null,this.right.left);return this.right.copy(null,null,this.color,e,null)}rotateRight(){const e=this.copy(null,null,Za.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,e)}colorFlip(){const e=this.left.copy(null,null,!this.left.color,null,null),t=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,e,t)}checkMaxDepth(){const e=this.check();return Math.pow(2,e)<=this.size+1}check(){if(this.isRed()&&this.left.isRed())throw ya();if(this.right.isRed())throw ya();const e=this.left.check();if(e!==this.right.check())throw ya();return e+(this.isRed()?0:1)}}Za.EMPTY=null,Za.RED=!0,Za.BLACK=!1,Za.EMPTY=new class{constructor(){this.size=0}get key(){throw ya()}get value(){throw ya()}get color(){throw ya()}get left(){throw ya()}get right(){throw ya()}copy(e,t,n,s,i){return this}insert(e,t,n){return new Za(e,t)}remove(e,t){return this}isEmpty(){return!0}inorderTraversal(e){return!1}reverseTraversal(e){return!1}minKey(){return null}maxKey(){return null}isRed(){return!1}checkMaxDepth(){return!0}check(){return 0}};class ec{constructor(e){this.comparator=e,this.data=new Ja(this.comparator)}has(e){return null!==this.data.get(e)}first(){return this.data.minKey()}last(){return this.data.maxKey()}get size(){return this.data.size}indexOf(e){return this.data.indexOf(e)}forEach(e){this.data.inorderTraversal(((t,n)=>(e(t),!1)))}forEachInRange(e,t){const n=this.data.getIteratorFrom(e[0]);for(;n.hasNext();){const s=n.getNext();if(this.comparator(s.key,e[1])>=0)return;t(s.key)}}forEachWhile(e,t){let n;for(n=void 0!==t?this.data.getIteratorFrom(t):this.data.getIterator();n.hasNext();)if(!e(n.getNext().key))return}firstAfterOrEqual(e){const t=this.data.getIteratorFrom(e);return t.hasNext()?t.getNext().key:null}getIterator(){return new tc(this.data.getIterator())}getIteratorFrom(e){return new tc(this.data.getIteratorFrom(e))}add(e){return this.copy(this.data.remove(e).insert(e,!0))}delete(e){return this.has(e)?this.copy(this.data.remove(e)):this}isEmpty(){return this.data.isEmpty()}unionWith(e){let t=this;return t.size<e.size&&(t=e,e=this),e.forEach((e=>{t=t.add(e)})),t}isEqual(e){if(!(e instanceof ec))return!1;if(this.size!==e.size)return!1;const t=this.data.getIterator(),n=e.data.getIterator();for(;t.hasNext();){const e=t.getNext().key,s=n.getNext().key;if(0!==this.comparator(e,s))return!1}return!0}toArray(){const e=[];return this.forEach((t=>{e.push(t)})),e}toString(){const e=[];return this.forEach((t=>e.push(t))),"SortedSet("+e.toString()+")"}copy(e){const t=new ec(this.comparator);return t.data=e,t}}class tc{constructor(e){this.iter=e}getNext(){return this.iter.getNext().key}hasNext(){return this.iter.hasNext()}}class nc{constructor(e){this.fields=e,e.sort(Va.comparator)}static empty(){return new nc([])}unionWith(e){let t=new ec(Va.comparator);for(const e of this.fields)t=t.add(e);for(const n of e)t=t.add(n);return new nc(t.toArray())}covers(e){for(const t of this.fields)if(t.isPrefixOf(e))return!0;return!1}isEqual(e){return La(this.fields,e.fields,((e,t)=>e.isEqual(t)))}}class sc{constructor(e){this.binaryString=e}static fromBase64String(e){const t=atob(e);return new sc(t)}static fromUint8Array(e){const t=function(e){let t="";for(let n=0;n<e.length;++n)t+=String.fromCharCode(e[n]);return t}(e);return new sc(t)}[Symbol.iterator](){let e=0;return{next:()=>e<this.binaryString.length?{value:this.binaryString.charCodeAt(e++),done:!1}:{value:void 0,done:!0}}}toBase64(){return e=this.binaryString,btoa(e);var e}toUint8Array(){return function(e){const t=new Uint8Array(e.length);for(let n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}(this.binaryString)}approximateByteSize(){return 2*this.binaryString.length}compareTo(e){return Oa(this.binaryString,e.binaryString)}isEqual(e){return this.binaryString===e.binaryString}}sc.EMPTY_BYTE_STRING=new sc("");const ic=new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);function rc(e){if(va(!!e),"string"==typeof e){let t=0;const n=ic.exec(e);if(va(!!n),n[1]){let e=n[1];e=(e+"000000000").substr(0,9),t=Number(e)}const s=new Date(e);return{seconds:Math.floor(s.getTime()/1e3),nanos:t}}return{seconds:oc(e.seconds),nanos:oc(e.nanos)}}function oc(e){return"number"==typeof e?e:"string"==typeof e?Number(e):0}function ac(e){return"string"==typeof e?sc.fromBase64String(e):sc.fromUint8Array(e)}function cc(e){var t,n;return"server_timestamp"===(null===(n=((null===(t=null==e?void 0:e.mapValue)||void 0===t?void 0:t.fields)||{}).__type__)||void 0===n?void 0:n.stringValue)}function uc(e){const t=e.mapValue.fields.__previous_value__;return cc(t)?uc(t):t}function hc(e){const t=rc(e.mapValue.fields.__local_write_time__.timestampValue);return new Pa(t.seconds,t.nanos)}class lc{constructor(e,t,n,s,i,r,o,a){this.databaseId=e,this.appId=t,this.persistenceKey=n,this.host=s,this.ssl=i,this.forceLongPolling=r,this.autoDetectLongPolling=o,this.useFetchStreams=a}}class dc{constructor(e,t){this.projectId=e,this.database=t||"(default)"}static empty(){return new dc("","")}get isDefaultDatabase(){return"(default)"===this.database}isEqual(e){return e instanceof dc&&e.projectId===this.projectId&&e.database===this.database}}function fc(e){return null==e}function pc(e){return 0===e&&1/e==-1/0}const mc={fields:{__type__:{stringValue:"__max__"}}};function gc(e){return"nullValue"in e?0:"booleanValue"in e?1:"integerValue"in e||"doubleValue"in e?2:"timestampValue"in e?3:"stringValue"in e?5:"bytesValue"in e?6:"referenceValue"in e?7:"geoPointValue"in e?8:"arrayValue"in e?9:"mapValue"in e?cc(e)?4:Nc(e)?9007199254740991:10:ya()}function yc(e,t){if(e===t)return!0;const n=gc(e);if(n!==gc(t))return!1;switch(n){case 0:case 9007199254740991:return!0;case 1:return e.booleanValue===t.booleanValue;case 4:return hc(e).isEqual(hc(t));case 3:return function(e,t){if("string"==typeof e.timestampValue&&"string"==typeof t.timestampValue&&e.timestampValue.length===t.timestampValue.length)return e.timestampValue===t.timestampValue;const n=rc(e.timestampValue),s=rc(t.timestampValue);return n.seconds===s.seconds&&n.nanos===s.nanos}(e,t);case 5:return e.stringValue===t.stringValue;case 6:return function(e,t){return ac(e.bytesValue).isEqual(ac(t.bytesValue))}(e,t);case 7:return e.referenceValue===t.referenceValue;case 8:return function(e,t){return oc(e.geoPointValue.latitude)===oc(t.geoPointValue.latitude)&&oc(e.geoPointValue.longitude)===oc(t.geoPointValue.longitude)}(e,t);case 2:return function(e,t){if("integerValue"in e&&"integerValue"in t)return oc(e.integerValue)===oc(t.integerValue);if("doubleValue"in e&&"doubleValue"in t){const n=oc(e.doubleValue),s=oc(t.doubleValue);return n===s?pc(n)===pc(s):isNaN(n)&&isNaN(s)}return!1}(e,t);case 9:return La(e.arrayValue.values||[],t.arrayValue.values||[],yc);case 10:return function(e,t){const n=e.mapValue.fields||{},s=t.mapValue.fields||{};if(Wa(n)!==Wa(s))return!1;for(const e in n)if(n.hasOwnProperty(e)&&(void 0===s[e]||!yc(n[e],s[e])))return!1;return!0}(e,t);default:return ya()}}function vc(e,t){return void 0!==(e.values||[]).find((e=>yc(e,t)))}function wc(e,t){if(e===t)return 0;const n=gc(e),s=gc(t);if(n!==s)return Oa(n,s);switch(n){case 0:case 9007199254740991:return 0;case 1:return Oa(e.booleanValue,t.booleanValue);case 2:return function(e,t){const n=oc(e.integerValue||e.doubleValue),s=oc(t.integerValue||t.doubleValue);return n<s?-1:n>s?1:n===s?0:isNaN(n)?isNaN(s)?0:-1:1}(e,t);case 3:return Ec(e.timestampValue,t.timestampValue);case 4:return Ec(hc(e),hc(t));case 5:return Oa(e.stringValue,t.stringValue);case 6:return function(e,t){const n=ac(e),s=ac(t);return n.compareTo(s)}(e.bytesValue,t.bytesValue);case 7:return function(e,t){const n=e.split("/"),s=t.split("/");for(let e=0;e<n.length&&e<s.length;e++){const t=Oa(n[e],s[e]);if(0!==t)return t}return Oa(n.length,s.length)}(e.referenceValue,t.referenceValue);case 8:return function(e,t){const n=Oa(oc(e.latitude),oc(t.latitude));return 0!==n?n:Oa(oc(e.longitude),oc(t.longitude))}(e.geoPointValue,t.geoPointValue);case 9:return function(e,t){const n=e.values||[],s=t.values||[];for(let e=0;e<n.length&&e<s.length;++e){const t=wc(n[e],s[e]);if(t)return t}return Oa(n.length,s.length)}(e.arrayValue,t.arrayValue);case 10:return function(e,t){if(e===mc&&t===mc)return 0;if(e===mc)return 1;if(t===mc)return-1;const n=e.fields||{},s=Object.keys(n),i=t.fields||{},r=Object.keys(i);s.sort(),r.sort();for(let e=0;e<s.length&&e<r.length;++e){const t=Oa(s[e],r[e]);if(0!==t)return t;const o=wc(n[s[e]],i[r[e]]);if(0!==o)return o}return Oa(s.length,r.length)}(e.mapValue,t.mapValue);default:throw ya()}}function Ec(e,t){if("string"==typeof e&&"string"==typeof t&&e.length===t.length)return Oa(e,t);const n=rc(e),s=rc(t),i=Oa(n.seconds,s.seconds);return 0!==i?i:Oa(n.nanos,s.nanos)}function Ic(e){return Tc(e)}function Tc(e){return"nullValue"in e?"null":"booleanValue"in e?""+e.booleanValue:"integerValue"in e?""+e.integerValue:"doubleValue"in e?""+e.doubleValue:"timestampValue"in e?function(e){const t=rc(e);return`time(${t.seconds},${t.nanos})`}(e.timestampValue):"stringValue"in e?e.stringValue:"bytesValue"in e?ac(e.bytesValue).toBase64():"referenceValue"in e?(n=e.referenceValue,Ba.fromName(n).toString()):"geoPointValue"in e?`geo(${(t=e.geoPointValue).latitude},${t.longitude})`:"arrayValue"in e?function(e){let t="[",n=!0;for(const s of e.values||[])n?n=!1:t+=",",t+=Tc(s);return t+"]"}(e.arrayValue):"mapValue"in e?function(e){const t=Object.keys(e.fields||{}).sort();let n="{",s=!0;for(const i of t)s?s=!1:n+=",",n+=`${i}:${Tc(e.fields[i])}`;return n+"}"}(e.mapValue):ya();var t,n}function bc(e){return!!e&&"integerValue"in e}function _c(e){return!!e&&"arrayValue"in e}function Sc(e){return!!e&&"nullValue"in e}function Cc(e){return!!e&&"doubleValue"in e&&isNaN(Number(e.doubleValue))}function kc(e){return!!e&&"mapValue"in e}function Ac(e){if(e.geoPointValue)return{geoPointValue:Object.assign({},e.geoPointValue)};if(e.timestampValue&&"object"==typeof e.timestampValue)return{timestampValue:Object.assign({},e.timestampValue)};if(e.mapValue){const t={mapValue:{fields:{}}};return Qa(e.mapValue.fields,((e,n)=>t.mapValue.fields[e]=Ac(n))),t}if(e.arrayValue){const t={arrayValue:{values:[]}};for(let n=0;n<(e.arrayValue.values||[]).length;++n)t.arrayValue.values[n]=Ac(e.arrayValue.values[n]);return t}return Object.assign({},e)}function Nc(e){return"__max__"===(((e.mapValue||{}).fields||{}).__type__||{}).stringValue}class Dc{constructor(e){this.value=e}static empty(){return new Dc({mapValue:{}})}field(e){if(e.isEmpty())return this.value;{let t=this.value;for(let n=0;n<e.length-1;++n)if(t=(t.mapValue.fields||{})[e.get(n)],!kc(t))return null;return t=(t.mapValue.fields||{})[e.lastSegment()],t||null}}set(e,t){this.getFieldsMap(e.popLast())[e.lastSegment()]=Ac(t)}setAll(e){let t=Va.emptyPath(),n={},s=[];e.forEach(((e,i)=>{if(!t.isImmediateParentOf(i)){const e=this.getFieldsMap(t);this.applyChanges(e,n,s),n={},s=[],t=i.popLast()}e?n[i.lastSegment()]=Ac(e):s.push(i.lastSegment())}));const i=this.getFieldsMap(t);this.applyChanges(i,n,s)}delete(e){const t=this.field(e.popLast());kc(t)&&t.mapValue.fields&&delete t.mapValue.fields[e.lastSegment()]}isEqual(e){return yc(this.value,e.value)}getFieldsMap(e){let t=this.value;t.mapValue.fields||(t.mapValue={fields:{}});for(let n=0;n<e.length;++n){let s=t.mapValue.fields[e.get(n)];kc(s)&&s.mapValue.fields||(s={mapValue:{fields:{}}},t.mapValue.fields[e.get(n)]=s),t=s}return t.mapValue.fields}applyChanges(e,t,n){Qa(t,((t,n)=>e[t]=n));for(const t of n)delete e[t]}clone(){return new Dc(Ac(this.value))}}function Rc(e){const t=[];return Qa(e.fields,((e,n)=>{const s=new Va([e]);if(kc(n)){const e=Rc(n.mapValue).fields;if(0===e.length)t.push(s);else for(const n of e)t.push(s.child(n))}else t.push(s)})),new nc(t)}class Oc{constructor(e,t,n,s,i,r){this.key=e,this.documentType=t,this.version=n,this.readTime=s,this.data=i,this.documentState=r}static newInvalidDocument(e){return new Oc(e,0,Ma.min(),Ma.min(),Dc.empty(),0)}static newFoundDocument(e,t,n){return new Oc(e,1,t,Ma.min(),n,0)}static newNoDocument(e,t){return new Oc(e,2,t,Ma.min(),Dc.empty(),0)}static newUnknownDocument(e,t){return new Oc(e,3,t,Ma.min(),Dc.empty(),2)}convertToFoundDocument(e,t){return this.version=e,this.documentType=1,this.data=t,this.documentState=0,this}convertToNoDocument(e){return this.version=e,this.documentType=2,this.data=Dc.empty(),this.documentState=0,this}convertToUnknownDocument(e){return this.version=e,this.documentType=3,this.data=Dc.empty(),this.documentState=2,this}setHasCommittedMutations(){return this.documentState=2,this}setHasLocalMutations(){return this.documentState=1,this.version=Ma.min(),this}setReadTime(e){return this.readTime=e,this}get hasLocalMutations(){return 1===this.documentState}get hasCommittedMutations(){return 2===this.documentState}get hasPendingWrites(){return this.hasLocalMutations||this.hasCommittedMutations}isValidDocument(){return 0!==this.documentType}isFoundDocument(){return 1===this.documentType}isNoDocument(){return 2===this.documentType}isUnknownDocument(){return 3===this.documentType}isEqual(e){return e instanceof Oc&&this.key.isEqual(e.key)&&this.version.isEqual(e.version)&&this.documentType===e.documentType&&this.documentState===e.documentState&&this.data.isEqual(e.data)}mutableCopy(){return new Oc(this.key,this.documentType,this.version,this.readTime,this.data.clone(),this.documentState)}toString(){return`Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`}}class Lc{constructor(e,t=null,n=[],s=[],i=null,r=null,o=null){this.path=e,this.collectionGroup=t,this.orderBy=n,this.filters=s,this.limit=i,this.startAt=r,this.endAt=o,this.ut=null}}function Pc(e,t=null,n=[],s=[],i=null,r=null,o=null){return new Lc(e,t,n,s,i,r,o)}function Mc(e){const t=wa(e);if(null===t.ut){let e=t.path.canonicalString();null!==t.collectionGroup&&(e+="|cg:"+t.collectionGroup),e+="|f:",e+=t.filters.map((e=>{return(t=e).field.canonicalString()+t.op.toString()+Ic(t.value);var t})).join(","),e+="|ob:",e+=t.orderBy.map((e=>function(e){return e.field.canonicalString()+e.dir}(e))).join(","),fc(t.limit)||(e+="|l:",e+=t.limit),t.startAt&&(e+="|lb:",e+=t.startAt.inclusive?"b:":"a:",e+=t.startAt.position.map((e=>Ic(e))).join(",")),t.endAt&&(e+="|ub:",e+=t.endAt.inclusive?"a:":"b:",e+=t.endAt.position.map((e=>Ic(e))).join(",")),t.ut=e}return t.ut}function xc(e,t){if(e.limit!==t.limit)return!1;if(e.orderBy.length!==t.orderBy.length)return!1;for(let n=0;n<e.orderBy.length;n++)if(!Qc(e.orderBy[n],t.orderBy[n]))return!1;if(e.filters.length!==t.filters.length)return!1;for(let i=0;i<e.filters.length;i++)if(n=e.filters[i],s=t.filters[i],n.op!==s.op||!n.field.isEqual(s.field)||!yc(n.value,s.value))return!1;var n,s;return e.collectionGroup===t.collectionGroup&&!!e.path.isEqual(t.path)&&!!Jc(e.startAt,t.startAt)&&Jc(e.endAt,t.endAt)}function Uc(e){return Ba.isDocumentKey(e.path)&&null===e.collectionGroup&&0===e.filters.length}class Fc extends class{}{constructor(e,t,n){super(),this.field=e,this.op=t,this.value=n}static create(e,t,n){return e.isKeyField()?"in"===t||"not-in"===t?this.ct(e,t,n):new Vc(e,t,n):"array-contains"===t?new zc(e,n):"in"===t?new Kc(e,n):"not-in"===t?new $c(e,n):"array-contains-any"===t?new Hc(e,n):new Fc(e,t,n)}static ct(e,t,n){return"in"===t?new Bc(e,n):new jc(e,n)}matches(e){const t=e.data.field(this.field);return"!="===this.op?null!==t&&this.at(wc(t,this.value)):null!==t&&gc(this.value)===gc(t)&&this.at(wc(t,this.value))}at(e){switch(this.op){case"<":return e<0;case"<=":return e<=0;case"==":return 0===e;case"!=":return 0!==e;case">":return e>0;case">=":return e>=0;default:return ya()}}ht(){return["<","<=",">",">=","!=","not-in"].indexOf(this.op)>=0}}class Vc extends Fc{constructor(e,t,n){super(e,t,n),this.key=Ba.fromName(n.referenceValue)}matches(e){const t=Ba.comparator(e.key,this.key);return this.at(t)}}class Bc extends Fc{constructor(e,t){super(e,"in",t),this.keys=qc(0,t)}matches(e){return this.keys.some((t=>t.isEqual(e.key)))}}class jc extends Fc{constructor(e,t){super(e,"not-in",t),this.keys=qc(0,t)}matches(e){return!this.keys.some((t=>t.isEqual(e.key)))}}function qc(e,t){var n;return((null===(n=t.arrayValue)||void 0===n?void 0:n.values)||[]).map((e=>Ba.fromName(e.referenceValue)))}class zc extends Fc{constructor(e,t){super(e,"array-contains",t)}matches(e){const t=e.data.field(this.field);return _c(t)&&vc(t.arrayValue,this.value)}}class Kc extends Fc{constructor(e,t){super(e,"in",t)}matches(e){const t=e.data.field(this.field);return null!==t&&vc(this.value.arrayValue,t)}}class $c extends Fc{constructor(e,t){super(e,"not-in",t)}matches(e){if(vc(this.value.arrayValue,{nullValue:"NULL_VALUE"}))return!1;const t=e.data.field(this.field);return null!==t&&!vc(this.value.arrayValue,t)}}class Hc extends Fc{constructor(e,t){super(e,"array-contains-any",t)}matches(e){const t=e.data.field(this.field);return!(!_c(t)||!t.arrayValue.values)&&t.arrayValue.values.some((e=>vc(this.value.arrayValue,e)))}}class Gc{constructor(e,t){this.position=e,this.inclusive=t}}class Wc{constructor(e,t="asc"){this.field=e,this.dir=t}}function Qc(e,t){return e.dir===t.dir&&e.field.isEqual(t.field)}function Xc(e,t,n){let s=0;for(let i=0;i<e.position.length;i++){const r=t[i],o=e.position[i];if(s=r.field.isKeyField()?Ba.comparator(Ba.fromName(o.referenceValue),n.key):wc(o,n.data.field(r.field)),"desc"===r.dir&&(s*=-1),0!==s)break}return s}function Jc(e,t){if(null===e)return null===t;if(null===t)return!1;if(e.inclusive!==t.inclusive||e.position.length!==t.position.length)return!1;for(let n=0;n<e.position.length;n++)if(!yc(e.position[n],t.position[n]))return!1;return!0}class Yc{constructor(e,t=null,n=[],s=[],i=null,r="F",o=null,a=null){this.path=e,this.collectionGroup=t,this.explicitOrderBy=n,this.filters=s,this.limit=i,this.limitType=r,this.startAt=o,this.endAt=a,this.lt=null,this.ft=null,this.startAt,this.endAt}}function Zc(e){return new Yc(e)}function eu(e){const t=wa(e);if(null===t.lt){t.lt=[];const e=function(e){for(const t of e.filters)if(t.ht())return t.field;return null}(t),n=function(e){return e.explicitOrderBy.length>0?e.explicitOrderBy[0].field:null}(t);if(null!==e&&null===n)e.isKeyField()||t.lt.push(new Wc(e)),t.lt.push(new Wc(Va.keyField(),"asc"));else{let e=!1;for(const n of t.explicitOrderBy)t.lt.push(n),n.field.isKeyField()&&(e=!0);if(!e){const e=t.explicitOrderBy.length>0?t.explicitOrderBy[t.explicitOrderBy.length-1].dir:"asc";t.lt.push(new Wc(Va.keyField(),e))}}}return t.lt}function tu(e){const t=wa(e);if(!t.ft)if("F"===t.limitType)t.ft=Pc(t.path,t.collectionGroup,eu(t),t.filters,t.limit,t.startAt,t.endAt);else{const e=[];for(const n of eu(t)){const t="desc"===n.dir?"asc":"desc";e.push(new Wc(n.field,t))}const n=t.endAt?new Gc(t.endAt.position,t.endAt.inclusive):null,s=t.startAt?new Gc(t.startAt.position,t.startAt.inclusive):null;t.ft=Pc(t.path,t.collectionGroup,e,t.filters,t.limit,n,s)}return t.ft}function nu(e,t){return xc(tu(e),tu(t))&&e.limitType===t.limitType}function su(e){return`${Mc(tu(e))}|lt:${e.limitType}`}function iu(e){return`Query(target=${function(e){let t=e.path.canonicalString();return null!==e.collectionGroup&&(t+=" collectionGroup="+e.collectionGroup),e.filters.length>0&&(t+=`, filters: [${e.filters.map((e=>{return`${(t=e).field.canonicalString()} ${t.op} ${Ic(t.value)}`;var t})).join(", ")}]`),fc(e.limit)||(t+=", limit: "+e.limit),e.orderBy.length>0&&(t+=`, orderBy: [${e.orderBy.map((e=>function(e){return`${e.field.canonicalString()} (${e.dir})`}(e))).join(", ")}]`),e.startAt&&(t+=", startAt: ",t+=e.startAt.inclusive?"b:":"a:",t+=e.startAt.position.map((e=>Ic(e))).join(",")),e.endAt&&(t+=", endAt: ",t+=e.endAt.inclusive?"a:":"b:",t+=e.endAt.position.map((e=>Ic(e))).join(",")),`Target(${t})`}(tu(e))}; limitType=${e.limitType})`}function ru(e,t){return t.isFoundDocument()&&function(e,t){const n=t.key.path;return null!==e.collectionGroup?t.key.hasCollectionId(e.collectionGroup)&&e.path.isPrefixOf(n):Ba.isDocumentKey(e.path)?e.path.isEqual(n):e.path.isImmediateParentOf(n)}(e,t)&&function(e,t){for(const n of e.explicitOrderBy)if(!n.field.isKeyField()&&null===t.data.field(n.field))return!1;return!0}(e,t)&&function(e,t){for(const n of e.filters)if(!n.matches(t))return!1;return!0}(e,t)&&function(e,t){return!(e.startAt&&!function(e,t,n){const s=Xc(e,t,n);return e.inclusive?s<=0:s<0}(e.startAt,eu(e),t)||e.endAt&&!function(e,t,n){const s=Xc(e,t,n);return e.inclusive?s>=0:s>0}(e.endAt,eu(e),t))}(e,t)}function ou(e){return(t,n)=>{let s=!1;for(const i of eu(e)){const e=au(i,t,n);if(0!==e)return e;s=s||i.field.isKeyField()}return 0}}function au(e,t,n){const s=e.field.isKeyField()?Ba.comparator(t.key,n.key):function(e,t,n){const s=t.data.field(e),i=n.data.field(e);return null!==s&&null!==i?wc(s,i):ya()}(e.field,t,n);switch(e.dir){case"asc":return s;case"desc":return-1*s;default:return ya()}}function cu(e,t){if(e.dt){if(isNaN(t))return{doubleValue:"NaN"};if(t===1/0)return{doubleValue:"Infinity"};if(t===-1/0)return{doubleValue:"-Infinity"}}return{doubleValue:pc(t)?"-0":t}}function uu(e){return{integerValue:""+e}}function hu(e,t){return function(e){return"number"==typeof e&&Number.isInteger(e)&&!pc(e)&&e<=Number.MAX_SAFE_INTEGER&&e>=Number.MIN_SAFE_INTEGER}(t)?uu(t):cu(e,t)}class lu{constructor(){this._=void 0}}function du(e,t,n){return e instanceof mu?function(e,t){const n={fields:{__type__:{stringValue:"server_timestamp"},__local_write_time__:{timestampValue:{seconds:e.seconds,nanos:e.nanoseconds}}}};return t&&(n.fields.__previous_value__=t),{mapValue:n}}(n,t):e instanceof gu?yu(e,t):e instanceof vu?wu(e,t):function(e,t){const n=pu(e,t),s=Iu(n)+Iu(e._t);return bc(n)&&bc(e._t)?uu(s):cu(e.wt,s)}(e,t)}function fu(e,t,n){return e instanceof gu?yu(e,t):e instanceof vu?wu(e,t):n}function pu(e,t){return e instanceof Eu?bc(n=t)||function(e){return!!e&&"doubleValue"in e}(n)?t:{integerValue:0}:null;var n}class mu extends lu{}class gu extends lu{constructor(e){super(),this.elements=e}}function yu(e,t){const n=Tu(t);for(const t of e.elements)n.some((e=>yc(e,t)))||n.push(t);return{arrayValue:{values:n}}}class vu extends lu{constructor(e){super(),this.elements=e}}function wu(e,t){let n=Tu(t);for(const t of e.elements)n=n.filter((e=>!yc(e,t)));return{arrayValue:{values:n}}}class Eu extends lu{constructor(e,t){super(),this.wt=e,this._t=t}}function Iu(e){return oc(e.integerValue||e.doubleValue)}function Tu(e){return _c(e)&&e.arrayValue.values?e.arrayValue.values.slice():[]}class bu{constructor(e,t){this.version=e,this.transformResults=t}}class _u{constructor(e,t){this.updateTime=e,this.exists=t}static none(){return new _u}static exists(e){return new _u(void 0,e)}static updateTime(e){return new _u(e)}get isNone(){return void 0===this.updateTime&&void 0===this.exists}isEqual(e){return this.exists===e.exists&&(this.updateTime?!!e.updateTime&&this.updateTime.isEqual(e.updateTime):!e.updateTime)}}function Su(e,t){return void 0!==e.updateTime?t.isFoundDocument()&&t.version.isEqual(e.updateTime):void 0===e.exists||e.exists===t.isFoundDocument()}class Cu{}function ku(e,t){if(!e.hasLocalMutations||t&&0===t.fields.length)return null;if(null===t)return e.isNoDocument()?new Uu(e.key,_u.none()):new Ou(e.key,e.data,_u.none());{const n=e.data,s=Dc.empty();let i=new ec(Va.comparator);for(let e of t.fields)if(!i.has(e)){let t=n.field(e);null===t&&e.length>1&&(e=e.popLast(),t=n.field(e)),null===t?s.delete(e):s.set(e,t),i=i.add(e)}return new Lu(e.key,s,new nc(i.toArray()),_u.none())}}function Au(e,t,n){e instanceof Ou?function(e,t,n){const s=e.value.clone(),i=Mu(e.fieldTransforms,t,n.transformResults);s.setAll(i),t.convertToFoundDocument(n.version,s).setHasCommittedMutations()}(e,t,n):e instanceof Lu?function(e,t,n){if(!Su(e.precondition,t))return void t.convertToUnknownDocument(n.version);const s=Mu(e.fieldTransforms,t,n.transformResults),i=t.data;i.setAll(Pu(e)),i.setAll(s),t.convertToFoundDocument(n.version,i).setHasCommittedMutations()}(e,t,n):function(e,t,n){t.convertToNoDocument(n.version).setHasCommittedMutations()}(0,t,n)}function Nu(e,t,n,s){return e instanceof Ou?function(e,t,n,s){if(!Su(e.precondition,t))return n;const i=e.value.clone(),r=xu(e.fieldTransforms,s,t);return i.setAll(r),t.convertToFoundDocument(t.version,i).setHasLocalMutations(),null}(e,t,n,s):e instanceof Lu?function(e,t,n,s){if(!Su(e.precondition,t))return n;const i=xu(e.fieldTransforms,s,t),r=t.data;return r.setAll(Pu(e)),r.setAll(i),t.convertToFoundDocument(t.version,r).setHasLocalMutations(),null===n?null:n.unionWith(e.fieldMask.fields).unionWith(e.fieldTransforms.map((e=>e.field)))}(e,t,n,s):function(e,t,n){return Su(e.precondition,t)?(t.convertToNoDocument(t.version).setHasLocalMutations(),null):n}(e,t,n)}function Du(e,t){let n=null;for(const s of e.fieldTransforms){const e=t.data.field(s.field),i=pu(s.transform,e||null);null!=i&&(null===n&&(n=Dc.empty()),n.set(s.field,i))}return n||null}function Ru(e,t){return e.type===t.type&&!!e.key.isEqual(t.key)&&!!e.precondition.isEqual(t.precondition)&&!!function(e,t){return void 0===e&&void 0===t||!(!e||!t)&&La(e,t,((e,t)=>function(e,t){return e.field.isEqual(t.field)&&function(e,t){return e instanceof gu&&t instanceof gu||e instanceof vu&&t instanceof vu?La(e.elements,t.elements,yc):e instanceof Eu&&t instanceof Eu?yc(e._t,t._t):e instanceof mu&&t instanceof mu}(e.transform,t.transform)}(e,t)))}(e.fieldTransforms,t.fieldTransforms)&&(0===e.type?e.value.isEqual(t.value):1!==e.type||e.data.isEqual(t.data)&&e.fieldMask.isEqual(t.fieldMask))}class Ou extends Cu{constructor(e,t,n,s=[]){super(),this.key=e,this.value=t,this.precondition=n,this.fieldTransforms=s,this.type=0}getFieldMask(){return null}}class Lu extends Cu{constructor(e,t,n,s,i=[]){super(),this.key=e,this.data=t,this.fieldMask=n,this.precondition=s,this.fieldTransforms=i,this.type=1}getFieldMask(){return this.fieldMask}}function Pu(e){const t=new Map;return e.fieldMask.fields.forEach((n=>{if(!n.isEmpty()){const s=e.data.field(n);t.set(n,s)}})),t}function Mu(e,t,n){const s=new Map;va(e.length===n.length);for(let i=0;i<n.length;i++){const r=e[i],o=r.transform,a=t.data.field(r.field);s.set(r.field,fu(o,a,n[i]))}return s}function xu(e,t,n){const s=new Map;for(const i of e){const e=i.transform,r=n.data.field(i.field);s.set(i.field,du(e,r,t))}return s}class Uu extends Cu{constructor(e,t){super(),this.key=e,this.precondition=t,this.type=2,this.fieldTransforms=[]}getFieldMask(){return null}}class Fu extends Cu{constructor(e,t){super(),this.key=e,this.precondition=t,this.type=3,this.fieldTransforms=[]}getFieldMask(){return null}}class Vu{constructor(e){this.count=e}}var Bu,ju;function qu(e){if(void 0===e)return pa("GRPC error has no .code"),Ea.UNKNOWN;switch(e){case Bu.OK:return Ea.OK;case Bu.CANCELLED:return Ea.CANCELLED;case Bu.UNKNOWN:return Ea.UNKNOWN;case Bu.DEADLINE_EXCEEDED:return Ea.DEADLINE_EXCEEDED;case Bu.RESOURCE_EXHAUSTED:return Ea.RESOURCE_EXHAUSTED;case Bu.INTERNAL:return Ea.INTERNAL;case Bu.UNAVAILABLE:return Ea.UNAVAILABLE;case Bu.UNAUTHENTICATED:return Ea.UNAUTHENTICATED;case Bu.INVALID_ARGUMENT:return Ea.INVALID_ARGUMENT;case Bu.NOT_FOUND:return Ea.NOT_FOUND;case Bu.ALREADY_EXISTS:return Ea.ALREADY_EXISTS;case Bu.PERMISSION_DENIED:return Ea.PERMISSION_DENIED;case Bu.FAILED_PRECONDITION:return Ea.FAILED_PRECONDITION;case Bu.ABORTED:return Ea.ABORTED;case Bu.OUT_OF_RANGE:return Ea.OUT_OF_RANGE;case Bu.UNIMPLEMENTED:return Ea.UNIMPLEMENTED;case Bu.DATA_LOSS:return Ea.DATA_LOSS;default:return ya()}}(ju=Bu||(Bu={}))[ju.OK=0]="OK",ju[ju.CANCELLED=1]="CANCELLED",ju[ju.UNKNOWN=2]="UNKNOWN",ju[ju.INVALID_ARGUMENT=3]="INVALID_ARGUMENT",ju[ju.DEADLINE_EXCEEDED=4]="DEADLINE_EXCEEDED",ju[ju.NOT_FOUND=5]="NOT_FOUND",ju[ju.ALREADY_EXISTS=6]="ALREADY_EXISTS",ju[ju.PERMISSION_DENIED=7]="PERMISSION_DENIED",ju[ju.UNAUTHENTICATED=16]="UNAUTHENTICATED",ju[ju.RESOURCE_EXHAUSTED=8]="RESOURCE_EXHAUSTED",ju[ju.FAILED_PRECONDITION=9]="FAILED_PRECONDITION",ju[ju.ABORTED=10]="ABORTED",ju[ju.OUT_OF_RANGE=11]="OUT_OF_RANGE",ju[ju.UNIMPLEMENTED=12]="UNIMPLEMENTED",ju[ju.INTERNAL=13]="INTERNAL",ju[ju.UNAVAILABLE=14]="UNAVAILABLE",ju[ju.DATA_LOSS=15]="DATA_LOSS";class zu{constructor(e,t){this.mapKeyFn=e,this.equalsFn=t,this.inner={},this.innerSize=0}get(e){const t=this.mapKeyFn(e),n=this.inner[t];if(void 0!==n)for(const[t,s]of n)if(this.equalsFn(t,e))return s}has(e){return void 0!==this.get(e)}set(e,t){const n=this.mapKeyFn(e),s=this.inner[n];if(void 0===s)return this.inner[n]=[[e,t]],void this.innerSize++;for(let n=0;n<s.length;n++)if(this.equalsFn(s[n][0],e))return void(s[n]=[e,t]);s.push([e,t]),this.innerSize++}delete(e){const t=this.mapKeyFn(e),n=this.inner[t];if(void 0===n)return!1;for(let s=0;s<n.length;s++)if(this.equalsFn(n[s][0],e))return 1===n.length?delete this.inner[t]:n.splice(s,1),this.innerSize--,!0;return!1}forEach(e){Qa(this.inner,((t,n)=>{for(const[t,s]of n)e(t,s)}))}isEmpty(){return Xa(this.inner)}size(){return this.innerSize}}const Ku=new Ja(Ba.comparator);function $u(){return Ku}const Hu=new Ja(Ba.comparator);function Gu(...e){let t=Hu;for(const n of e)t=t.insert(n.key,n);return t}function Wu(e){let t=Hu;return e.forEach(((e,n)=>t=t.insert(e,n.overlayedDocument))),t}function Qu(){return Ju()}function Xu(){return Ju()}function Ju(){return new zu((e=>e.toString()),((e,t)=>e.isEqual(t)))}const Yu=new Ja(Ba.comparator),Zu=new ec(Ba.comparator);function eh(...e){let t=Zu;for(const n of e)t=t.add(n);return t}const th=new ec(Oa);function nh(){return th}class sh{constructor(e,t,n,s,i){this.snapshotVersion=e,this.targetChanges=t,this.targetMismatches=n,this.documentUpdates=s,this.resolvedLimboDocuments=i}static createSynthesizedRemoteEventForCurrentChange(e,t){const n=new Map;return n.set(e,ih.createSynthesizedTargetChangeForCurrentChange(e,t)),new sh(Ma.min(),n,nh(),$u(),eh())}}class ih{constructor(e,t,n,s,i){this.resumeToken=e,this.current=t,this.addedDocuments=n,this.modifiedDocuments=s,this.removedDocuments=i}static createSynthesizedTargetChangeForCurrentChange(e,t){return new ih(sc.EMPTY_BYTE_STRING,t,eh(),eh(),eh())}}class rh{constructor(e,t,n,s){this.gt=e,this.removedTargetIds=t,this.key=n,this.yt=s}}class oh{constructor(e,t){this.targetId=e,this.It=t}}class ah{constructor(e,t,n=sc.EMPTY_BYTE_STRING,s=null){this.state=e,this.targetIds=t,this.resumeToken=n,this.cause=s}}class ch{constructor(){this.Tt=0,this.Et=lh(),this.At=sc.EMPTY_BYTE_STRING,this.Rt=!1,this.bt=!0}get current(){return this.Rt}get resumeToken(){return this.At}get Pt(){return 0!==this.Tt}get vt(){return this.bt}Vt(e){e.approximateByteSize()>0&&(this.bt=!0,this.At=e)}St(){let e=eh(),t=eh(),n=eh();return this.Et.forEach(((s,i)=>{switch(i){case 0:e=e.add(s);break;case 2:t=t.add(s);break;case 1:n=n.add(s);break;default:ya()}})),new ih(this.At,this.Rt,e,t,n)}Dt(){this.bt=!1,this.Et=lh()}Ct(e,t){this.bt=!0,this.Et=this.Et.insert(e,t)}xt(e){this.bt=!0,this.Et=this.Et.remove(e)}Nt(){this.Tt+=1}kt(){this.Tt-=1}Ot(){this.bt=!0,this.Rt=!0}}class uh{constructor(e){this.Mt=e,this.Ft=new Map,this.$t=$u(),this.Bt=hh(),this.Lt=new ec(Oa)}Ut(e){for(const t of e.gt)e.yt&&e.yt.isFoundDocument()?this.qt(t,e.yt):this.Kt(t,e.key,e.yt);for(const t of e.removedTargetIds)this.Kt(t,e.key,e.yt)}Gt(e){this.forEachTarget(e,(t=>{const n=this.Qt(t);switch(e.state){case 0:this.jt(t)&&n.Vt(e.resumeToken);break;case 1:n.kt(),n.Pt||n.Dt(),n.Vt(e.resumeToken);break;case 2:n.kt(),n.Pt||this.removeTarget(t);break;case 3:this.jt(t)&&(n.Ot(),n.Vt(e.resumeToken));break;case 4:this.jt(t)&&(this.Wt(t),n.Vt(e.resumeToken));break;default:ya()}}))}forEachTarget(e,t){e.targetIds.length>0?e.targetIds.forEach(t):this.Ft.forEach(((e,n)=>{this.jt(n)&&t(n)}))}zt(e){const t=e.targetId,n=e.It.count,s=this.Ht(t);if(s){const e=s.target;if(Uc(e))if(0===n){const n=new Ba(e.path);this.Kt(t,n,Oc.newNoDocument(n,Ma.min()))}else va(1===n);else this.Jt(t)!==n&&(this.Wt(t),this.Lt=this.Lt.add(t))}}Yt(e){const t=new Map;this.Ft.forEach(((n,s)=>{const i=this.Ht(s);if(i){if(n.current&&Uc(i.target)){const t=new Ba(i.target.path);null!==this.$t.get(t)||this.Xt(s,t)||this.Kt(s,t,Oc.newNoDocument(t,e))}n.vt&&(t.set(s,n.St()),n.Dt())}}));let n=eh();this.Bt.forEach(((e,t)=>{let s=!0;t.forEachWhile((e=>{const t=this.Ht(e);return!t||2===t.purpose||(s=!1,!1)})),s&&(n=n.add(e))})),this.$t.forEach(((t,n)=>n.setReadTime(e)));const s=new sh(e,t,this.Lt,this.$t,n);return this.$t=$u(),this.Bt=hh(),this.Lt=new ec(Oa),s}qt(e,t){if(!this.jt(e))return;const n=this.Xt(e,t.key)?2:0;this.Qt(e).Ct(t.key,n),this.$t=this.$t.insert(t.key,t),this.Bt=this.Bt.insert(t.key,this.Zt(t.key).add(e))}Kt(e,t,n){if(!this.jt(e))return;const s=this.Qt(e);this.Xt(e,t)?s.Ct(t,1):s.xt(t),this.Bt=this.Bt.insert(t,this.Zt(t).delete(e)),n&&(this.$t=this.$t.insert(t,n))}removeTarget(e){this.Ft.delete(e)}Jt(e){const t=this.Qt(e).St();return this.Mt.getRemoteKeysForTarget(e).size+t.addedDocuments.size-t.removedDocuments.size}Nt(e){this.Qt(e).Nt()}Qt(e){let t=this.Ft.get(e);return t||(t=new ch,this.Ft.set(e,t)),t}Zt(e){let t=this.Bt.get(e);return t||(t=new ec(Oa),this.Bt=this.Bt.insert(e,t)),t}jt(e){const t=null!==this.Ht(e);return t||fa("WatchChangeAggregator","Detected inactive target",e),t}Ht(e){const t=this.Ft.get(e);return t&&t.Pt?null:this.Mt.te(e)}Wt(e){this.Ft.set(e,new ch),this.Mt.getRemoteKeysForTarget(e).forEach((t=>{this.Kt(e,t,null)}))}Xt(e,t){return this.Mt.getRemoteKeysForTarget(e).has(t)}}function hh(){return new Ja(Ba.comparator)}function lh(){return new Ja(Ba.comparator)}const dh={asc:"ASCENDING",desc:"DESCENDING"},fh={"<":"LESS_THAN","<=":"LESS_THAN_OR_EQUAL",">":"GREATER_THAN",">=":"GREATER_THAN_OR_EQUAL","==":"EQUAL","!=":"NOT_EQUAL","array-contains":"ARRAY_CONTAINS",in:"IN","not-in":"NOT_IN","array-contains-any":"ARRAY_CONTAINS_ANY"};class ph{constructor(e,t){this.databaseId=e,this.dt=t}}function mh(e,t){return e.dt?`${new Date(1e3*t.seconds).toISOString().replace(/\.\d*/,"").replace("Z","")}.${("000000000"+t.nanoseconds).slice(-9)}Z`:{seconds:""+t.seconds,nanos:t.nanoseconds}}function gh(e,t){return e.dt?t.toBase64():t.toUint8Array()}function yh(e,t){return mh(e,t.toTimestamp())}function vh(e){return va(!!e),Ma.fromTimestamp(function(e){const t=rc(e);return new Pa(t.seconds,t.nanos)}(e))}function wh(e,t){return function(e){return new Ua(["projects",e.projectId,"databases",e.database])}(e).child("documents").child(t).canonicalString()}function Eh(e){const t=Ua.fromString(e);return va(Fh(t)),t}function Ih(e,t){return wh(e.databaseId,t.path)}function Th(e,t){const n=Eh(t);if(n.get(1)!==e.databaseId.projectId)throw new Ia(Ea.INVALID_ARGUMENT,"Tried to deserialize key from different project: "+n.get(1)+" vs "+e.databaseId.projectId);if(n.get(3)!==e.databaseId.database)throw new Ia(Ea.INVALID_ARGUMENT,"Tried to deserialize key from different database: "+n.get(3)+" vs "+e.databaseId.database);return new Ba(Sh(n))}function bh(e,t){return wh(e.databaseId,t)}function _h(e){return new Ua(["projects",e.databaseId.projectId,"databases",e.databaseId.database]).canonicalString()}function Sh(e){return va(e.length>4&&"documents"===e.get(4)),e.popFirst(5)}function Ch(e,t,n){return{name:Ih(e,t),fields:n.value.mapValue.fields}}function kh(e,t){return{documents:[bh(e,t.path)]}}function Ah(e,t){const n={structuredQuery:{}},s=t.path;null!==t.collectionGroup?(n.parent=bh(e,s),n.structuredQuery.from=[{collectionId:t.collectionGroup,allDescendants:!0}]):(n.parent=bh(e,s.popLast()),n.structuredQuery.from=[{collectionId:s.lastSegment()}]);const i=function(e){if(0===e.length)return;const t=e.map((e=>function(e){if("=="===e.op){if(Cc(e.value))return{unaryFilter:{field:Lh(e.field),op:"IS_NAN"}};if(Sc(e.value))return{unaryFilter:{field:Lh(e.field),op:"IS_NULL"}}}else if("!="===e.op){if(Cc(e.value))return{unaryFilter:{field:Lh(e.field),op:"IS_NOT_NAN"}};if(Sc(e.value))return{unaryFilter:{field:Lh(e.field),op:"IS_NOT_NULL"}}}return{fieldFilter:{field:Lh(e.field),op:Oh(e.op),value:e.value}}}(e)));return 1===t.length?t[0]:{compositeFilter:{op:"AND",filters:t}}}(t.filters);i&&(n.structuredQuery.where=i);const r=function(e){if(0!==e.length)return e.map((e=>function(e){return{field:Lh(e.field),direction:Rh(e.dir)}}(e)))}(t.orderBy);r&&(n.structuredQuery.orderBy=r);const o=function(e,t){return e.dt||fc(t)?t:{value:t}}(e,t.limit);var a;return null!==o&&(n.structuredQuery.limit=o),t.startAt&&(n.structuredQuery.startAt={before:(a=t.startAt).inclusive,values:a.position}),t.endAt&&(n.structuredQuery.endAt=function(e){return{before:!e.inclusive,values:e.position}}(t.endAt)),n}function Nh(e){let t=function(e){const t=Eh(e);return 4===t.length?Ua.emptyPath():Sh(t)}(e.parent);const n=e.structuredQuery,s=n.from?n.from.length:0;let i=null;if(s>0){va(1===s);const e=n.from[0];e.allDescendants?i=e.collectionId:t=t.child(e.collectionId)}let r=[];n.where&&(r=Dh(n.where));let o=[];n.orderBy&&(o=n.orderBy.map((e=>function(e){return new Wc(Ph(e.field),function(e){switch(e){case"ASCENDING":return"asc";case"DESCENDING":return"desc";default:return}}(e.direction))}(e))));let a=null;n.limit&&(a=function(e){let t;return t="object"==typeof e?e.value:e,fc(t)?null:t}(n.limit));let c=null;n.startAt&&(c=function(e){const t=!!e.before,n=e.values||[];return new Gc(n,t)}(n.startAt));let u=null;return n.endAt&&(u=function(e){const t=!e.before,n=e.values||[];return new Gc(n,t)}(n.endAt)),function(e,t,n,s,i,r,o,a){return new Yc(e,t,n,s,i,r,o,a)}(t,i,o,r,a,"F",c,u)}function Dh(e){return e?void 0!==e.unaryFilter?[xh(e)]:void 0!==e.fieldFilter?[Mh(e)]:void 0!==e.compositeFilter?e.compositeFilter.filters.map((e=>Dh(e))).reduce(((e,t)=>e.concat(t))):ya():[]}function Rh(e){return dh[e]}function Oh(e){return fh[e]}function Lh(e){return{fieldPath:e.canonicalString()}}function Ph(e){return Va.fromServerFormat(e.fieldPath)}function Mh(e){return Fc.create(Ph(e.fieldFilter.field),function(e){switch(e){case"EQUAL":return"==";case"NOT_EQUAL":return"!=";case"GREATER_THAN":return">";case"GREATER_THAN_OR_EQUAL":return">=";case"LESS_THAN":return"<";case"LESS_THAN_OR_EQUAL":return"<=";case"ARRAY_CONTAINS":return"array-contains";case"IN":return"in";case"NOT_IN":return"not-in";case"ARRAY_CONTAINS_ANY":return"array-contains-any";default:return ya()}}(e.fieldFilter.op),e.fieldFilter.value)}function xh(e){switch(e.unaryFilter.op){case"IS_NAN":const t=Ph(e.unaryFilter.field);return Fc.create(t,"==",{doubleValue:NaN});case"IS_NULL":const n=Ph(e.unaryFilter.field);return Fc.create(n,"==",{nullValue:"NULL_VALUE"});case"IS_NOT_NAN":const s=Ph(e.unaryFilter.field);return Fc.create(s,"!=",{doubleValue:NaN});case"IS_NOT_NULL":const i=Ph(e.unaryFilter.field);return Fc.create(i,"!=",{nullValue:"NULL_VALUE"});default:return ya()}}function Uh(e){const t=[];return e.fields.forEach((e=>t.push(e.canonicalString()))),{fieldPaths:t}}function Fh(e){return e.length>=4&&"projects"===e.get(0)&&"databases"===e.get(2)}class Vh{constructor(e,t,n,s){this.batchId=e,this.localWriteTime=t,this.baseMutations=n,this.mutations=s}applyToRemoteDocument(e,t){const n=t.mutationResults;for(let t=0;t<this.mutations.length;t++){const s=this.mutations[t];s.key.isEqual(e.key)&&Au(s,e,n[t])}}applyToLocalView(e,t){for(const n of this.baseMutations)n.key.isEqual(e.key)&&(t=Nu(n,e,t,this.localWriteTime));for(const n of this.mutations)n.key.isEqual(e.key)&&(t=Nu(n,e,t,this.localWriteTime));return t}applyToLocalDocumentSet(e,t){const n=Xu();return this.mutations.forEach((s=>{const i=e.get(s.key),r=i.overlayedDocument;let o=this.applyToLocalView(r,i.mutatedFields);o=t.has(s.key)?null:o;const a=ku(r,o);null!==a&&n.set(s.key,a),r.isValidDocument()||r.convertToNoDocument(Ma.min())})),n}keys(){return this.mutations.reduce(((e,t)=>e.add(t.key)),eh())}isEqual(e){return this.batchId===e.batchId&&La(this.mutations,e.mutations,((e,t)=>Ru(e,t)))&&La(this.baseMutations,e.baseMutations,((e,t)=>Ru(e,t)))}}class Bh{constructor(e,t,n,s){this.batch=e,this.commitVersion=t,this.mutationResults=n,this.docVersions=s}static from(e,t,n){va(e.mutations.length===n.length);let s=Yu;const i=e.mutations;for(let e=0;e<i.length;e++)s=s.insert(i[e].key,n[e].version);return new Bh(e,t,n,s)}}class jh{constructor(e,t){this.largestBatchId=e,this.mutation=t}getKey(){return this.mutation.key}isEqual(e){return null!==e&&this.mutation===e.mutation}toString(){return`Overlay{\n      largestBatchId: ${this.largestBatchId},\n      mutation: ${this.mutation.toString()}\n    }`}}class qh{constructor(e,t,n,s,i=Ma.min(),r=Ma.min(),o=sc.EMPTY_BYTE_STRING){this.target=e,this.targetId=t,this.purpose=n,this.sequenceNumber=s,this.snapshotVersion=i,this.lastLimboFreeSnapshotVersion=r,this.resumeToken=o}withSequenceNumber(e){return new qh(this.target,this.targetId,this.purpose,e,this.snapshotVersion,this.lastLimboFreeSnapshotVersion,this.resumeToken)}withResumeToken(e,t){return new qh(this.target,this.targetId,this.purpose,this.sequenceNumber,t,this.lastLimboFreeSnapshotVersion,e)}withLastLimboFreeSnapshotVersion(e){return new qh(this.target,this.targetId,this.purpose,this.sequenceNumber,this.snapshotVersion,e,this.resumeToken)}}class zh{constructor(e){this.ne=e}}function Kh(e){const t=Nh({parent:e.parent,structuredQuery:e.structuredQuery});return"LAST"===e.limitType?function(e,t,n){return new Yc(e.path,e.collectionGroup,e.explicitOrderBy.slice(),e.filters.slice(),t,n,e.startAt,e.endAt)}(t,t.limit,"L"):t}class $h{constructor(){}re(e,t){this.oe(e,t),t.ue()}oe(e,t){if("nullValue"in e)this.ce(t,5);else if("booleanValue"in e)this.ce(t,10),t.ae(e.booleanValue?1:0);else if("integerValue"in e)this.ce(t,15),t.ae(oc(e.integerValue));else if("doubleValue"in e){const n=oc(e.doubleValue);isNaN(n)?this.ce(t,13):(this.ce(t,15),pc(n)?t.ae(0):t.ae(n))}else if("timestampValue"in e){const n=e.timestampValue;this.ce(t,20),"string"==typeof n?t.he(n):(t.he(`${n.seconds||""}`),t.ae(n.nanos||0))}else if("stringValue"in e)this.le(e.stringValue,t),this.fe(t);else if("bytesValue"in e)this.ce(t,30),t.de(ac(e.bytesValue)),this.fe(t);else if("referenceValue"in e)this._e(e.referenceValue,t);else if("geoPointValue"in e){const n=e.geoPointValue;this.ce(t,45),t.ae(n.latitude||0),t.ae(n.longitude||0)}else"mapValue"in e?Nc(e)?this.ce(t,Number.MAX_SAFE_INTEGER):(this.we(e.mapValue,t),this.fe(t)):"arrayValue"in e?(this.me(e.arrayValue,t),this.fe(t)):ya()}le(e,t){this.ce(t,25),this.ge(e,t)}ge(e,t){t.he(e)}we(e,t){const n=e.fields||{};this.ce(t,55);for(const e of Object.keys(n))this.le(e,t),this.oe(n[e],t)}me(e,t){const n=e.values||[];this.ce(t,50);for(const e of n)this.oe(e,t)}_e(e,t){this.ce(t,37),Ba.fromName(e).path.forEach((e=>{this.ce(t,60),this.ge(e,t)}))}ce(e,t){e.ae(t)}fe(e){e.ae(2)}}$h.ye=new $h;class Hh{constructor(){this.ze=new Gh}addToCollectionParentIndex(e,t){return this.ze.add(t),$a.resolve()}getCollectionParents(e,t){return $a.resolve(this.ze.getEntries(t))}addFieldIndex(e,t){return $a.resolve()}deleteFieldIndex(e,t){return $a.resolve()}getDocumentsMatchingTarget(e,t){return $a.resolve(null)}getIndexType(e,t){return $a.resolve(0)}getFieldIndexes(e,t){return $a.resolve([])}getNextCollectionGroupToUpdate(e){return $a.resolve(null)}getMinOffset(e,t){return $a.resolve(qa.min())}getMinOffsetFromCollectionGroup(e,t){return $a.resolve(qa.min())}updateCollectionGroup(e,t,n){return $a.resolve()}updateIndexEntries(e,t){return $a.resolve()}}class Gh{constructor(){this.index={}}add(e){const t=e.lastSegment(),n=e.popLast(),s=this.index[t]||new ec(Ua.comparator),i=!s.has(n);return this.index[t]=s.add(n),i}has(e){const t=e.lastSegment(),n=e.popLast(),s=this.index[t];return s&&s.has(n)}getEntries(e){return(this.index[e]||new ec(Ua.comparator)).toArray()}}new Uint8Array(0);class Wh{constructor(e,t,n){this.cacheSizeCollectionThreshold=e,this.percentileToCollect=t,this.maximumSequenceNumbersToCollect=n}static withCacheSize(e){return new Wh(e,Wh.DEFAULT_COLLECTION_PERCENTILE,Wh.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT)}}Wh.DEFAULT_COLLECTION_PERCENTILE=10,Wh.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT=1e3,Wh.DEFAULT=new Wh(41943040,Wh.DEFAULT_COLLECTION_PERCENTILE,Wh.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT),Wh.DISABLED=new Wh(-1,0,0);class Qh{constructor(e){this.En=e}next(){return this.En+=2,this.En}static An(){return new Qh(0)}static Rn(){return new Qh(-1)}}class Xh{constructor(e,t){this.overlayedDocument=e,this.mutatedFields=t}}class Jh{constructor(e,t,n,s){this.remoteDocumentCache=e,this.mutationQueue=t,this.documentOverlayCache=n,this.indexManager=s}getDocument(e,t){let n=null;return this.documentOverlayCache.getOverlay(e,t).next((s=>(n=s,this.getBaseDocument(e,t,n)))).next((e=>(null!==n&&Nu(n.mutation,e,nc.empty(),Pa.now()),e)))}getDocuments(e,t){return this.remoteDocumentCache.getEntries(e,t).next((t=>this.getLocalViewOfDocuments(e,t,eh()).next((()=>t))))}getLocalViewOfDocuments(e,t,n=eh()){const s=Qu();return this.populateOverlays(e,s,t).next((()=>this.computeViews(e,t,s,n).next((e=>{let t=Gu();return e.forEach(((e,n)=>{t=t.insert(e,n.overlayedDocument)})),t}))))}getOverlayedDocuments(e,t){const n=Qu();return this.populateOverlays(e,n,t).next((()=>this.computeViews(e,t,n,eh())))}populateOverlays(e,t,n){const s=[];return n.forEach((e=>{t.has(e)||s.push(e)})),this.documentOverlayCache.getOverlays(e,s).next((e=>{e.forEach(((e,n)=>{t.set(e,n)}))}))}computeViews(e,t,n,s){let i=$u();const r=Ju(),o=Ju();return t.forEach(((e,t)=>{const o=n.get(t.key);s.has(t.key)&&(void 0===o||o.mutation instanceof Lu)?i=i.insert(t.key,t):void 0!==o&&(r.set(t.key,o.mutation.getFieldMask()),Nu(o.mutation,t,o.mutation.getFieldMask(),Pa.now()))})),this.recalculateAndSaveOverlays(e,i).next((e=>(e.forEach(((e,t)=>r.set(e,t))),t.forEach(((e,t)=>{var n;return o.set(e,new Xh(t,null!==(n=r.get(e))&&void 0!==n?n:null))})),o)))}recalculateAndSaveOverlays(e,t){const n=Ju();let s=new Ja(((e,t)=>e-t)),i=eh();return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(e,t).next((e=>{for(const i of e)i.keys().forEach((e=>{const r=t.get(e);if(null===r)return;let o=n.get(e)||nc.empty();o=i.applyToLocalView(r,o),n.set(e,o);const a=(s.get(i.batchId)||eh()).add(e);s=s.insert(i.batchId,a)}))})).next((()=>{const r=[],o=s.getReverseIterator();for(;o.hasNext();){const s=o.getNext(),a=s.key,c=s.value,u=Xu();c.forEach((e=>{if(!i.has(e)){const s=ku(t.get(e),n.get(e));null!==s&&u.set(e,s),i=i.add(e)}})),r.push(this.documentOverlayCache.saveOverlays(e,a,u))}return $a.waitFor(r)})).next((()=>n))}recalculateAndSaveOverlaysForDocumentKeys(e,t){return this.remoteDocumentCache.getEntries(e,t).next((t=>this.recalculateAndSaveOverlays(e,t)))}getDocumentsMatchingQuery(e,t,n){return function(e){return Ba.isDocumentKey(e.path)&&null===e.collectionGroup&&0===e.filters.length}(t)?this.getDocumentsMatchingDocumentQuery(e,t.path):function(e){return null!==e.collectionGroup}(t)?this.getDocumentsMatchingCollectionGroupQuery(e,t,n):this.getDocumentsMatchingCollectionQuery(e,t,n)}getNextDocuments(e,t,n,s){return this.remoteDocumentCache.getAllFromCollectionGroup(e,t,n,s).next((i=>{const r=s-i.size>0?this.documentOverlayCache.getOverlaysForCollectionGroup(e,t,n.largestBatchId,s-i.size):$a.resolve(Qu());let o=-1,a=i;return r.next((t=>$a.forEach(t,((t,n)=>(o<n.largestBatchId&&(o=n.largestBatchId),i.get(t)?$a.resolve():this.getBaseDocument(e,t,n).next((e=>{a=a.insert(t,e)}))))).next((()=>this.populateOverlays(e,t,i))).next((()=>this.computeViews(e,a,t,eh()))).next((e=>({batchId:o,changes:Wu(e)})))))}))}getDocumentsMatchingDocumentQuery(e,t){return this.getDocument(e,new Ba(t)).next((e=>{let t=Gu();return e.isFoundDocument()&&(t=t.insert(e.key,e)),t}))}getDocumentsMatchingCollectionGroupQuery(e,t,n){const s=t.collectionGroup;let i=Gu();return this.indexManager.getCollectionParents(e,s).next((r=>$a.forEach(r,(r=>{const o=function(e,t){return new Yc(t,null,e.explicitOrderBy.slice(),e.filters.slice(),e.limit,e.limitType,e.startAt,e.endAt)}(t,r.child(s));return this.getDocumentsMatchingCollectionQuery(e,o,n).next((e=>{e.forEach(((e,t)=>{i=i.insert(e,t)}))}))})).next((()=>i))))}getDocumentsMatchingCollectionQuery(e,t,n){let s;return this.remoteDocumentCache.getAllFromCollection(e,t.path,n).next((i=>(s=i,this.documentOverlayCache.getOverlaysForCollection(e,t.path,n.largestBatchId)))).next((e=>{e.forEach(((e,t)=>{const n=t.getKey();null===s.get(n)&&(s=s.insert(n,Oc.newInvalidDocument(n)))}));let n=Gu();return s.forEach(((s,i)=>{const r=e.get(s);void 0!==r&&Nu(r.mutation,i,nc.empty(),Pa.now()),ru(t,i)&&(n=n.insert(s,i))})),n}))}getBaseDocument(e,t,n){return null===n||1===n.mutation.type?this.remoteDocumentCache.getEntry(e,t):$a.resolve(Oc.newInvalidDocument(t))}}class Yh{constructor(e){this.wt=e,this.Jn=new Map,this.Yn=new Map}getBundleMetadata(e,t){return $a.resolve(this.Jn.get(t))}saveBundleMetadata(e,t){var n;return this.Jn.set(t.id,{id:(n=t).id,version:n.version,createTime:vh(n.createTime)}),$a.resolve()}getNamedQuery(e,t){return $a.resolve(this.Yn.get(t))}saveNamedQuery(e,t){return this.Yn.set(t.name,function(e){return{name:e.name,query:Kh(e.bundledQuery),readTime:vh(e.readTime)}}(t)),$a.resolve()}}class Zh{constructor(){this.overlays=new Ja(Ba.comparator),this.Xn=new Map}getOverlay(e,t){return $a.resolve(this.overlays.get(t))}getOverlays(e,t){const n=Qu();return $a.forEach(t,(t=>this.getOverlay(e,t).next((e=>{null!==e&&n.set(t,e)})))).next((()=>n))}saveOverlays(e,t,n){return n.forEach(((n,s)=>{this.ie(e,t,s)})),$a.resolve()}removeOverlaysForBatchId(e,t,n){const s=this.Xn.get(n);return void 0!==s&&(s.forEach((e=>this.overlays=this.overlays.remove(e))),this.Xn.delete(n)),$a.resolve()}getOverlaysForCollection(e,t,n){const s=Qu(),i=t.length+1,r=new Ba(t.child("")),o=this.overlays.getIteratorFrom(r);for(;o.hasNext();){const e=o.getNext().value,r=e.getKey();if(!t.isPrefixOf(r.path))break;r.path.length===i&&e.largestBatchId>n&&s.set(e.getKey(),e)}return $a.resolve(s)}getOverlaysForCollectionGroup(e,t,n,s){let i=new Ja(((e,t)=>e-t));const r=this.overlays.getIterator();for(;r.hasNext();){const e=r.getNext().value;if(e.getKey().getCollectionGroup()===t&&e.largestBatchId>n){let t=i.get(e.largestBatchId);null===t&&(t=Qu(),i=i.insert(e.largestBatchId,t)),t.set(e.getKey(),e)}}const o=Qu(),a=i.getIterator();for(;a.hasNext()&&(a.getNext().value.forEach(((e,t)=>o.set(e,t))),!(o.size()>=s)););return $a.resolve(o)}ie(e,t,n){const s=this.overlays.get(n.key);if(null!==s){const e=this.Xn.get(s.largestBatchId).delete(n.key);this.Xn.set(s.largestBatchId,e)}this.overlays=this.overlays.insert(n.key,new jh(t,n));let i=this.Xn.get(t);void 0===i&&(i=eh(),this.Xn.set(t,i)),this.Xn.set(t,i.add(n.key))}}class el{constructor(){this.Zn=new ec(tl.ts),this.es=new ec(tl.ns)}isEmpty(){return this.Zn.isEmpty()}addReference(e,t){const n=new tl(e,t);this.Zn=this.Zn.add(n),this.es=this.es.add(n)}ss(e,t){e.forEach((e=>this.addReference(e,t)))}removeReference(e,t){this.rs(new tl(e,t))}os(e,t){e.forEach((e=>this.removeReference(e,t)))}us(e){const t=new Ba(new Ua([])),n=new tl(t,e),s=new tl(t,e+1),i=[];return this.es.forEachInRange([n,s],(e=>{this.rs(e),i.push(e.key)})),i}cs(){this.Zn.forEach((e=>this.rs(e)))}rs(e){this.Zn=this.Zn.delete(e),this.es=this.es.delete(e)}hs(e){const t=new Ba(new Ua([])),n=new tl(t,e),s=new tl(t,e+1);let i=eh();return this.es.forEachInRange([n,s],(e=>{i=i.add(e.key)})),i}containsKey(e){const t=new tl(e,0),n=this.Zn.firstAfterOrEqual(t);return null!==n&&e.isEqual(n.key)}}class tl{constructor(e,t){this.key=e,this.ls=t}static ts(e,t){return Ba.comparator(e.key,t.key)||Oa(e.ls,t.ls)}static ns(e,t){return Oa(e.ls,t.ls)||Ba.comparator(e.key,t.key)}}class nl{constructor(e,t){this.indexManager=e,this.referenceDelegate=t,this.mutationQueue=[],this.fs=1,this.ds=new ec(tl.ts)}checkEmpty(e){return $a.resolve(0===this.mutationQueue.length)}addMutationBatch(e,t,n,s){const i=this.fs;this.fs++,this.mutationQueue.length>0&&this.mutationQueue[this.mutationQueue.length-1];const r=new Vh(i,t,n,s);this.mutationQueue.push(r);for(const t of s)this.ds=this.ds.add(new tl(t.key,i)),this.indexManager.addToCollectionParentIndex(e,t.key.path.popLast());return $a.resolve(r)}lookupMutationBatch(e,t){return $a.resolve(this._s(t))}getNextMutationBatchAfterBatchId(e,t){const n=t+1,s=this.ws(n),i=s<0?0:s;return $a.resolve(this.mutationQueue.length>i?this.mutationQueue[i]:null)}getHighestUnacknowledgedBatchId(){return $a.resolve(0===this.mutationQueue.length?-1:this.fs-1)}getAllMutationBatches(e){return $a.resolve(this.mutationQueue.slice())}getAllMutationBatchesAffectingDocumentKey(e,t){const n=new tl(t,0),s=new tl(t,Number.POSITIVE_INFINITY),i=[];return this.ds.forEachInRange([n,s],(e=>{const t=this._s(e.ls);i.push(t)})),$a.resolve(i)}getAllMutationBatchesAffectingDocumentKeys(e,t){let n=new ec(Oa);return t.forEach((e=>{const t=new tl(e,0),s=new tl(e,Number.POSITIVE_INFINITY);this.ds.forEachInRange([t,s],(e=>{n=n.add(e.ls)}))})),$a.resolve(this.gs(n))}getAllMutationBatchesAffectingQuery(e,t){const n=t.path,s=n.length+1;let i=n;Ba.isDocumentKey(i)||(i=i.child(""));const r=new tl(new Ba(i),0);let o=new ec(Oa);return this.ds.forEachWhile((e=>{const t=e.key.path;return!!n.isPrefixOf(t)&&(t.length===s&&(o=o.add(e.ls)),!0)}),r),$a.resolve(this.gs(o))}gs(e){const t=[];return e.forEach((e=>{const n=this._s(e);null!==n&&t.push(n)})),t}removeMutationBatch(e,t){va(0===this.ys(t.batchId,"removed")),this.mutationQueue.shift();let n=this.ds;return $a.forEach(t.mutations,(s=>{const i=new tl(s.key,t.batchId);return n=n.delete(i),this.referenceDelegate.markPotentiallyOrphaned(e,s.key)})).next((()=>{this.ds=n}))}In(e){}containsKey(e,t){const n=new tl(t,0),s=this.ds.firstAfterOrEqual(n);return $a.resolve(t.isEqual(s&&s.key))}performConsistencyCheck(e){return this.mutationQueue.length,$a.resolve()}ys(e,t){return this.ws(e)}ws(e){return 0===this.mutationQueue.length?0:e-this.mutationQueue[0].batchId}_s(e){const t=this.ws(e);return t<0||t>=this.mutationQueue.length?null:this.mutationQueue[t]}}class sl{constructor(e){this.ps=e,this.docs=new Ja(Ba.comparator),this.size=0}setIndexManager(e){this.indexManager=e}addEntry(e,t){const n=t.key,s=this.docs.get(n),i=s?s.size:0,r=this.ps(t);return this.docs=this.docs.insert(n,{document:t.mutableCopy(),size:r}),this.size+=r-i,this.indexManager.addToCollectionParentIndex(e,n.path.popLast())}removeEntry(e){const t=this.docs.get(e);t&&(this.docs=this.docs.remove(e),this.size-=t.size)}getEntry(e,t){const n=this.docs.get(t);return $a.resolve(n?n.document.mutableCopy():Oc.newInvalidDocument(t))}getEntries(e,t){let n=$u();return t.forEach((e=>{const t=this.docs.get(e);n=n.insert(e,t?t.document.mutableCopy():Oc.newInvalidDocument(e))})),$a.resolve(n)}getAllFromCollection(e,t,n){let s=$u();const i=new Ba(t.child("")),r=this.docs.getIteratorFrom(i);for(;r.hasNext();){const{key:e,value:{document:i}}=r.getNext();if(!t.isPrefixOf(e.path))break;e.path.length>t.length+1||za(ja(i),n)<=0||(s=s.insert(i.key,i.mutableCopy()))}return $a.resolve(s)}getAllFromCollectionGroup(e,t,n,s){ya()}Is(e,t){return $a.forEach(this.docs,(e=>t(e)))}newChangeBuffer(e){return new il(this)}getSize(e){return $a.resolve(this.size)}}class il extends class{constructor(){this.changes=new zu((e=>e.toString()),((e,t)=>e.isEqual(t))),this.changesApplied=!1}addEntry(e){this.assertNotApplied(),this.changes.set(e.key,e)}removeEntry(e,t){this.assertNotApplied(),this.changes.set(e,Oc.newInvalidDocument(e).setReadTime(t))}getEntry(e,t){this.assertNotApplied();const n=this.changes.get(t);return void 0!==n?$a.resolve(n):this.getFromCache(e,t)}getEntries(e,t){return this.getAllFromCache(e,t)}apply(e){return this.assertNotApplied(),this.changesApplied=!0,this.applyChanges(e)}assertNotApplied(){}}{constructor(e){super(),this.zn=e}applyChanges(e){const t=[];return this.changes.forEach(((n,s)=>{s.isValidDocument()?t.push(this.zn.addEntry(e,s)):this.zn.removeEntry(n)})),$a.waitFor(t)}getFromCache(e,t){return this.zn.getEntry(e,t)}getAllFromCache(e,t){return this.zn.getEntries(e,t)}}class rl{constructor(e){this.persistence=e,this.Ts=new zu((e=>Mc(e)),xc),this.lastRemoteSnapshotVersion=Ma.min(),this.highestTargetId=0,this.Es=0,this.As=new el,this.targetCount=0,this.Rs=Qh.An()}forEachTarget(e,t){return this.Ts.forEach(((e,n)=>t(n))),$a.resolve()}getLastRemoteSnapshotVersion(e){return $a.resolve(this.lastRemoteSnapshotVersion)}getHighestSequenceNumber(e){return $a.resolve(this.Es)}allocateTargetId(e){return this.highestTargetId=this.Rs.next(),$a.resolve(this.highestTargetId)}setTargetsMetadata(e,t,n){return n&&(this.lastRemoteSnapshotVersion=n),t>this.Es&&(this.Es=t),$a.resolve()}vn(e){this.Ts.set(e.target,e);const t=e.targetId;t>this.highestTargetId&&(this.Rs=new Qh(t),this.highestTargetId=t),e.sequenceNumber>this.Es&&(this.Es=e.sequenceNumber)}addTargetData(e,t){return this.vn(t),this.targetCount+=1,$a.resolve()}updateTargetData(e,t){return this.vn(t),$a.resolve()}removeTargetData(e,t){return this.Ts.delete(t.target),this.As.us(t.targetId),this.targetCount-=1,$a.resolve()}removeTargets(e,t,n){let s=0;const i=[];return this.Ts.forEach(((r,o)=>{o.sequenceNumber<=t&&null===n.get(o.targetId)&&(this.Ts.delete(r),i.push(this.removeMatchingKeysForTargetId(e,o.targetId)),s++)})),$a.waitFor(i).next((()=>s))}getTargetCount(e){return $a.resolve(this.targetCount)}getTargetData(e,t){const n=this.Ts.get(t)||null;return $a.resolve(n)}addMatchingKeys(e,t,n){return this.As.ss(t,n),$a.resolve()}removeMatchingKeys(e,t,n){this.As.os(t,n);const s=this.persistence.referenceDelegate,i=[];return s&&t.forEach((t=>{i.push(s.markPotentiallyOrphaned(e,t))})),$a.waitFor(i)}removeMatchingKeysForTargetId(e,t){return this.As.us(t),$a.resolve()}getMatchingKeysForTargetId(e,t){const n=this.As.hs(t);return $a.resolve(n)}containsKey(e,t){return $a.resolve(this.As.containsKey(t))}}class ol{constructor(e,t){this.bs={},this.overlays={},this.Ps=new Ga(0),this.vs=!1,this.vs=!0,this.referenceDelegate=e(this),this.Vs=new rl(this),this.indexManager=new Hh,this.remoteDocumentCache=function(e){return new sl(e)}((e=>this.referenceDelegate.Ss(e))),this.wt=new zh(t),this.Ds=new Yh(this.wt)}start(){return Promise.resolve()}shutdown(){return this.vs=!1,Promise.resolve()}get started(){return this.vs}setDatabaseDeletedListener(){}setNetworkEnabled(){}getIndexManager(e){return this.indexManager}getDocumentOverlayCache(e){let t=this.overlays[e.toKey()];return t||(t=new Zh,this.overlays[e.toKey()]=t),t}getMutationQueue(e,t){let n=this.bs[e.toKey()];return n||(n=new nl(t,this.referenceDelegate),this.bs[e.toKey()]=n),n}getTargetCache(){return this.Vs}getRemoteDocumentCache(){return this.remoteDocumentCache}getBundleCache(){return this.Ds}runTransaction(e,t,n){fa("MemoryPersistence","Starting transaction:",e);const s=new al(this.Ps.next());return this.referenceDelegate.Cs(),n(s).next((e=>this.referenceDelegate.xs(s).next((()=>e)))).toPromise().then((e=>(s.raiseOnCommittedEvent(),e)))}Ns(e,t){return $a.or(Object.values(this.bs).map((n=>()=>n.containsKey(e,t))))}}class al extends class{constructor(){this.onCommittedListeners=[]}addOnCommittedListener(e){this.onCommittedListeners.push(e)}raiseOnCommittedEvent(){this.onCommittedListeners.forEach((e=>e()))}}{constructor(e){super(),this.currentSequenceNumber=e}}class cl{constructor(e){this.persistence=e,this.ks=new el,this.Os=null}static Ms(e){return new cl(e)}get Fs(){if(this.Os)return this.Os;throw ya()}addReference(e,t,n){return this.ks.addReference(n,t),this.Fs.delete(n.toString()),$a.resolve()}removeReference(e,t,n){return this.ks.removeReference(n,t),this.Fs.add(n.toString()),$a.resolve()}markPotentiallyOrphaned(e,t){return this.Fs.add(t.toString()),$a.resolve()}removeTarget(e,t){this.ks.us(t.targetId).forEach((e=>this.Fs.add(e.toString())));const n=this.persistence.getTargetCache();return n.getMatchingKeysForTargetId(e,t.targetId).next((e=>{e.forEach((e=>this.Fs.add(e.toString())))})).next((()=>n.removeTargetData(e,t)))}Cs(){this.Os=new Set}xs(e){const t=this.persistence.getRemoteDocumentCache().newChangeBuffer();return $a.forEach(this.Fs,(n=>{const s=Ba.fromPath(n);return this.$s(e,s).next((e=>{e||t.removeEntry(s,Ma.min())}))})).next((()=>(this.Os=null,t.apply(e))))}updateLimboDocument(e,t){return this.$s(e,t).next((e=>{e?this.Fs.delete(t.toString()):this.Fs.add(t.toString())}))}Ss(e){return 0}$s(e,t){return $a.or([()=>$a.resolve(this.ks.containsKey(t)),()=>this.persistence.getTargetCache().containsKey(e,t),()=>this.persistence.Ns(e,t)])}}class ul{constructor(e,t,n,s){this.targetId=e,this.fromCache=t,this.Pi=n,this.vi=s}static Vi(e,t){let n=eh(),s=eh();for(const e of t.docChanges)switch(e.type){case 0:n=n.add(e.doc.key);break;case 1:s=s.add(e.doc.key)}return new ul(e,t.fromCache,n,s)}}class hl{constructor(){this.Si=!1}initialize(e,t){this.Di=e,this.indexManager=t,this.Si=!0}getDocumentsMatchingQuery(e,t,n,s){return this.Ci(e,t).next((i=>i||this.xi(e,t,s,n))).next((n=>n||this.Ni(e,t)))}Ci(e,t){return $a.resolve(null)}xi(e,t,n,s){return function(e){return 0===e.filters.length&&null===e.limit&&null==e.startAt&&null==e.endAt&&(0===e.explicitOrderBy.length||1===e.explicitOrderBy.length&&e.explicitOrderBy[0].field.isKeyField())}(t)||s.isEqual(Ma.min())?this.Ni(e,t):this.Di.getDocuments(e,n).next((i=>{const r=this.ki(t,i);return this.Oi(t,r,n,s)?this.Ni(e,t):(da()<=D.DEBUG&&fa("QueryEngine","Re-using previous result from %s to execute query: %s",s.toString(),iu(t)),this.Mi(e,r,t,function(e,t){const n=e.toTimestamp().seconds,s=e.toTimestamp().nanoseconds+1,i=Ma.fromTimestamp(1e9===s?new Pa(n+1,0):new Pa(n,s));return new qa(i,Ba.empty(),t)}(s,-1)))}))}ki(e,t){let n=new ec(ou(e));return t.forEach(((t,s)=>{ru(e,s)&&(n=n.add(s))})),n}Oi(e,t,n,s){if(null===e.limit)return!1;if(n.size!==t.size)return!0;const i="F"===e.limitType?t.last():t.first();return!!i&&(i.hasPendingWrites||i.version.compareTo(s)>0)}Ni(e,t){return da()<=D.DEBUG&&fa("QueryEngine","Using full collection scan to execute query:",iu(t)),this.Di.getDocumentsMatchingQuery(e,t,qa.min())}Mi(e,t,n,s){return this.Di.getDocumentsMatchingQuery(e,n,s).next((e=>(t.forEach((t=>{e=e.insert(t.key,t)})),e)))}}class ll{constructor(e,t,n,s){this.persistence=e,this.Fi=t,this.wt=s,this.$i=new Ja(Oa),this.Bi=new zu((e=>Mc(e)),xc),this.Li=new Map,this.Ui=e.getRemoteDocumentCache(),this.Vs=e.getTargetCache(),this.Ds=e.getBundleCache(),this.qi(n)}qi(e){this.documentOverlayCache=this.persistence.getDocumentOverlayCache(e),this.indexManager=this.persistence.getIndexManager(e),this.mutationQueue=this.persistence.getMutationQueue(e,this.indexManager),this.localDocuments=new Jh(this.Ui,this.mutationQueue,this.documentOverlayCache,this.indexManager),this.Ui.setIndexManager(this.indexManager),this.Fi.initialize(this.localDocuments,this.indexManager)}collectGarbage(e){return this.persistence.runTransaction("Collect garbage","readwrite-primary",(t=>e.collect(t,this.$i)))}}async function dl(e,t){const n=wa(e);return await n.persistence.runTransaction("Handle user change","readonly",(e=>{let s;return n.mutationQueue.getAllMutationBatches(e).next((i=>(s=i,n.qi(t),n.mutationQueue.getAllMutationBatches(e)))).next((t=>{const i=[],r=[];let o=eh();for(const e of s){i.push(e.batchId);for(const t of e.mutations)o=o.add(t.key)}for(const e of t){r.push(e.batchId);for(const t of e.mutations)o=o.add(t.key)}return n.localDocuments.getDocuments(e,o).next((e=>({Ki:e,removedBatchIds:i,addedBatchIds:r})))}))}))}function fl(e){const t=wa(e);return t.persistence.runTransaction("Get last remote snapshot version","readonly",(e=>t.Vs.getLastRemoteSnapshotVersion(e)))}function pl(e,t){const n=wa(e);return n.persistence.runTransaction("Get next mutation batch","readonly",(e=>(void 0===t&&(t=-1),n.mutationQueue.getNextMutationBatchAfterBatchId(e,t))))}async function ml(e,t,n){const s=wa(e),i=s.$i.get(t),r=n?"readwrite":"readwrite-primary";try{n||await s.persistence.runTransaction("Release target",r,(e=>s.persistence.referenceDelegate.removeTarget(e,i)))}catch(e){if(!Ha(e))throw e;fa("LocalStore",`Failed to update sequence numbers for target ${t}: ${e}`)}s.$i=s.$i.remove(t),s.Bi.delete(i.target)}function gl(e,t,n){const s=wa(e);let i=Ma.min(),r=eh();return s.persistence.runTransaction("Execute query","readonly",(e=>function(e,t,n){const s=wa(e),i=s.Bi.get(n);return void 0!==i?$a.resolve(s.$i.get(i)):s.Vs.getTargetData(t,n)}(s,e,tu(t)).next((t=>{if(t)return i=t.lastLimboFreeSnapshotVersion,s.Vs.getMatchingKeysForTargetId(e,t.targetId).next((e=>{r=e}))})).next((()=>s.Fi.getDocumentsMatchingQuery(e,t,n?i:Ma.min(),n?r:eh()))).next((e=>(function(e,t,n){let s=Ma.min();n.forEach(((e,t)=>{t.readTime.compareTo(s)>0&&(s=t.readTime)})),e.Li.set(t,s)}(s,function(e){return e.collectionGroup||(e.path.length%2==1?e.path.lastSegment():e.path.get(e.path.length-2))}(t),e),{documents:e,ji:r})))))}class yl{constructor(){this.activeTargetIds=nh()}Xi(e){this.activeTargetIds=this.activeTargetIds.add(e)}Zi(e){this.activeTargetIds=this.activeTargetIds.delete(e)}Yi(){const e={activeTargetIds:this.activeTargetIds.toArray(),updateTimeMs:Date.now()};return JSON.stringify(e)}}class vl{constructor(){this.Fr=new yl,this.$r={},this.onlineStateHandler=null,this.sequenceNumberHandler=null}addPendingMutation(e){}updateMutationState(e,t,n){}addLocalQueryTarget(e){return this.Fr.Xi(e),this.$r[e]||"not-current"}updateQueryState(e,t,n){this.$r[e]=t}removeLocalQueryTarget(e){this.Fr.Zi(e)}isLocalQueryTarget(e){return this.Fr.activeTargetIds.has(e)}clearQueryState(e){delete this.$r[e]}getAllActiveQueryTargets(){return this.Fr.activeTargetIds}isActiveQueryTarget(e){return this.Fr.activeTargetIds.has(e)}start(){return this.Fr=new yl,Promise.resolve()}handleUserChange(e,t,n){}setOnlineState(e){}shutdown(){}writeSequenceNumber(e){}notifyBundleLoaded(e){}}class wl{Br(e){}shutdown(){}}class El{constructor(){this.Lr=()=>this.Ur(),this.qr=()=>this.Kr(),this.Gr=[],this.Qr()}Br(e){this.Gr.push(e)}shutdown(){window.removeEventListener("online",this.Lr),window.removeEventListener("offline",this.qr)}Qr(){window.addEventListener("online",this.Lr),window.addEventListener("offline",this.qr)}Ur(){fa("ConnectivityMonitor","Network connectivity changed: AVAILABLE");for(const e of this.Gr)e(0)}Kr(){fa("ConnectivityMonitor","Network connectivity changed: UNAVAILABLE");for(const e of this.Gr)e(1)}static V(){return"undefined"!=typeof window&&void 0!==window.addEventListener&&void 0!==window.removeEventListener}}const Il={BatchGetDocuments:"batchGet",Commit:"commit",RunQuery:"runQuery"};class Tl{constructor(e){this.jr=e.jr,this.Wr=e.Wr}zr(e){this.Hr=e}Jr(e){this.Yr=e}onMessage(e){this.Xr=e}close(){this.Wr()}send(e){this.jr(e)}Zr(){this.Hr()}eo(e){this.Yr(e)}no(e){this.Xr(e)}}class bl extends class{constructor(e){this.databaseInfo=e,this.databaseId=e.databaseId;const t=e.ssl?"https":"http";this.so=t+"://"+e.host,this.io="projects/"+this.databaseId.projectId+"/databases/"+this.databaseId.database+"/documents"}ro(e,t,n,s,i){const r=this.oo(e,t);fa("RestConnection","Sending: ",r,n);const o={};return this.uo(o,s,i),this.co(e,r,o,n).then((e=>(fa("RestConnection","Received: ",e),e)),(t=>{throw ma("RestConnection",`${e} failed with error: `,t,"url: ",r,"request:",n),t}))}ao(e,t,n,s,i,r){return this.ro(e,t,n,s,i)}uo(e,t,n){e["X-Goog-Api-Client"]="gl-js/ fire/"+ha,e["Content-Type"]="text/plain",this.databaseInfo.appId&&(e["X-Firebase-GMPID"]=this.databaseInfo.appId),t&&t.headers.forEach(((t,n)=>e[n]=t)),n&&n.headers.forEach(((t,n)=>e[n]=t))}oo(e,t){const n=Il[e];return`${this.so}/v1/${t}:${n}`}}{constructor(e){super(e),this.forceLongPolling=e.forceLongPolling,this.autoDetectLongPolling=e.autoDetectLongPolling,this.useFetchStreams=e.useFetchStreams}co(e,t,n,s){return new Promise(((i,r)=>{const o=new aa;o.listenOnce(na.COMPLETE,(()=>{try{switch(o.getLastErrorCode()){case ta.NO_ERROR:const t=o.getResponseJson();fa("Connection","XHR received:",JSON.stringify(t)),i(t);break;case ta.TIMEOUT:fa("Connection",'RPC "'+e+'" timed out'),r(new Ia(Ea.DEADLINE_EXCEEDED,"Request time out"));break;case ta.HTTP_ERROR:const n=o.getStatus();if(fa("Connection",'RPC "'+e+'" failed with status:',n,"response text:",o.getResponseText()),n>0){const e=o.getResponseJson().error;if(e&&e.status&&e.message){const t=function(e){const t=e.toLowerCase().replace(/_/g,"-");return Object.values(Ea).indexOf(t)>=0?t:Ea.UNKNOWN}(e.status);r(new Ia(t,e.message))}else r(new Ia(Ea.UNKNOWN,"Server responded with status "+o.getStatus()))}else r(new Ia(Ea.UNAVAILABLE,"Connection failed."));break;default:ya()}}finally{fa("Connection",'RPC "'+e+'" completed.')}}));const a=JSON.stringify(s);o.send(t,"POST",a,n,15)}))}ho(e,t,n){const s=[this.so,"/","google.firestore.v1.Firestore","/",e,"/channel"],i=Zo(),r=ea(),o={httpSessionIdParam:"gsessionid",initMessageHeaders:{},messageUrlParams:{database:`projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`},sendRawJson:!0,supportsCrossDomainXhr:!0,internalChannelParams:{forwardChannelRequestTimeoutMs:6e5},forceLongPolling:this.forceLongPolling,detectBufferingProxy:this.autoDetectLongPolling};this.useFetchStreams&&(o.xmlHttpFactory=new ra({})),this.uo(o.initMessageHeaders,t,n),h()||d()||u().indexOf("Electron/")>=0||f()||u().indexOf("MSAppHost/")>=0||l()||(o.httpHeadersOverwriteParam="$httpHeaders");const a=s.join("");fa("Connection","Creating WebChannel: "+a,o);const c=i.createWebChannel(a,o);let p=!1,m=!1;const g=new Tl({jr:e=>{m?fa("Connection","Not sending because WebChannel is closed:",e):(p||(fa("Connection","Opening WebChannel transport."),c.open(),p=!0),fa("Connection","WebChannel sending:",e),c.send(e))},Wr:()=>c.close()}),y=(e,t,n)=>{e.listen(t,(e=>{try{n(e)}catch(e){setTimeout((()=>{throw e}),0)}}))};return y(c,oa.EventType.OPEN,(()=>{m||fa("Connection","WebChannel transport opened.")})),y(c,oa.EventType.CLOSE,(()=>{m||(m=!0,fa("Connection","WebChannel transport closed"),g.eo())})),y(c,oa.EventType.ERROR,(e=>{m||(m=!0,ma("Connection","WebChannel transport errored:",e),g.eo(new Ia(Ea.UNAVAILABLE,"The operation could not be completed")))})),y(c,oa.EventType.MESSAGE,(e=>{var t;if(!m){const n=e.data[0];va(!!n);const s=n,i=s.error||(null===(t=s[0])||void 0===t?void 0:t.error);if(i){fa("Connection","WebChannel received error:",i);const e=i.status;let t=function(e){const t=Bu[e];if(void 0!==t)return qu(t)}(e),n=i.message;void 0===t&&(t=Ea.INTERNAL,n="Unknown error status: "+e+" with message "+i.message),m=!0,g.eo(new Ia(t,n)),c.close()}else fa("Connection","WebChannel received:",n),g.no(n)}})),y(r,sa.STAT_EVENT,(e=>{e.stat===ia.PROXY?fa("Connection","Detected buffering proxy"):e.stat===ia.NOPROXY&&fa("Connection","Detected no buffering proxy")})),setTimeout((()=>{g.Zr()}),0),g}}function _l(){return"undefined"!=typeof document?document:null}function Sl(e){return new ph(e,!0)}class Cl{constructor(e,t,n=1e3,s=1.5,i=6e4){this.js=e,this.timerId=t,this.lo=n,this.fo=s,this._o=i,this.wo=0,this.mo=null,this.yo=Date.now(),this.reset()}reset(){this.wo=0}po(){this.wo=this._o}Io(e){this.cancel();const t=Math.floor(this.wo+this.To()),n=Math.max(0,Date.now()-this.yo),s=Math.max(0,t-n);s>0&&fa("ExponentialBackoff",`Backing off for ${s} ms (base delay: ${this.wo} ms, delay with jitter: ${t} ms, last attempt: ${n} ms ago)`),this.mo=this.js.enqueueAfterDelay(this.timerId,s,(()=>(this.yo=Date.now(),e()))),this.wo*=this.fo,this.wo<this.lo&&(this.wo=this.lo),this.wo>this._o&&(this.wo=this._o)}Eo(){null!==this.mo&&(this.mo.skipDelay(),this.mo=null)}cancel(){null!==this.mo&&(this.mo.cancel(),this.mo=null)}To(){return(Math.random()-.5)*this.wo}}class kl{constructor(e,t,n,s,i,r,o,a){this.js=e,this.Ao=n,this.Ro=s,this.bo=i,this.authCredentialsProvider=r,this.appCheckCredentialsProvider=o,this.listener=a,this.state=0,this.Po=0,this.vo=null,this.Vo=null,this.stream=null,this.So=new Cl(e,t)}Do(){return 1===this.state||5===this.state||this.Co()}Co(){return 2===this.state||3===this.state}start(){4!==this.state?this.auth():this.xo()}async stop(){this.Do()&&await this.close(0)}No(){this.state=0,this.So.reset()}ko(){this.Co()&&null===this.vo&&(this.vo=this.js.enqueueAfterDelay(this.Ao,6e4,(()=>this.Oo())))}Mo(e){this.Fo(),this.stream.send(e)}async Oo(){if(this.Co())return this.close(0)}Fo(){this.vo&&(this.vo.cancel(),this.vo=null)}$o(){this.Vo&&(this.Vo.cancel(),this.Vo=null)}async close(e,t){this.Fo(),this.$o(),this.So.cancel(),this.Po++,4!==e?this.So.reset():t&&t.code===Ea.RESOURCE_EXHAUSTED?(pa(t.toString()),pa("Using maximum backoff delay to prevent overloading the backend."),this.So.po()):t&&t.code===Ea.UNAUTHENTICATED&&3!==this.state&&(this.authCredentialsProvider.invalidateToken(),this.appCheckCredentialsProvider.invalidateToken()),null!==this.stream&&(this.Bo(),this.stream.close(),this.stream=null),this.state=e,await this.listener.Jr(t)}Bo(){}auth(){this.state=1;const e=this.Lo(this.Po),t=this.Po;Promise.all([this.authCredentialsProvider.getToken(),this.appCheckCredentialsProvider.getToken()]).then((([e,n])=>{this.Po===t&&this.Uo(e,n)}),(t=>{e((()=>{const e=new Ia(Ea.UNKNOWN,"Fetching auth token failed: "+t.message);return this.qo(e)}))}))}Uo(e,t){const n=this.Lo(this.Po);this.stream=this.Ko(e,t),this.stream.zr((()=>{n((()=>(this.state=2,this.Vo=this.js.enqueueAfterDelay(this.Ro,1e4,(()=>(this.Co()&&(this.state=3),Promise.resolve()))),this.listener.zr())))})),this.stream.Jr((e=>{n((()=>this.qo(e)))})),this.stream.onMessage((e=>{n((()=>this.onMessage(e)))}))}xo(){this.state=5,this.So.Io((async()=>{this.state=0,this.start()}))}qo(e){return fa("PersistentStream",`close with error: ${e}`),this.stream=null,this.close(4,e)}Lo(e){return t=>{this.js.enqueueAndForget((()=>this.Po===e?t():(fa("PersistentStream","stream callback skipped by getCloseGuardedDispatcher."),Promise.resolve())))}}}class Al extends kl{constructor(e,t,n,s,i,r){super(e,"listen_stream_connection_backoff","listen_stream_idle","health_check_timeout",t,n,s,r),this.wt=i}Ko(e,t){return this.bo.ho("Listen",e,t)}onMessage(e){this.So.reset();const t=function(e,t){let n;if("targetChange"in t){t.targetChange;const s=function(e){return"NO_CHANGE"===e?0:"ADD"===e?1:"REMOVE"===e?2:"CURRENT"===e?3:"RESET"===e?4:ya()}(t.targetChange.targetChangeType||"NO_CHANGE"),i=t.targetChange.targetIds||[],r=function(e,t){return e.dt?(va(void 0===t||"string"==typeof t),sc.fromBase64String(t||"")):(va(void 0===t||t instanceof Uint8Array),sc.fromUint8Array(t||new Uint8Array))}(e,t.targetChange.resumeToken),o=t.targetChange.cause,a=o&&function(e){const t=void 0===e.code?Ea.UNKNOWN:qu(e.code);return new Ia(t,e.message||"")}(o);n=new ah(s,i,r,a||null)}else if("documentChange"in t){t.documentChange;const s=t.documentChange;s.document,s.document.name,s.document.updateTime;const i=Th(e,s.document.name),r=vh(s.document.updateTime),o=new Dc({mapValue:{fields:s.document.fields}}),a=Oc.newFoundDocument(i,r,o),c=s.targetIds||[],u=s.removedTargetIds||[];n=new rh(c,u,a.key,a)}else if("documentDelete"in t){t.documentDelete;const s=t.documentDelete;s.document;const i=Th(e,s.document),r=s.readTime?vh(s.readTime):Ma.min(),o=Oc.newNoDocument(i,r),a=s.removedTargetIds||[];n=new rh([],a,o.key,o)}else if("documentRemove"in t){t.documentRemove;const s=t.documentRemove;s.document;const i=Th(e,s.document),r=s.removedTargetIds||[];n=new rh([],r,i,null)}else{if(!("filter"in t))return ya();{t.filter;const e=t.filter;e.targetId;const s=e.count||0,i=new Vu(s),r=e.targetId;n=new oh(r,i)}}return n}(this.wt,e),n=function(e){if(!("targetChange"in e))return Ma.min();const t=e.targetChange;return t.targetIds&&t.targetIds.length?Ma.min():t.readTime?vh(t.readTime):Ma.min()}(e);return this.listener.Go(t,n)}Qo(e){const t={};t.database=_h(this.wt),t.addTarget=function(e,t){let n;const s=t.target;return n=Uc(s)?{documents:kh(e,s)}:{query:Ah(e,s)},n.targetId=t.targetId,t.resumeToken.approximateByteSize()>0?n.resumeToken=gh(e,t.resumeToken):t.snapshotVersion.compareTo(Ma.min())>0&&(n.readTime=mh(e,t.snapshotVersion.toTimestamp())),n}(this.wt,e);const n=function(e,t){const n=function(e,t){switch(t){case 0:return null;case 1:return"existence-filter-mismatch";case 2:return"limbo-document";default:return ya()}}(0,t.purpose);return null==n?null:{"goog-listen-tags":n}}(this.wt,e);n&&(t.labels=n),this.Mo(t)}jo(e){const t={};t.database=_h(this.wt),t.removeTarget=e,this.Mo(t)}}class Nl extends kl{constructor(e,t,n,s,i,r){super(e,"write_stream_connection_backoff","write_stream_idle","health_check_timeout",t,n,s,r),this.wt=i,this.Wo=!1}get zo(){return this.Wo}start(){this.Wo=!1,this.lastStreamToken=void 0,super.start()}Bo(){this.Wo&&this.Ho([])}Ko(e,t){return this.bo.ho("Write",e,t)}onMessage(e){if(va(!!e.streamToken),this.lastStreamToken=e.streamToken,this.Wo){this.So.reset();const t=function(e,t){return e&&e.length>0?(va(void 0!==t),e.map((e=>function(e,t){let n=e.updateTime?vh(e.updateTime):vh(t);return n.isEqual(Ma.min())&&(n=vh(t)),new bu(n,e.transformResults||[])}(e,t)))):[]}(e.writeResults,e.commitTime),n=vh(e.commitTime);return this.listener.Jo(n,t)}return va(!e.writeResults||0===e.writeResults.length),this.Wo=!0,this.listener.Yo()}Xo(){const e={};e.database=_h(this.wt),this.Mo(e)}Ho(e){const t={streamToken:this.lastStreamToken,writes:e.map((e=>function(e,t){let n;if(t instanceof Ou)n={update:Ch(e,t.key,t.value)};else if(t instanceof Uu)n={delete:Ih(e,t.key)};else if(t instanceof Lu)n={update:Ch(e,t.key,t.data),updateMask:Uh(t.fieldMask)};else{if(!(t instanceof Fu))return ya();n={verify:Ih(e,t.key)}}return t.fieldTransforms.length>0&&(n.updateTransforms=t.fieldTransforms.map((e=>function(e,t){const n=t.transform;if(n instanceof mu)return{fieldPath:t.field.canonicalString(),setToServerValue:"REQUEST_TIME"};if(n instanceof gu)return{fieldPath:t.field.canonicalString(),appendMissingElements:{values:n.elements}};if(n instanceof vu)return{fieldPath:t.field.canonicalString(),removeAllFromArray:{values:n.elements}};if(n instanceof Eu)return{fieldPath:t.field.canonicalString(),increment:n._t};throw ya()}(0,e)))),t.precondition.isNone||(n.currentDocument=function(e,t){return void 0!==t.updateTime?{updateTime:yh(e,t.updateTime)}:void 0!==t.exists?{exists:t.exists}:ya()}(e,t.precondition)),n}(this.wt,e)))};this.Mo(t)}}class Dl extends class{}{constructor(e,t,n,s){super(),this.authCredentials=e,this.appCheckCredentials=t,this.bo=n,this.wt=s,this.Zo=!1}tu(){if(this.Zo)throw new Ia(Ea.FAILED_PRECONDITION,"The client has already been terminated.")}ro(e,t,n){return this.tu(),Promise.all([this.authCredentials.getToken(),this.appCheckCredentials.getToken()]).then((([s,i])=>this.bo.ro(e,t,n,s,i))).catch((e=>{throw"FirebaseError"===e.name?(e.code===Ea.UNAUTHENTICATED&&(this.authCredentials.invalidateToken(),this.appCheckCredentials.invalidateToken()),e):new Ia(Ea.UNKNOWN,e.toString())}))}ao(e,t,n,s){return this.tu(),Promise.all([this.authCredentials.getToken(),this.appCheckCredentials.getToken()]).then((([i,r])=>this.bo.ao(e,t,n,i,r,s))).catch((e=>{throw"FirebaseError"===e.name?(e.code===Ea.UNAUTHENTICATED&&(this.authCredentials.invalidateToken(),this.appCheckCredentials.invalidateToken()),e):new Ia(Ea.UNKNOWN,e.toString())}))}terminate(){this.Zo=!0}}class Rl{constructor(e,t){this.asyncQueue=e,this.onlineStateHandler=t,this.state="Unknown",this.eu=0,this.nu=null,this.su=!0}iu(){0===this.eu&&(this.ru("Unknown"),this.nu=this.asyncQueue.enqueueAfterDelay("online_state_timeout",1e4,(()=>(this.nu=null,this.ou("Backend didn't respond within 10 seconds."),this.ru("Offline"),Promise.resolve()))))}uu(e){"Online"===this.state?this.ru("Unknown"):(this.eu++,this.eu>=1&&(this.cu(),this.ou(`Connection failed 1 times. Most recent error: ${e.toString()}`),this.ru("Offline")))}set(e){this.cu(),this.eu=0,"Online"===e&&(this.su=!1),this.ru(e)}ru(e){e!==this.state&&(this.state=e,this.onlineStateHandler(e))}ou(e){const t=`Could not reach Cloud Firestore backend. ${e}\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;this.su?(pa(t),this.su=!1):fa("OnlineStateTracker",t)}cu(){null!==this.nu&&(this.nu.cancel(),this.nu=null)}}class Ol{constructor(e,t,n,s,i){this.localStore=e,this.datastore=t,this.asyncQueue=n,this.remoteSyncer={},this.au=[],this.hu=new Map,this.lu=new Set,this.fu=[],this.du=i,this.du.Br((e=>{n.enqueueAndForget((async()=>{jl(this)&&(fa("RemoteStore","Restarting streams for network reachability change."),await async function(e){const t=wa(e);t.lu.add(4),await Pl(t),t._u.set("Unknown"),t.lu.delete(4),await Ll(t)}(this))}))})),this._u=new Rl(n,s)}}async function Ll(e){if(jl(e))for(const t of e.fu)await t(!0)}async function Pl(e){for(const t of e.fu)await t(!1)}function Ml(e,t){const n=wa(e);n.hu.has(t.targetId)||(n.hu.set(t.targetId,t),Bl(n)?Vl(n):id(n).Co()&&Ul(n,t))}function xl(e,t){const n=wa(e),s=id(n);n.hu.delete(t),s.Co()&&Fl(n,t),0===n.hu.size&&(s.Co()?s.ko():jl(n)&&n._u.set("Unknown"))}function Ul(e,t){e.wu.Nt(t.targetId),id(e).Qo(t)}function Fl(e,t){e.wu.Nt(t),id(e).jo(t)}function Vl(e){e.wu=new uh({getRemoteKeysForTarget:t=>e.remoteSyncer.getRemoteKeysForTarget(t),te:t=>e.hu.get(t)||null}),id(e).start(),e._u.iu()}function Bl(e){return jl(e)&&!id(e).Do()&&e.hu.size>0}function jl(e){return 0===wa(e).lu.size}function ql(e){e.wu=void 0}async function zl(e){e.hu.forEach(((t,n)=>{Ul(e,t)}))}async function Kl(e,t){ql(e),Bl(e)?(e._u.uu(t),Vl(e)):e._u.set("Unknown")}async function $l(e,t,n){if(e._u.set("Online"),t instanceof ah&&2===t.state&&t.cause)try{await async function(e,t){const n=t.cause;for(const s of t.targetIds)e.hu.has(s)&&(await e.remoteSyncer.rejectListen(s,n),e.hu.delete(s),e.wu.removeTarget(s))}(e,t)}catch(n){fa("RemoteStore","Failed to remove targets %s: %s ",t.targetIds.join(","),n),await Hl(e,n)}else if(t instanceof rh?e.wu.Ut(t):t instanceof oh?e.wu.zt(t):e.wu.Gt(t),!n.isEqual(Ma.min()))try{const t=await fl(e.localStore);n.compareTo(t)>=0&&await function(e,t){const n=e.wu.Yt(t);return n.targetChanges.forEach(((n,s)=>{if(n.resumeToken.approximateByteSize()>0){const i=e.hu.get(s);i&&e.hu.set(s,i.withResumeToken(n.resumeToken,t))}})),n.targetMismatches.forEach((t=>{const n=e.hu.get(t);if(!n)return;e.hu.set(t,n.withResumeToken(sc.EMPTY_BYTE_STRING,n.snapshotVersion)),Fl(e,t);const s=new qh(n.target,t,1,n.sequenceNumber);Ul(e,s)})),e.remoteSyncer.applyRemoteEvent(n)}(e,n)}catch(t){fa("RemoteStore","Failed to raise snapshot:",t),await Hl(e,t)}}async function Hl(e,t,n){if(!Ha(t))throw t;e.lu.add(1),await Pl(e),e._u.set("Offline"),n||(n=()=>fl(e.localStore)),e.asyncQueue.enqueueRetryable((async()=>{fa("RemoteStore","Retrying IndexedDB access"),await n(),e.lu.delete(1),await Ll(e)}))}function Gl(e,t){return t().catch((n=>Hl(e,n,t)))}async function Wl(e){const t=wa(e),n=rd(t);let s=t.au.length>0?t.au[t.au.length-1].batchId:-1;for(;Ql(t);)try{const e=await pl(t.localStore,s);if(null===e){0===t.au.length&&n.ko();break}s=e.batchId,Xl(t,e)}catch(e){await Hl(t,e)}Jl(t)&&Yl(t)}function Ql(e){return jl(e)&&e.au.length<10}function Xl(e,t){e.au.push(t);const n=rd(e);n.Co()&&n.zo&&n.Ho(t.mutations)}function Jl(e){return jl(e)&&!rd(e).Do()&&e.au.length>0}function Yl(e){rd(e).start()}async function Zl(e){rd(e).Xo()}async function ed(e){const t=rd(e);for(const n of e.au)t.Ho(n.mutations)}async function td(e,t,n){const s=e.au.shift(),i=Bh.from(s,t,n);await Gl(e,(()=>e.remoteSyncer.applySuccessfulWrite(i))),await Wl(e)}async function nd(e,t){t&&rd(e).zo&&await async function(e,t){if(function(e){switch(e){default:return ya();case Ea.CANCELLED:case Ea.UNKNOWN:case Ea.DEADLINE_EXCEEDED:case Ea.RESOURCE_EXHAUSTED:case Ea.INTERNAL:case Ea.UNAVAILABLE:case Ea.UNAUTHENTICATED:return!1;case Ea.INVALID_ARGUMENT:case Ea.NOT_FOUND:case Ea.ALREADY_EXISTS:case Ea.PERMISSION_DENIED:case Ea.FAILED_PRECONDITION:case Ea.ABORTED:case Ea.OUT_OF_RANGE:case Ea.UNIMPLEMENTED:case Ea.DATA_LOSS:return!0}}(n=t.code)&&n!==Ea.ABORTED){const n=e.au.shift();rd(e).No(),await Gl(e,(()=>e.remoteSyncer.rejectFailedWrite(n.batchId,t))),await Wl(e)}var n}(e,t),Jl(e)&&Yl(e)}async function sd(e,t){const n=wa(e);n.asyncQueue.verifyOperationInProgress(),fa("RemoteStore","RemoteStore received new credentials");const s=jl(n);n.lu.add(3),await Pl(n),s&&n._u.set("Unknown"),await n.remoteSyncer.handleCredentialChange(t),n.lu.delete(3),await Ll(n)}function id(e){return e.mu||(e.mu=function(e,t,n){const s=wa(e);return s.tu(),new Al(t,s.bo,s.authCredentials,s.appCheckCredentials,s.wt,n)}(e.datastore,e.asyncQueue,{zr:zl.bind(null,e),Jr:Kl.bind(null,e),Go:$l.bind(null,e)}),e.fu.push((async t=>{t?(e.mu.No(),Bl(e)?Vl(e):e._u.set("Unknown")):(await e.mu.stop(),ql(e))}))),e.mu}function rd(e){return e.gu||(e.gu=function(e,t,n){const s=wa(e);return s.tu(),new Nl(t,s.bo,s.authCredentials,s.appCheckCredentials,s.wt,n)}(e.datastore,e.asyncQueue,{zr:Zl.bind(null,e),Jr:nd.bind(null,e),Yo:ed.bind(null,e),Jo:td.bind(null,e)}),e.fu.push((async t=>{t?(e.gu.No(),await Wl(e)):(await e.gu.stop(),e.au.length>0&&(fa("RemoteStore",`Stopping write stream with ${e.au.length} pending writes`),e.au=[]))}))),e.gu}class od{constructor(e,t,n,s,i){this.asyncQueue=e,this.timerId=t,this.targetTimeMs=n,this.op=s,this.removalCallback=i,this.deferred=new Ta,this.then=this.deferred.promise.then.bind(this.deferred.promise),this.deferred.promise.catch((e=>{}))}static createAndSchedule(e,t,n,s,i){const r=Date.now()+n,o=new od(e,t,r,s,i);return o.start(n),o}start(e){this.timerHandle=setTimeout((()=>this.handleDelayElapsed()),e)}skipDelay(){return this.handleDelayElapsed()}cancel(e){null!==this.timerHandle&&(this.clearTimeout(),this.deferred.reject(new Ia(Ea.CANCELLED,"Operation cancelled"+(e?": "+e:""))))}handleDelayElapsed(){this.asyncQueue.enqueueAndForget((()=>null!==this.timerHandle?(this.clearTimeout(),this.op().then((e=>this.deferred.resolve(e)))):Promise.resolve()))}clearTimeout(){null!==this.timerHandle&&(this.removalCallback(this),clearTimeout(this.timerHandle),this.timerHandle=null)}}function ad(e,t){if(pa("AsyncQueue",`${t}: ${e}`),Ha(e))return new Ia(Ea.UNAVAILABLE,`${t}: ${e}`);throw e}class cd{constructor(e){this.comparator=e?(t,n)=>e(t,n)||Ba.comparator(t.key,n.key):(e,t)=>Ba.comparator(e.key,t.key),this.keyedMap=Gu(),this.sortedSet=new Ja(this.comparator)}static emptySet(e){return new cd(e.comparator)}has(e){return null!=this.keyedMap.get(e)}get(e){return this.keyedMap.get(e)}first(){return this.sortedSet.minKey()}last(){return this.sortedSet.maxKey()}isEmpty(){return this.sortedSet.isEmpty()}indexOf(e){const t=this.keyedMap.get(e);return t?this.sortedSet.indexOf(t):-1}get size(){return this.sortedSet.size}forEach(e){this.sortedSet.inorderTraversal(((t,n)=>(e(t),!1)))}add(e){const t=this.delete(e.key);return t.copy(t.keyedMap.insert(e.key,e),t.sortedSet.insert(e,null))}delete(e){const t=this.get(e);return t?this.copy(this.keyedMap.remove(e),this.sortedSet.remove(t)):this}isEqual(e){if(!(e instanceof cd))return!1;if(this.size!==e.size)return!1;const t=this.sortedSet.getIterator(),n=e.sortedSet.getIterator();for(;t.hasNext();){const e=t.getNext().key,s=n.getNext().key;if(!e.isEqual(s))return!1}return!0}toString(){const e=[];return this.forEach((t=>{e.push(t.toString())})),0===e.length?"DocumentSet ()":"DocumentSet (\n  "+e.join("  \n")+"\n)"}copy(e,t){const n=new cd;return n.comparator=this.comparator,n.keyedMap=e,n.sortedSet=t,n}}class ud{constructor(){this.yu=new Ja(Ba.comparator)}track(e){const t=e.doc.key,n=this.yu.get(t);n?0!==e.type&&3===n.type?this.yu=this.yu.insert(t,e):3===e.type&&1!==n.type?this.yu=this.yu.insert(t,{type:n.type,doc:e.doc}):2===e.type&&2===n.type?this.yu=this.yu.insert(t,{type:2,doc:e.doc}):2===e.type&&0===n.type?this.yu=this.yu.insert(t,{type:0,doc:e.doc}):1===e.type&&0===n.type?this.yu=this.yu.remove(t):1===e.type&&2===n.type?this.yu=this.yu.insert(t,{type:1,doc:n.doc}):0===e.type&&1===n.type?this.yu=this.yu.insert(t,{type:2,doc:e.doc}):ya():this.yu=this.yu.insert(t,e)}pu(){const e=[];return this.yu.inorderTraversal(((t,n)=>{e.push(n)})),e}}class hd{constructor(e,t,n,s,i,r,o,a){this.query=e,this.docs=t,this.oldDocs=n,this.docChanges=s,this.mutatedKeys=i,this.fromCache=r,this.syncStateChanged=o,this.excludesMetadataChanges=a}static fromInitialDocuments(e,t,n,s){const i=[];return t.forEach((e=>{i.push({type:0,doc:e})})),new hd(e,t,cd.emptySet(t),i,n,s,!0,!1)}get hasPendingWrites(){return!this.mutatedKeys.isEmpty()}isEqual(e){if(!(this.fromCache===e.fromCache&&this.syncStateChanged===e.syncStateChanged&&this.mutatedKeys.isEqual(e.mutatedKeys)&&nu(this.query,e.query)&&this.docs.isEqual(e.docs)&&this.oldDocs.isEqual(e.oldDocs)))return!1;const t=this.docChanges,n=e.docChanges;if(t.length!==n.length)return!1;for(let e=0;e<t.length;e++)if(t[e].type!==n[e].type||!t[e].doc.isEqual(n[e].doc))return!1;return!0}}class ld{constructor(){this.Iu=void 0,this.listeners=[]}}class dd{constructor(){this.queries=new zu((e=>su(e)),nu),this.onlineState="Unknown",this.Tu=new Set}}function fd(e,t){const n=wa(e);let s=!1;for(const e of t){const t=e.query,i=n.queries.get(t);if(i){for(const t of i.listeners)t.Au(e)&&(s=!0);i.Iu=e}}s&&md(n)}function pd(e,t,n){const s=wa(e),i=s.queries.get(t);if(i)for(const e of i.listeners)e.onError(n);s.queries.delete(t)}function md(e){e.Tu.forEach((e=>{e.next()}))}class gd{constructor(e,t,n){this.query=e,this.Ru=t,this.bu=!1,this.Pu=null,this.onlineState="Unknown",this.options=n||{}}Au(e){if(!this.options.includeMetadataChanges){const t=[];for(const n of e.docChanges)3!==n.type&&t.push(n);e=new hd(e.query,e.docs,e.oldDocs,t,e.mutatedKeys,e.fromCache,e.syncStateChanged,!0)}let t=!1;return this.bu?this.vu(e)&&(this.Ru.next(e),t=!0):this.Vu(e,this.onlineState)&&(this.Su(e),t=!0),this.Pu=e,t}onError(e){this.Ru.error(e)}Eu(e){this.onlineState=e;let t=!1;return this.Pu&&!this.bu&&this.Vu(this.Pu,e)&&(this.Su(this.Pu),t=!0),t}Vu(e,t){if(!e.fromCache)return!0;const n="Offline"!==t;return!(this.options.Du&&n||e.docs.isEmpty()&&"Offline"!==t)}vu(e){if(e.docChanges.length>0)return!0;const t=this.Pu&&this.Pu.hasPendingWrites!==e.hasPendingWrites;return!(!e.syncStateChanged&&!t)&&!0===this.options.includeMetadataChanges}Su(e){e=hd.fromInitialDocuments(e.query,e.docs,e.mutatedKeys,e.fromCache),this.bu=!0,this.Ru.next(e)}}class yd{constructor(e){this.key=e}}class vd{constructor(e){this.key=e}}class wd{constructor(e,t){this.query=e,this.Fu=t,this.$u=null,this.current=!1,this.Bu=eh(),this.mutatedKeys=eh(),this.Lu=ou(e),this.Uu=new cd(this.Lu)}get qu(){return this.Fu}Ku(e,t){const n=t?t.Gu:new ud,s=t?t.Uu:this.Uu;let i=t?t.mutatedKeys:this.mutatedKeys,r=s,o=!1;const a="F"===this.query.limitType&&s.size===this.query.limit?s.last():null,c="L"===this.query.limitType&&s.size===this.query.limit?s.first():null;if(e.inorderTraversal(((e,t)=>{const u=s.get(e),h=ru(this.query,t)?t:null,l=!!u&&this.mutatedKeys.has(u.key),d=!!h&&(h.hasLocalMutations||this.mutatedKeys.has(h.key)&&h.hasCommittedMutations);let f=!1;u&&h?u.data.isEqual(h.data)?l!==d&&(n.track({type:3,doc:h}),f=!0):this.Qu(u,h)||(n.track({type:2,doc:h}),f=!0,(a&&this.Lu(h,a)>0||c&&this.Lu(h,c)<0)&&(o=!0)):!u&&h?(n.track({type:0,doc:h}),f=!0):u&&!h&&(n.track({type:1,doc:u}),f=!0,(a||c)&&(o=!0)),f&&(h?(r=r.add(h),i=d?i.add(e):i.delete(e)):(r=r.delete(e),i=i.delete(e)))})),null!==this.query.limit)for(;r.size>this.query.limit;){const e="F"===this.query.limitType?r.last():r.first();r=r.delete(e.key),i=i.delete(e.key),n.track({type:1,doc:e})}return{Uu:r,Gu:n,Oi:o,mutatedKeys:i}}Qu(e,t){return e.hasLocalMutations&&t.hasCommittedMutations&&!t.hasLocalMutations}applyChanges(e,t,n){const s=this.Uu;this.Uu=e.Uu,this.mutatedKeys=e.mutatedKeys;const i=e.Gu.pu();i.sort(((e,t)=>function(e,t){const n=e=>{switch(e){case 0:return 1;case 2:case 3:return 2;case 1:return 0;default:return ya()}};return n(e)-n(t)}(e.type,t.type)||this.Lu(e.doc,t.doc))),this.ju(n);const r=t?this.Wu():[],o=0===this.Bu.size&&this.current?1:0,a=o!==this.$u;return this.$u=o,0!==i.length||a?{snapshot:new hd(this.query,e.Uu,s,i,e.mutatedKeys,0===o,a,!1),zu:r}:{zu:r}}Eu(e){return this.current&&"Offline"===e?(this.current=!1,this.applyChanges({Uu:this.Uu,Gu:new ud,mutatedKeys:this.mutatedKeys,Oi:!1},!1)):{zu:[]}}Hu(e){return!this.Fu.has(e)&&!!this.Uu.has(e)&&!this.Uu.get(e).hasLocalMutations}ju(e){e&&(e.addedDocuments.forEach((e=>this.Fu=this.Fu.add(e))),e.modifiedDocuments.forEach((e=>{})),e.removedDocuments.forEach((e=>this.Fu=this.Fu.delete(e))),this.current=e.current)}Wu(){if(!this.current)return[];const e=this.Bu;this.Bu=eh(),this.Uu.forEach((e=>{this.Hu(e.key)&&(this.Bu=this.Bu.add(e.key))}));const t=[];return e.forEach((e=>{this.Bu.has(e)||t.push(new vd(e))})),this.Bu.forEach((n=>{e.has(n)||t.push(new yd(n))})),t}Ju(e){this.Fu=e.ji,this.Bu=eh();const t=this.Ku(e.documents);return this.applyChanges(t,!0)}Yu(){return hd.fromInitialDocuments(this.query,this.Uu,this.mutatedKeys,0===this.$u)}}class Ed{constructor(e,t,n){this.query=e,this.targetId=t,this.view=n}}class Id{constructor(e){this.key=e,this.Xu=!1}}class Td{constructor(e,t,n,s,i,r){this.localStore=e,this.remoteStore=t,this.eventManager=n,this.sharedClientState=s,this.currentUser=i,this.maxConcurrentLimboResolutions=r,this.Zu={},this.tc=new zu((e=>su(e)),nu),this.ec=new Map,this.nc=new Set,this.sc=new Ja(Ba.comparator),this.ic=new Map,this.rc=new el,this.oc={},this.uc=new Map,this.cc=Qh.Rn(),this.onlineState="Unknown",this.ac=void 0}get isPrimaryClient(){return!0===this.ac}}async function bd(e,t){const n=function(e){const t=wa(e);return t.remoteStore.remoteSyncer.applyRemoteEvent=Sd.bind(null,t),t.remoteStore.remoteSyncer.getRemoteKeysForTarget=Vd.bind(null,t),t.remoteStore.remoteSyncer.rejectListen=kd.bind(null,t),t.Zu.Go=fd.bind(null,t.eventManager),t.Zu.lc=pd.bind(null,t.eventManager),t}(e);let s,i;const r=n.tc.get(t);if(r)s=r.targetId,n.sharedClientState.addLocalQueryTarget(s),i=r.view.Yu();else{const e=await function(e,t){const n=wa(e);return n.persistence.runTransaction("Allocate target","readwrite",(e=>{let s;return n.Vs.getTargetData(e,t).next((i=>i?(s=i,$a.resolve(s)):n.Vs.allocateTargetId(e).next((i=>(s=new qh(t,i,0,e.currentSequenceNumber),n.Vs.addTargetData(e,s).next((()=>s)))))))})).then((e=>{const s=n.$i.get(e.targetId);return(null===s||e.snapshotVersion.compareTo(s.snapshotVersion)>0)&&(n.$i=n.$i.insert(e.targetId,e),n.Bi.set(t,e.targetId)),e}))}(n.localStore,tu(t));n.isPrimaryClient&&Ml(n.remoteStore,e);const r=n.sharedClientState.addLocalQueryTarget(e.targetId);s=e.targetId,i=await async function(e,t,n,s){e.hc=(t,n,s)=>async function(e,t,n,s){let i=t.view.Ku(n);i.Oi&&(i=await gl(e.localStore,t.query,!1).then((({documents:e})=>t.view.Ku(e,i))));const r=s&&s.targetChanges.get(t.targetId),o=t.view.applyChanges(i,e.isPrimaryClient,r);return Pd(e,t.targetId,o.zu),o.snapshot}(e,t,n,s);const i=await gl(e.localStore,t,!0),r=new wd(t,i.ji),o=r.Ku(i.documents),a=ih.createSynthesizedTargetChangeForCurrentChange(n,s&&"Offline"!==e.onlineState),c=r.applyChanges(o,e.isPrimaryClient,a);Pd(e,n,c.zu);const u=new Ed(t,n,r);return e.tc.set(t,u),e.ec.has(n)?e.ec.get(n).push(t):e.ec.set(n,[t]),c.snapshot}(n,t,s,"current"===r)}return i}async function _d(e,t){const n=wa(e),s=n.tc.get(t),i=n.ec.get(s.targetId);if(i.length>1)return n.ec.set(s.targetId,i.filter((e=>!nu(e,t)))),void n.tc.delete(t);n.isPrimaryClient?(n.sharedClientState.removeLocalQueryTarget(s.targetId),n.sharedClientState.isActiveQueryTarget(s.targetId)||await ml(n.localStore,s.targetId,!1).then((()=>{n.sharedClientState.clearQueryState(s.targetId),xl(n.remoteStore,s.targetId),Od(n,s.targetId)})).catch(Ka)):(Od(n,s.targetId),await ml(n.localStore,s.targetId,!0))}async function Sd(e,t){const n=wa(e);try{const e=await function(e,t){const n=wa(e),s=t.snapshotVersion;let i=n.$i;return n.persistence.runTransaction("Apply remote event","readwrite-primary",(e=>{const r=n.Ui.newChangeBuffer({trackRemovals:!0});i=n.$i;const o=[];t.targetChanges.forEach(((r,a)=>{const c=i.get(a);if(!c)return;o.push(n.Vs.removeMatchingKeys(e,r.removedDocuments,a).next((()=>n.Vs.addMatchingKeys(e,r.addedDocuments,a))));let u=c.withSequenceNumber(e.currentSequenceNumber);t.targetMismatches.has(a)?u=u.withResumeToken(sc.EMPTY_BYTE_STRING,Ma.min()).withLastLimboFreeSnapshotVersion(Ma.min()):r.resumeToken.approximateByteSize()>0&&(u=u.withResumeToken(r.resumeToken,s)),i=i.insert(a,u),function(e,t,n){return 0===e.resumeToken.approximateByteSize()||t.snapshotVersion.toMicroseconds()-e.snapshotVersion.toMicroseconds()>=3e8||n.addedDocuments.size+n.modifiedDocuments.size+n.removedDocuments.size>0}(c,u,r)&&o.push(n.Vs.updateTargetData(e,u))}));let a=$u(),c=eh();if(t.documentUpdates.forEach((s=>{t.resolvedLimboDocuments.has(s)&&o.push(n.persistence.referenceDelegate.updateLimboDocument(e,s))})),o.push(function(e,t,n){let s=eh(),i=eh();return n.forEach((e=>s=s.add(e))),t.getEntries(e,s).next((e=>{let s=$u();return n.forEach(((n,r)=>{const o=e.get(n);r.isFoundDocument()!==o.isFoundDocument()&&(i=i.add(n)),r.isNoDocument()&&r.version.isEqual(Ma.min())?(t.removeEntry(n,r.readTime),s=s.insert(n,r)):!o.isValidDocument()||r.version.compareTo(o.version)>0||0===r.version.compareTo(o.version)&&o.hasPendingWrites?(t.addEntry(r),s=s.insert(n,r)):fa("LocalStore","Ignoring outdated watch update for ",n,". Current version:",o.version," Watch version:",r.version)})),{Gi:s,Qi:i}}))}(e,r,t.documentUpdates).next((e=>{a=e.Gi,c=e.Qi}))),!s.isEqual(Ma.min())){const t=n.Vs.getLastRemoteSnapshotVersion(e).next((t=>n.Vs.setTargetsMetadata(e,e.currentSequenceNumber,s)));o.push(t)}return $a.waitFor(o).next((()=>r.apply(e))).next((()=>n.localDocuments.getLocalViewOfDocuments(e,a,c))).next((()=>a))})).then((e=>(n.$i=i,e)))}(n.localStore,t);t.targetChanges.forEach(((e,t)=>{const s=n.ic.get(t);s&&(va(e.addedDocuments.size+e.modifiedDocuments.size+e.removedDocuments.size<=1),e.addedDocuments.size>0?s.Xu=!0:e.modifiedDocuments.size>0?va(s.Xu):e.removedDocuments.size>0&&(va(s.Xu),s.Xu=!1))})),await Ud(n,e,t)}catch(e){await Ka(e)}}function Cd(e,t,n){const s=wa(e);if(s.isPrimaryClient&&0===n||!s.isPrimaryClient&&1===n){const e=[];s.tc.forEach(((n,s)=>{const i=s.view.Eu(t);i.snapshot&&e.push(i.snapshot)})),function(e,t){const n=wa(e);n.onlineState=t;let s=!1;n.queries.forEach(((e,n)=>{for(const e of n.listeners)e.Eu(t)&&(s=!0)})),s&&md(n)}(s.eventManager,t),e.length&&s.Zu.Go(e),s.onlineState=t,s.isPrimaryClient&&s.sharedClientState.setOnlineState(t)}}async function kd(e,t,n){const s=wa(e);s.sharedClientState.updateQueryState(t,"rejected",n);const i=s.ic.get(t),r=i&&i.key;if(r){let e=new Ja(Ba.comparator);e=e.insert(r,Oc.newNoDocument(r,Ma.min()));const n=eh().add(r),i=new sh(Ma.min(),new Map,new ec(Oa),e,n);await Sd(s,i),s.sc=s.sc.remove(r),s.ic.delete(t),xd(s)}else await ml(s.localStore,t,!1).then((()=>Od(s,t,n))).catch(Ka)}async function Ad(e,t){const n=wa(e),s=t.batch.batchId;try{const e=await function(e,t){const n=wa(e);return n.persistence.runTransaction("Acknowledge batch","readwrite-primary",(e=>{const s=t.batch.keys(),i=n.Ui.newChangeBuffer({trackRemovals:!0});return function(e,t,n,s){const i=n.batch,r=i.keys();let o=$a.resolve();return r.forEach((e=>{o=o.next((()=>s.getEntry(t,e))).next((t=>{const r=n.docVersions.get(e);va(null!==r),t.version.compareTo(r)<0&&(i.applyToRemoteDocument(t,n),t.isValidDocument()&&(t.setReadTime(n.commitVersion),s.addEntry(t)))}))})),o.next((()=>e.mutationQueue.removeMutationBatch(t,i)))}(n,e,t,i).next((()=>i.apply(e))).next((()=>n.mutationQueue.performConsistencyCheck(e))).next((()=>n.documentOverlayCache.removeOverlaysForBatchId(e,s,t.batch.batchId))).next((()=>n.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(e,function(e){let t=eh();for(let n=0;n<e.mutationResults.length;++n)e.mutationResults[n].transformResults.length>0&&(t=t.add(e.batch.mutations[n].key));return t}(t)))).next((()=>n.localDocuments.getDocuments(e,s)))}))}(n.localStore,t);Rd(n,s,null),Dd(n,s),n.sharedClientState.updateMutationState(s,"acknowledged"),await Ud(n,e)}catch(e){await Ka(e)}}async function Nd(e,t,n){const s=wa(e);try{const e=await function(e,t){const n=wa(e);return n.persistence.runTransaction("Reject batch","readwrite-primary",(e=>{let s;return n.mutationQueue.lookupMutationBatch(e,t).next((t=>(va(null!==t),s=t.keys(),n.mutationQueue.removeMutationBatch(e,t)))).next((()=>n.mutationQueue.performConsistencyCheck(e))).next((()=>n.documentOverlayCache.removeOverlaysForBatchId(e,s,t))).next((()=>n.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(e,s))).next((()=>n.localDocuments.getDocuments(e,s)))}))}(s.localStore,t);Rd(s,t,n),Dd(s,t),s.sharedClientState.updateMutationState(t,"rejected",n),await Ud(s,e)}catch(n){await Ka(n)}}function Dd(e,t){(e.uc.get(t)||[]).forEach((e=>{e.resolve()})),e.uc.delete(t)}function Rd(e,t,n){const s=wa(e);let i=s.oc[s.currentUser.toKey()];if(i){const e=i.get(t);e&&(n?e.reject(n):e.resolve(),i=i.remove(t)),s.oc[s.currentUser.toKey()]=i}}function Od(e,t,n=null){e.sharedClientState.removeLocalQueryTarget(t);for(const s of e.ec.get(t))e.tc.delete(s),n&&e.Zu.lc(s,n);e.ec.delete(t),e.isPrimaryClient&&e.rc.us(t).forEach((t=>{e.rc.containsKey(t)||Ld(e,t)}))}function Ld(e,t){e.nc.delete(t.path.canonicalString());const n=e.sc.get(t);null!==n&&(xl(e.remoteStore,n),e.sc=e.sc.remove(t),e.ic.delete(n),xd(e))}function Pd(e,t,n){for(const s of n)s instanceof yd?(e.rc.addReference(s.key,t),Md(e,s)):s instanceof vd?(fa("SyncEngine","Document no longer in limbo: "+s.key),e.rc.removeReference(s.key,t),e.rc.containsKey(s.key)||Ld(e,s.key)):ya()}function Md(e,t){const n=t.key,s=n.path.canonicalString();e.sc.get(n)||e.nc.has(s)||(fa("SyncEngine","New document in limbo: "+n),e.nc.add(s),xd(e))}function xd(e){for(;e.nc.size>0&&e.sc.size<e.maxConcurrentLimboResolutions;){const t=e.nc.values().next().value;e.nc.delete(t);const n=new Ba(Ua.fromString(t)),s=e.cc.next();e.ic.set(s,new Id(n)),e.sc=e.sc.insert(n,s),Ml(e.remoteStore,new qh(tu(Zc(n.path)),s,2,Ga.ot))}}async function Ud(e,t,n){const s=wa(e),i=[],r=[],o=[];s.tc.isEmpty()||(s.tc.forEach(((e,a)=>{o.push(s.hc(a,t,n).then((e=>{if(e){s.isPrimaryClient&&s.sharedClientState.updateQueryState(a.targetId,e.fromCache?"not-current":"current"),i.push(e);const t=ul.Vi(a.targetId,e);r.push(t)}})))})),await Promise.all(o),s.Zu.Go(i),await async function(e,t){const n=wa(e);try{await n.persistence.runTransaction("notifyLocalViewChanges","readwrite",(e=>$a.forEach(t,(t=>$a.forEach(t.Pi,(s=>n.persistence.referenceDelegate.addReference(e,t.targetId,s))).next((()=>$a.forEach(t.vi,(s=>n.persistence.referenceDelegate.removeReference(e,t.targetId,s)))))))))}catch(e){if(!Ha(e))throw e;fa("LocalStore","Failed to update sequence numbers: "+e)}for(const e of t){const t=e.targetId;if(!e.fromCache){const e=n.$i.get(t),s=e.snapshotVersion,i=e.withLastLimboFreeSnapshotVersion(s);n.$i=n.$i.insert(t,i)}}}(s.localStore,r))}async function Fd(e,t){const n=wa(e);if(!n.currentUser.isEqual(t)){fa("SyncEngine","User change. New user:",t.toKey());const e=await dl(n.localStore,t);n.currentUser=t,function(e,t){e.uc.forEach((e=>{e.forEach((e=>{e.reject(new Ia(Ea.CANCELLED,"'waitForPendingWrites' promise is rejected due to a user change."))}))})),e.uc.clear()}(n),n.sharedClientState.handleUserChange(t,e.removedBatchIds,e.addedBatchIds),await Ud(n,e.Ki)}}function Vd(e,t){const n=wa(e),s=n.ic.get(t);if(s&&s.Xu)return eh().add(s.key);{let e=eh();const s=n.ec.get(t);if(!s)return e;for(const t of s){const s=n.tc.get(t);e=e.unionWith(s.view.qu)}return e}}function Bd(e){const t=wa(e);return t.remoteStore.remoteSyncer.applySuccessfulWrite=Ad.bind(null,t),t.remoteStore.remoteSyncer.rejectFailedWrite=Nd.bind(null,t),t}class jd{constructor(){this.synchronizeTabs=!1}async initialize(e){this.wt=Sl(e.databaseInfo.databaseId),this.sharedClientState=this.dc(e),this.persistence=this._c(e),await this.persistence.start(),this.localStore=this.wc(e),this.gcScheduler=this.mc(e,this.localStore),this.indexBackfillerScheduler=this.gc(e,this.localStore)}mc(e,t){return null}gc(e,t){return null}wc(e){return function(e,t,n,s){return new ll(e,t,n,s)}(this.persistence,new hl,e.initialUser,this.wt)}_c(e){return new ol(cl.Ms,this.wt)}dc(e){return new vl}async terminate(){this.gcScheduler&&this.gcScheduler.stop(),await this.sharedClientState.shutdown(),await this.persistence.shutdown()}}class qd{async initialize(e,t){this.localStore||(this.localStore=e.localStore,this.sharedClientState=e.sharedClientState,this.datastore=this.createDatastore(t),this.remoteStore=this.createRemoteStore(t),this.eventManager=this.createEventManager(t),this.syncEngine=this.createSyncEngine(t,!e.synchronizeTabs),this.sharedClientState.onlineStateHandler=e=>Cd(this.syncEngine,e,1),this.remoteStore.remoteSyncer.handleCredentialChange=Fd.bind(null,this.syncEngine),await async function(e,t){const n=wa(e);t?(n.lu.delete(2),await Ll(n)):t||(n.lu.add(2),await Pl(n),n._u.set("Unknown"))}(this.remoteStore,this.syncEngine.isPrimaryClient))}createEventManager(e){return new dd}createDatastore(e){const t=Sl(e.databaseInfo.databaseId),n=(s=e.databaseInfo,new bl(s));var s;return function(e,t,n,s){return new Dl(e,t,n,s)}(e.authCredentials,e.appCheckCredentials,n,t)}createRemoteStore(e){return t=this.localStore,n=this.datastore,s=e.asyncQueue,i=e=>Cd(this.syncEngine,e,0),r=El.V()?new El:new wl,new Ol(t,n,s,i,r);var t,n,s,i,r}createSyncEngine(e,t){return function(e,t,n,s,i,r,o){const a=new Td(e,t,n,s,i,r);return o&&(a.ac=!0),a}(this.localStore,this.remoteStore,this.eventManager,this.sharedClientState,e.initialUser,e.maxConcurrentLimboResolutions,t)}terminate(){return async function(e){const t=wa(e);fa("RemoteStore","RemoteStore shutting down."),t.lu.add(5),await Pl(t),t.du.shutdown(),t._u.set("Unknown")}(this.remoteStore)}}class zd{constructor(e){this.observer=e,this.muted=!1}next(e){this.observer.next&&this.Ic(this.observer.next,e)}error(e){this.observer.error?this.Ic(this.observer.error,e):console.error("Uncaught Error in snapshot listener:",e)}Tc(){this.muted=!0}Ic(e,t){this.muted||setTimeout((()=>{this.muted||e(t)}),0)}}class Kd{constructor(e,t,n,s){this.authCredentials=e,this.appCheckCredentials=t,this.asyncQueue=n,this.databaseInfo=s,this.user=ua.UNAUTHENTICATED,this.clientId=Ra.I(),this.authCredentialListener=()=>Promise.resolve(),this.appCheckCredentialListener=()=>Promise.resolve(),this.authCredentials.start(n,(async e=>{fa("FirestoreClient","Received user=",e.uid),await this.authCredentialListener(e),this.user=e})),this.appCheckCredentials.start(n,(e=>(fa("FirestoreClient","Received new app check token=",e),this.appCheckCredentialListener(e,this.user))))}async getConfiguration(){return{asyncQueue:this.asyncQueue,databaseInfo:this.databaseInfo,clientId:this.clientId,authCredentials:this.authCredentials,appCheckCredentials:this.appCheckCredentials,initialUser:this.user,maxConcurrentLimboResolutions:100}}setCredentialChangeListener(e){this.authCredentialListener=e}setAppCheckTokenChangeListener(e){this.appCheckCredentialListener=e}verifyNotTerminated(){if(this.asyncQueue.isShuttingDown)throw new Ia(Ea.FAILED_PRECONDITION,"The client has already been terminated.")}terminate(){this.asyncQueue.enterRestrictedMode();const e=new Ta;return this.asyncQueue.enqueueAndForgetEvenWhileRestricted((async()=>{try{this.onlineComponents&&await this.onlineComponents.terminate(),this.offlineComponents&&await this.offlineComponents.terminate(),this.authCredentials.shutdown(),this.appCheckCredentials.shutdown(),e.resolve()}catch(t){const n=ad(t,"Failed to shutdown persistence");e.reject(n)}})),e.promise}}async function $d(e,t){e.asyncQueue.verifyOperationInProgress();const n=await async function(e){return e.offlineComponents||(fa("FirestoreClient","Using default OfflineComponentProvider"),await async function(e,t){e.asyncQueue.verifyOperationInProgress(),fa("FirestoreClient","Initializing OfflineComponentProvider");const n=await e.getConfiguration();await t.initialize(n);let s=n.initialUser;e.setCredentialChangeListener((async e=>{s.isEqual(e)||(await dl(t.localStore,e),s=e)})),t.persistence.setDatabaseDeletedListener((()=>e.terminate())),e.offlineComponents=t}(e,new jd)),e.offlineComponents}(e);fa("FirestoreClient","Initializing OnlineComponentProvider");const s=await e.getConfiguration();await t.initialize(n,s),e.setCredentialChangeListener((e=>sd(t.remoteStore,e))),e.setAppCheckTokenChangeListener(((e,n)=>sd(t.remoteStore,n))),e.onlineComponents=t}async function Hd(e){return e.onlineComponents||(fa("FirestoreClient","Using default OnlineComponentProvider"),await $d(e,new qd)),e.onlineComponents}async function Gd(e){const t=await Hd(e),n=t.eventManager;return n.onListen=bd.bind(null,t.syncEngine),n.onUnlisten=_d.bind(null,t.syncEngine),n}function Wd(e,t,n={}){const s=new Ta;return e.asyncQueue.enqueueAndForget((async()=>function(e,t,n,s,i){const r=new zd({next:n=>{t.enqueueAndForget((()=>async function(e,t){const n=wa(e),s=t.query;let i=!1;const r=n.queries.get(s);if(r){const e=r.listeners.indexOf(t);e>=0&&(r.listeners.splice(e,1),i=0===r.listeners.length)}if(i)return n.queries.delete(s),n.onUnlisten(s)}(e,o))),n.fromCache&&"server"===s.source?i.reject(new Ia(Ea.UNAVAILABLE,'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')):i.resolve(n)},error:e=>i.reject(e)}),o=new gd(n,r,{includeMetadataChanges:!0,Du:!0});return async function(e,t){const n=wa(e),s=t.query;let i=!1,r=n.queries.get(s);if(r||(i=!0,r=new ld),i)try{r.Iu=await n.onListen(s)}catch(e){const n=ad(e,`Initialization of query '${iu(t.query)}' failed`);return void t.onError(n)}n.queries.set(s,r),r.listeners.push(t),t.Eu(n.onlineState),r.Iu&&t.Au(r.Iu)&&md(n)}(e,o)}(await Gd(e),e.asyncQueue,t,n,s))),s.promise}const Qd=new Map;function Xd(e,t,n){if(!n)throw new Ia(Ea.INVALID_ARGUMENT,`Function ${e}() cannot be called with an empty ${t}.`)}function Jd(e){if(!Ba.isDocumentKey(e))throw new Ia(Ea.INVALID_ARGUMENT,`Invalid document reference. Document references must have an even number of segments, but ${e} has ${e.length}.`)}function Yd(e){if(Ba.isDocumentKey(e))throw new Ia(Ea.INVALID_ARGUMENT,`Invalid collection reference. Collection references must have an odd number of segments, but ${e} has ${e.length}.`)}function Zd(e){if(void 0===e)return"undefined";if(null===e)return"null";if("string"==typeof e)return e.length>20&&(e=`${e.substring(0,20)}...`),JSON.stringify(e);if("number"==typeof e||"boolean"==typeof e)return""+e;if("object"==typeof e){if(e instanceof Array)return"an array";{const t=function(e){return e.constructor?e.constructor.name:null}(e);return t?`a custom ${t} object`:"an object"}}return"function"==typeof e?"a function":ya()}function ef(e,t){if("_delegate"in e&&(e=e._delegate),!(e instanceof t)){if(t.name===e.constructor.name)throw new Ia(Ea.INVALID_ARGUMENT,"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");{const n=Zd(e);throw new Ia(Ea.INVALID_ARGUMENT,`Expected type '${t.name}', but it was: ${n}`)}}return e}class tf{constructor(e){var t;if(void 0===e.host){if(void 0!==e.ssl)throw new Ia(Ea.INVALID_ARGUMENT,"Can't provide ssl option if host option is not set");this.host="firestore.googleapis.com",this.ssl=!0}else this.host=e.host,this.ssl=null===(t=e.ssl)||void 0===t||t;if(this.credentials=e.credentials,this.ignoreUndefinedProperties=!!e.ignoreUndefinedProperties,void 0===e.cacheSizeBytes)this.cacheSizeBytes=41943040;else{if(-1!==e.cacheSizeBytes&&e.cacheSizeBytes<1048576)throw new Ia(Ea.INVALID_ARGUMENT,"cacheSizeBytes must be at least 1048576");this.cacheSizeBytes=e.cacheSizeBytes}this.experimentalForceLongPolling=!!e.experimentalForceLongPolling,this.experimentalAutoDetectLongPolling=!!e.experimentalAutoDetectLongPolling,this.useFetchStreams=!!e.useFetchStreams,function(e,t,n,s){if(!0===t&&!0===s)throw new Ia(Ea.INVALID_ARGUMENT,"experimentalForceLongPolling and experimentalAutoDetectLongPolling cannot be used together.")}(0,e.experimentalForceLongPolling,0,e.experimentalAutoDetectLongPolling)}isEqual(e){return this.host===e.host&&this.ssl===e.ssl&&this.credentials===e.credentials&&this.cacheSizeBytes===e.cacheSizeBytes&&this.experimentalForceLongPolling===e.experimentalForceLongPolling&&this.experimentalAutoDetectLongPolling===e.experimentalAutoDetectLongPolling&&this.ignoreUndefinedProperties===e.ignoreUndefinedProperties&&this.useFetchStreams===e.useFetchStreams}}class nf{constructor(e,t,n){this._authCredentials=t,this._appCheckCredentials=n,this.type="firestore-lite",this._persistenceKey="(lite)",this._settings=new tf({}),this._settingsFrozen=!1,e instanceof dc?this._databaseId=e:(this._app=e,this._databaseId=function(e){if(!Object.prototype.hasOwnProperty.apply(e.options,["projectId"]))throw new Ia(Ea.INVALID_ARGUMENT,'"projectId" not provided in firebase.initializeApp.');return new dc(e.options.projectId)}(e))}get app(){if(!this._app)throw new Ia(Ea.FAILED_PRECONDITION,"Firestore was not initialized using the Firebase SDK. 'app' is not available");return this._app}get _initialized(){return this._settingsFrozen}get _terminated(){return void 0!==this._terminateTask}_setSettings(e){if(this._settingsFrozen)throw new Ia(Ea.FAILED_PRECONDITION,"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");this._settings=new tf(e),void 0!==e.credentials&&(this._authCredentials=function(e){if(!e)return new _a;switch(e.type){case"gapi":const t=e.client;return va(!("object"!=typeof t||null===t||!t.auth||!t.auth.getAuthHeaderValueForFirstParty)),new ka(t,e.sessionIndex||"0",e.iamToken||null);case"provider":return e.client;default:throw new Ia(Ea.INVALID_ARGUMENT,"makeAuthCredentialsProvider failed due to invalid credential type")}}(e.credentials))}_getSettings(){return this._settings}_freezeSettings(){return this._settingsFrozen=!0,this._settings}_delete(){return this._terminateTask||(this._terminateTask=this._terminate()),this._terminateTask}toJSON(){return{app:this._app,databaseId:this._databaseId,settings:this._settings}}_terminate(){return function(e){const t=Qd.get(e);t&&(fa("ComponentProvider","Removing Datastore"),Qd.delete(e),t.terminate())}(this),Promise.resolve()}}class sf{constructor(e,t,n){this.converter=t,this._key=n,this.type="document",this.firestore=e}get _path(){return this._key.path}get id(){return this._key.path.lastSegment()}get path(){return this._key.path.canonicalString()}get parent(){return new of(this.firestore,this.converter,this._key.path.popLast())}withConverter(e){return new sf(this.firestore,e,this._key)}}class rf{constructor(e,t,n){this.converter=t,this._query=n,this.type="query",this.firestore=e}withConverter(e){return new rf(this.firestore,e,this._query)}}class of extends rf{constructor(e,t,n){super(e,t,Zc(n)),this._path=n,this.type="collection"}get id(){return this._query.path.lastSegment()}get path(){return this._query.path.canonicalString()}get parent(){const e=this._path.popLast();return e.isEmpty()?null:new sf(this.firestore,null,new Ba(e))}withConverter(e){return new of(this.firestore,e,this._path)}}class af{constructor(){this.Oc=Promise.resolve(),this.Mc=[],this.Fc=!1,this.$c=[],this.Bc=null,this.Lc=!1,this.Uc=!1,this.qc=[],this.So=new Cl(this,"async_queue_retry"),this.Kc=()=>{const e=_l();e&&fa("AsyncQueue","Visibility state changed to "+e.visibilityState),this.So.Eo()};const e=_l();e&&"function"==typeof e.addEventListener&&e.addEventListener("visibilitychange",this.Kc)}get isShuttingDown(){return this.Fc}enqueueAndForget(e){this.enqueue(e)}enqueueAndForgetEvenWhileRestricted(e){this.Gc(),this.Qc(e)}enterRestrictedMode(e){if(!this.Fc){this.Fc=!0,this.Uc=e||!1;const t=_l();t&&"function"==typeof t.removeEventListener&&t.removeEventListener("visibilitychange",this.Kc)}}enqueue(e){if(this.Gc(),this.Fc)return new Promise((()=>{}));const t=new Ta;return this.Qc((()=>this.Fc&&this.Uc?Promise.resolve():(e().then(t.resolve,t.reject),t.promise))).then((()=>t.promise))}enqueueRetryable(e){this.enqueueAndForget((()=>(this.Mc.push(e),this.jc())))}async jc(){if(0!==this.Mc.length){try{await this.Mc[0](),this.Mc.shift(),this.So.reset()}catch(e){if(!Ha(e))throw e;fa("AsyncQueue","Operation failed with retryable error: "+e)}this.Mc.length>0&&this.So.Io((()=>this.jc()))}}Qc(e){const t=this.Oc.then((()=>(this.Lc=!0,e().catch((e=>{this.Bc=e,this.Lc=!1;const t=function(e){let t=e.message||"";return e.stack&&(t=e.stack.includes(e.message)?e.stack:e.message+"\n"+e.stack),t}(e);throw pa("INTERNAL UNHANDLED ERROR: ",t),e})).then((e=>(this.Lc=!1,e))))));return this.Oc=t,t}enqueueAfterDelay(e,t,n){this.Gc(),this.qc.indexOf(e)>-1&&(t=0);const s=od.createAndSchedule(this,e,t,n,(e=>this.Wc(e)));return this.$c.push(s),s}Gc(){this.Bc&&ya()}verifyOperationInProgress(){}async zc(){let e;do{e=this.Oc,await e}while(e!==this.Oc)}Hc(e){for(const t of this.$c)if(t.timerId===e)return!0;return!1}Jc(e){return this.zc().then((()=>{this.$c.sort(((e,t)=>e.targetTimeMs-t.targetTimeMs));for(const t of this.$c)if(t.skipDelay(),"all"!==e&&t.timerId===e)break;return this.zc()}))}Yc(e){this.qc.push(e)}Wc(e){const t=this.$c.indexOf(e);this.$c.splice(t,1)}}class cf extends nf{constructor(e,t,n){super(e,t,n),this.type="firestore",this._queue=new af,this._persistenceKey="name"in e?e.name:"[DEFAULT]"}_terminate(){return this._firestoreClient||lf(this),this._firestoreClient.terminate()}}function uf(e=de()){return ce(e,"firestore").getImmediate()}function hf(e){return e._firestoreClient||lf(e),e._firestoreClient.verifyNotTerminated(),e._firestoreClient}function lf(e){var t;const n=e._freezeSettings(),s=function(e,t,n,s){return new lc(e,t,n,s.host,s.ssl,s.experimentalForceLongPolling,s.experimentalAutoDetectLongPolling,s.useFetchStreams)}(e._databaseId,(null===(t=e._app)||void 0===t?void 0:t.options.appId)||"",e._persistenceKey,n);e._firestoreClient=new Kd(e._authCredentials,e._appCheckCredentials,e._queue,s)}class df{constructor(...e){for(let t=0;t<e.length;++t)if(0===e[t].length)throw new Ia(Ea.INVALID_ARGUMENT,"Invalid field name at argument $(i + 1). Field names must not be empty.");this._internalPath=new Va(e)}isEqual(e){return this._internalPath.isEqual(e._internalPath)}}class ff{constructor(e){this._byteString=e}static fromBase64String(e){try{return new ff(sc.fromBase64String(e))}catch(e){throw new Ia(Ea.INVALID_ARGUMENT,"Failed to construct data from Base64 string: "+e)}}static fromUint8Array(e){return new ff(sc.fromUint8Array(e))}toBase64(){return this._byteString.toBase64()}toUint8Array(){return this._byteString.toUint8Array()}toString(){return"Bytes(base64: "+this.toBase64()+")"}isEqual(e){return this._byteString.isEqual(e._byteString)}}class pf{constructor(e){this._methodName=e}}class mf{constructor(e,t){if(!isFinite(e)||e<-90||e>90)throw new Ia(Ea.INVALID_ARGUMENT,"Latitude must be a number between -90 and 90, but was: "+e);if(!isFinite(t)||t<-180||t>180)throw new Ia(Ea.INVALID_ARGUMENT,"Longitude must be a number between -180 and 180, but was: "+t);this._lat=e,this._long=t}get latitude(){return this._lat}get longitude(){return this._long}isEqual(e){return this._lat===e._lat&&this._long===e._long}toJSON(){return{latitude:this._lat,longitude:this._long}}_compareTo(e){return Oa(this._lat,e._lat)||Oa(this._long,e._long)}}const gf=/^__.*__$/;class yf{constructor(e,t,n){this.data=e,this.fieldMask=t,this.fieldTransforms=n}toMutation(e,t){return null!==this.fieldMask?new Lu(e,this.data,this.fieldMask,t,this.fieldTransforms):new Ou(e,this.data,t,this.fieldTransforms)}}function vf(e){switch(e){case 0:case 2:case 1:return!0;case 3:case 4:return!1;default:throw ya()}}class wf{constructor(e,t,n,s,i,r){this.settings=e,this.databaseId=t,this.wt=n,this.ignoreUndefinedProperties=s,void 0===i&&this.Xc(),this.fieldTransforms=i||[],this.fieldMask=r||[]}get path(){return this.settings.path}get Zc(){return this.settings.Zc}ta(e){return new wf(Object.assign(Object.assign({},this.settings),e),this.databaseId,this.wt,this.ignoreUndefinedProperties,this.fieldTransforms,this.fieldMask)}ea(e){var t;const n=null===(t=this.path)||void 0===t?void 0:t.child(e),s=this.ta({path:n,na:!1});return s.sa(e),s}ia(e){var t;const n=null===(t=this.path)||void 0===t?void 0:t.child(e),s=this.ta({path:n,na:!1});return s.Xc(),s}ra(e){return this.ta({path:void 0,na:!0})}oa(e){return Df(e,this.settings.methodName,this.settings.ua||!1,this.path,this.settings.ca)}contains(e){return void 0!==this.fieldMask.find((t=>e.isPrefixOf(t)))||void 0!==this.fieldTransforms.find((t=>e.isPrefixOf(t.field)))}Xc(){if(this.path)for(let e=0;e<this.path.length;e++)this.sa(this.path.get(e))}sa(e){if(0===e.length)throw this.oa("Document fields must not be empty");if(vf(this.Zc)&&gf.test(e))throw this.oa('Document fields cannot begin and end with "__"')}}class Ef{constructor(e,t,n){this.databaseId=e,this.ignoreUndefinedProperties=t,this.wt=n||Sl(e)}aa(e,t,n,s=!1){return new wf({Zc:e,methodName:t,ca:n,path:Va.emptyPath(),na:!1,ua:s},this.databaseId,this.wt,this.ignoreUndefinedProperties)}}function If(e){const t=e._freezeSettings(),n=Sl(e._databaseId);return new Ef(e._databaseId,!!t.ignoreUndefinedProperties,n)}function Tf(e,t,n,s,i,r={}){const o=e.aa(r.merge||r.mergeFields?2:0,t,n,i);Cf("Data must be an object, but it was:",o,s);const a=_f(s,o);let c,u;if(r.merge)c=new nc(o.fieldMask),u=o.fieldTransforms;else if(r.mergeFields){const e=[];for(const s of r.mergeFields){const i=kf(t,s,n);if(!o.contains(i))throw new Ia(Ea.INVALID_ARGUMENT,`Field '${i}' is specified in your field mask but missing from your input data.`);Rf(e,i)||e.push(i)}c=new nc(e),u=o.fieldTransforms.filter((e=>c.covers(e.field)))}else c=null,u=o.fieldTransforms;return new yf(new Dc(a),c,u)}function bf(e,t){if(Sf(e=_(e)))return Cf("Unsupported field value:",t,e),_f(e,t);if(e instanceof pf)return function(e,t){if(!vf(t.Zc))throw t.oa(`${e._methodName}() can only be used with update() and set()`);if(!t.path)throw t.oa(`${e._methodName}() is not currently supported inside arrays`);const n=e._toFieldTransform(t);n&&t.fieldTransforms.push(n)}(e,t),null;if(void 0===e&&t.ignoreUndefinedProperties)return null;if(t.path&&t.fieldMask.push(t.path),e instanceof Array){if(t.settings.na&&4!==t.Zc)throw t.oa("Nested arrays are not supported");return function(e,t){const n=[];let s=0;for(const i of e){let e=bf(i,t.ra(s));null==e&&(e={nullValue:"NULL_VALUE"}),n.push(e),s++}return{arrayValue:{values:n}}}(e,t)}return function(e,t){if(null===(e=_(e)))return{nullValue:"NULL_VALUE"};if("number"==typeof e)return hu(t.wt,e);if("boolean"==typeof e)return{booleanValue:e};if("string"==typeof e)return{stringValue:e};if(e instanceof Date){const n=Pa.fromDate(e);return{timestampValue:mh(t.wt,n)}}if(e instanceof Pa){const n=new Pa(e.seconds,1e3*Math.floor(e.nanoseconds/1e3));return{timestampValue:mh(t.wt,n)}}if(e instanceof mf)return{geoPointValue:{latitude:e.latitude,longitude:e.longitude}};if(e instanceof ff)return{bytesValue:gh(t.wt,e._byteString)};if(e instanceof sf){const n=t.databaseId,s=e.firestore._databaseId;if(!s.isEqual(n))throw t.oa(`Document reference is for database ${s.projectId}/${s.database} but should be for database ${n.projectId}/${n.database}`);return{referenceValue:wh(e.firestore._databaseId||t.databaseId,e._key.path)}}throw t.oa(`Unsupported field value: ${Zd(e)}`)}(e,t)}function _f(e,t){const n={};return Xa(e)?t.path&&t.path.length>0&&t.fieldMask.push(t.path):Qa(e,((e,s)=>{const i=bf(s,t.ea(e));null!=i&&(n[e]=i)})),{mapValue:{fields:n}}}function Sf(e){return!("object"!=typeof e||null===e||e instanceof Array||e instanceof Date||e instanceof Pa||e instanceof mf||e instanceof ff||e instanceof sf||e instanceof pf)}function Cf(e,t,n){if(!Sf(n)||!function(e){return"object"==typeof e&&null!==e&&(Object.getPrototypeOf(e)===Object.prototype||null===Object.getPrototypeOf(e))}(n)){const s=Zd(n);throw"an object"===s?t.oa(e+" a custom object"):t.oa(e+" "+s)}}function kf(e,t,n){if((t=_(t))instanceof df)return t._internalPath;if("string"==typeof t)return Nf(e,t);throw Df("Field path arguments must be of type string or ",e,!1,void 0,n)}const Af=new RegExp("[~\\*/\\[\\]]");function Nf(e,t,n){if(t.search(Af)>=0)throw Df(`Invalid field path (${t}). Paths must not contain '~', '*', '/', '[', or ']'`,e,!1,void 0,n);try{return new df(...t.split("."))._internalPath}catch(s){throw Df(`Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`,e,!1,void 0,n)}}function Df(e,t,n,s,i){const r=s&&!s.isEmpty(),o=void 0!==i;let a=`Function ${t}() called with invalid data`;n&&(a+=" (via `toFirestore()`)"),a+=". ";let c="";return(r||o)&&(c+=" (found",r&&(c+=` in field ${s}`),o&&(c+=` in document ${i}`),c+=")"),new Ia(Ea.INVALID_ARGUMENT,a+e+c)}function Rf(e,t){return e.some((e=>e.isEqual(t)))}class Of{constructor(e,t,n,s,i){this._firestore=e,this._userDataWriter=t,this._key=n,this._document=s,this._converter=i}get id(){return this._key.path.lastSegment()}get ref(){return new sf(this._firestore,this._converter,this._key)}exists(){return null!==this._document}data(){if(this._document){if(this._converter){const e=new Lf(this._firestore,this._userDataWriter,this._key,this._document,null);return this._converter.fromFirestore(e)}return this._userDataWriter.convertValue(this._document.data.value)}}get(e){if(this._document){const t=this._document.data.field(Pf("DocumentSnapshot.get",e));if(null!==t)return this._userDataWriter.convertValue(t)}}}class Lf extends Of{data(){return super.data()}}function Pf(e,t){return"string"==typeof t?Nf(e,t):t instanceof df?t._internalPath:t._delegate._internalPath}class Mf{constructor(e,t){this.hasPendingWrites=e,this.fromCache=t}isEqual(e){return this.hasPendingWrites===e.hasPendingWrites&&this.fromCache===e.fromCache}}class xf extends Of{constructor(e,t,n,s,i,r){super(e,t,n,s,r),this._firestore=e,this._firestoreImpl=e,this.metadata=i}exists(){return super.exists()}data(e={}){if(this._document){if(this._converter){const t=new Uf(this._firestore,this._userDataWriter,this._key,this._document,this.metadata,null);return this._converter.fromFirestore(t,e)}return this._userDataWriter.convertValue(this._document.data.value,e.serverTimestamps)}}get(e,t={}){if(this._document){const n=this._document.data.field(Pf("DocumentSnapshot.get",e));if(null!==n)return this._userDataWriter.convertValue(n,t.serverTimestamps)}}}class Uf extends xf{data(e={}){return super.data(e)}}class Ff{constructor(e,t,n,s){this._firestore=e,this._userDataWriter=t,this._snapshot=s,this.metadata=new Mf(s.hasPendingWrites,s.fromCache),this.query=n}get docs(){const e=[];return this.forEach((t=>e.push(t))),e}get size(){return this._snapshot.docs.size}get empty(){return 0===this.size}forEach(e,t){this._snapshot.docs.forEach((n=>{e.call(t,new Uf(this._firestore,this._userDataWriter,n.key,n,new Mf(this._snapshot.mutatedKeys.has(n.key),this._snapshot.fromCache),this.query.converter))}))}docChanges(e={}){const t=!!e.includeMetadataChanges;if(t&&this._snapshot.excludesMetadataChanges)throw new Ia(Ea.INVALID_ARGUMENT,"To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");return this._cachedChanges&&this._cachedChangesIncludeMetadataChanges===t||(this._cachedChanges=function(e,t){if(e._snapshot.oldDocs.isEmpty()){let t=0;return e._snapshot.docChanges.map((n=>({type:"added",doc:new Uf(e._firestore,e._userDataWriter,n.doc.key,n.doc,new Mf(e._snapshot.mutatedKeys.has(n.doc.key),e._snapshot.fromCache),e.query.converter),oldIndex:-1,newIndex:t++})))}{let n=e._snapshot.oldDocs;return e._snapshot.docChanges.filter((e=>t||3!==e.type)).map((t=>{const s=new Uf(e._firestore,e._userDataWriter,t.doc.key,t.doc,new Mf(e._snapshot.mutatedKeys.has(t.doc.key),e._snapshot.fromCache),e.query.converter);let i=-1,r=-1;return 0!==t.type&&(i=n.indexOf(t.doc.key),n=n.delete(t.doc.key)),1!==t.type&&(n=n.add(t.doc),r=n.indexOf(t.doc.key)),{type:Vf(t.type),doc:s,oldIndex:i,newIndex:r}}))}}(this,t),this._cachedChangesIncludeMetadataChanges=t),this._cachedChanges}}function Vf(e){switch(e){case 0:return"added";case 2:case 3:return"modified";case 1:return"removed";default:return ya()}}class Bf extends class{convertValue(e,t="none"){switch(gc(e)){case 0:return null;case 1:return e.booleanValue;case 2:return oc(e.integerValue||e.doubleValue);case 3:return this.convertTimestamp(e.timestampValue);case 4:return this.convertServerTimestamp(e,t);case 5:return e.stringValue;case 6:return this.convertBytes(ac(e.bytesValue));case 7:return this.convertReference(e.referenceValue);case 8:return this.convertGeoPoint(e.geoPointValue);case 9:return this.convertArray(e.arrayValue,t);case 10:return this.convertObject(e.mapValue,t);default:throw ya()}}convertObject(e,t){const n={};return Qa(e.fields,((e,s)=>{n[e]=this.convertValue(s,t)})),n}convertGeoPoint(e){return new mf(oc(e.latitude),oc(e.longitude))}convertArray(e,t){return(e.values||[]).map((e=>this.convertValue(e,t)))}convertServerTimestamp(e,t){switch(t){case"previous":const n=uc(e);return null==n?null:this.convertValue(n,t);case"estimate":return this.convertTimestamp(hc(e));default:return null}}convertTimestamp(e){const t=rc(e);return new Pa(t.seconds,t.nanos)}convertDocumentKey(e,t){const n=Ua.fromString(e);va(Fh(n));const s=new dc(n.get(1),n.get(3)),i=new Ba(n.popFirst(5));return s.isEqual(t)||pa(`Document ${i} contains a document reference within a different database (${s.projectId}/${s.database}) which is not supported. It will be treated as a reference in the current database (${t.projectId}/${t.database}) instead.`),i}}{constructor(e){super(),this.firestore=e}convertBytes(e){return new ff(e)}convertReference(e){const t=this.convertDocumentKey(e,this.firestore._databaseId);return new sf(this.firestore,null,t)}}function jf(e,t){return function(e,t){const n=new Ta;return e.asyncQueue.enqueueAndForget((async()=>async function(e,t,n){const s=Bd(e);try{const e=await function(e,t){const n=wa(e),s=Pa.now(),i=t.reduce(((e,t)=>e.add(t.key)),eh());let r,o;return n.persistence.runTransaction("Locally write mutations","readwrite",(e=>{let a=$u(),c=eh();return n.Ui.getEntries(e,i).next((e=>{a=e,a.forEach(((e,t)=>{t.isValidDocument()||(c=c.add(e))}))})).next((()=>n.localDocuments.getOverlayedDocuments(e,a))).next((i=>{r=i;const o=[];for(const e of t){const t=Du(e,r.get(e.key).overlayedDocument);null!=t&&o.push(new Lu(e.key,t,Rc(t.value.mapValue),_u.exists(!0)))}return n.mutationQueue.addMutationBatch(e,s,o,t)})).next((t=>{o=t;const s=t.applyToLocalDocumentSet(r,c);return n.documentOverlayCache.saveOverlays(e,t.batchId,s)}))})).then((()=>({batchId:o.batchId,changes:Wu(r)})))}(s.localStore,t);s.sharedClientState.addPendingMutation(e.batchId),function(e,t,n){let s=e.oc[e.currentUser.toKey()];s||(s=new Ja(Oa)),s=s.insert(t,n),e.oc[e.currentUser.toKey()]=s}(s,e.batchId,n),await Ud(s,e.changes),await Wl(s.remoteStore)}catch(e){const t=ad(e,"Failed to persist write");n.reject(t)}}(await function(e){return Hd(e).then((e=>e.syncEngine))}(e),t,n))),n.promise}(hf(e),t)}async function qf(){let e=new Ft;await async function(e,t,n){const s=St(e);!function(e,t,n){if(!(t instanceof n))throw n.name!==t.constructor.name&&Ne(e,"argument-error"),Re(e,"argument-error",`Type of ${t.constructor.name} does not match expected instance.Did you pass a reference from a different Auth SDK?`)}(e,t,Mt);const i=mn(s,void 0);return new Tn(s,"signInViaPopup",t,i).executeNotNull()}(Xn(),e)}function zf(){_(Xn()).signOut()}function Kf(e){const t=document.querySelector(".userName"),n=document.querySelector(".userPic"),s=document.querySelector(".signIn"),i=document.querySelector(".signOut");if(e){let e=Xn().currentUser.photoURL||"/icons/person.svg",r=Xn().currentUser.displayName;t.textContent=r,n.src=e,t.removeAttribute("hidden"),n.removeAttribute("hidden"),i.removeAttribute("hidden"),s.style.display="none"}else t.setAttribute("hidden","true"),n.setAttribute("hidden","true"),i.setAttribute("hidden","true"),s.style.display="flex"}!function(e,t=!0){ha="9.9.0",ae(new S("firestore",((e,{options:n})=>{const s=e.getProvider("app").getImmediate(),i=new cf(s,new Sa(e.getProvider("auth-internal")),new Na(e.getProvider("app-check-internal")));return n=Object.assign({useFetchStreams:t},n),i._setSettings(n),i}),"PUBLIC")),fe(ca,"3.4.12",e),fe(ca,"3.4.12","esm2017")}();const $f=e=>{const n=document.querySelector(".playlistBtn"),s=document.querySelector(".playlistIcon");n.addEventListener("click",(async()=>{if(Xn().currentUser){s.src="/icons/noun-remove-playlist-4700647 (1).svg",n.classList="playlistRem";const i=Xn().currentUser.uid;let r=t[e].name,o=t[e].artist,a=t[e].songSrc,c=t[e].imageSrc;await function(e,t,n){e=ef(e,sf);const s=ef(e.firestore,cf),i=function(e,t,n){let s;return s=e?n&&(n.merge||n.mergeFields)?e.toFirestore(t,n):e.toFirestore(t):t,s}(e.converter,t,n);return jf(s,[Tf(If(s),"setDoc",e._key,i,null!==e.converter,n).toMutation(e._key,_u.none())])}(function(e,t,...n){if(e=_(e),1===arguments.length&&(t=Ra.I()),Xd("doc","path",t),e instanceof nf){const s=Ua.fromString(t,...n);return Jd(s),new sf(e,null,new Ba(s))}{if(!(e instanceof sf||e instanceof of))throw new Ia(Ea.INVALID_ARGUMENT,"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");const s=e._path.child(Ua.fromString(t,...n));return Jd(s),new sf(e.firestore,e instanceof of?e.converter:null,new Ba(s))}}(uf(be),i,r),{name:r,artist:o,songSource:a,songCoverSource:c})}else alert("You have to login first.")}))},Hf=()=>{const e=document.querySelector(".main");for(;e.hasChildNodes();)e.removeChild(e.firstChild);const r=(()=>{const e=document.createElement("div");return e.classList="songCards",e})();let o=3;for(;o<6;){const e=t[o].imageSrc,s=t[o].name,i=t[o].artist,a=n(e,s,i);r.appendChild(a),o++}const a=(e=>{const t=document.createElement("img");return t.setAttribute("class","content-img"),t.src="/Illustrations/rockstar.svg",t})(),c=(()=>{const e=document.createElement("div");return e.classList="mediaPlayer",e.appendChild((()=>{let e=document.createElement("audio");return e.classList="audioElement",e.src="",e})()),e.appendChild((()=>{const e=document.createElement("div");e.classList="songDetail";const t=document.createElement("img"),n=document.createElement("div");let s=document.createElement("div"),i=document.createElement("div");return s.classList="currTime",i.classList="totalTime",t.classList="music-gif",n.classList="duration",n.appendChild(s),n.appendChild(i),t.src="",e.appendChild(t),e.appendChild(n),e})()),e.appendChild((()=>{const e=document.createElement("input");return e.setAttribute("type","range"),e.classList="musicBar",e.value=0,e})()),e.appendChild((()=>{const e=document.createElement("div"),t=document.createElement("div"),n=document.createElement("div"),s=document.createElement("div"),i=document.createElement("img"),r=document.createElement("input");r.value=100;const o=document.createElement("img"),a=document.createElement("img"),c=document.createElement("img");return o.src="/icons/back-return-svgrepo-com.svg",a.src="/icons/next-svgrepo-com.svg",c.src="",c.classList.add("playBtnImg","control-img"),a.classList.add("nextBtnImg","control-img"),o.classList.add("prevBtnImg","control-img"),t.classList.add("prevBtn","controlBtn"),s.classList.add("playBtn","controlBtn"),n.classList.add("nextBtn","controlBtn"),t.appendChild(o),s.appendChild(c),n.appendChild(a),i.classList="volImg",i.src="/icons/volume-svgrepo-com (3).svg",r.setAttribute("type","range"),r.classList="volume",e.classList="controls",e.appendChild(t),e.appendChild(s),e.appendChild(n),e.appendChild(i),e.appendChild(r),e})()),e})();e.appendChild(a),e.appendChild(r),e.appendChild(c),document.querySelector(".songCards").addEventListener("click",(e=>{if("cards"==e.target.parentElement.className){const n=e.target.parentElement.children[1].children[0].textContent;let r;for(let e=0;e<t.length;e++)t[e].name==n&&(r=e);Hf(),s(r),i(r),$f(r)}}))},Gf=e=>{if("cards"==e.target.parentElement.className){const n=e.target.parentElement.children[1].children[0].textContent;let r;for(let e=0;e<t.length;e++)t[e].name==n&&(r=e);Hf(),s(r),i(r)}},Wf=()=>{document.querySelector(".music-cards").addEventListener("click",Gf),(()=>{const e=document.querySelector(".search-bar");let n=document.querySelector(".results");const r=document.querySelector(".searchBox");e.addEventListener("focus",(()=>{})),e.addEventListener("input",(e=>{let o=e.target.value;if(o=o.toLowerCase(),""==o){for(;n.firstChild;)n.removeChild(n.firstChild);return}for(;n.firstChild;)n.removeChild(n.firstChild);for(let e=0;e<t.length;e++){let s=t[e].name;if(s=s.toLowerCase(),s.includes(o)){let s=document.createElement("div");s.classList="matchedStr";let i=document.createElement("div");i.classList="inputName";let o=document.createElement("div");o.classList="inputArtist",i.textContent=t[e].name,o.textContent=t[e].artist,s.appendChild(i),s.appendChild(o),n.appendChild(s),r.appendChild(n)}}let a=document.querySelectorAll(".matchedStr");for(let e=0;e<a.length;e++)a[e].addEventListener("click",(()=>{let n;for(let s=0;s<t.length;s++)a[e].firstChild.textContent==t[s].name&&(n=s);Hf(),s(n),i(n)}))}))})()},Qf=()=>{const e=document.querySelector(".main");for(;e.hasChildNodes();)e.removeChild(e.firstChild);const s=(()=>{const e=document.createElement("div");return e.classList="music-cards",e})();let i=0;for(;i<6;){const e=t[i].imageSrc,r=t[i].name,o=t[i].artist,a=n(e,r,o);s.appendChild(a),i++}const r=(()=>{const e=document.createElement("div");return e.classList="list-of-songs",e})();r.appendChild(s);const o=(()=>{const e=document.createElement("div");return e.setAttribute("class","content-data"),e.textContent="Get ready to enjoy the experience!",e})(),a=(()=>{const e=document.createElement("div");e.classList="searchBox";const t=document.createElement("input");t.setAttribute("type","search"),t.classList="search-bar";const n=document.createElement("div");n.classList="results";const s=document.createElement("img");return s.classList="searchIcon",s.src="/icons/color-lineal-magnifying-glass-svgrepo-com.svg",e.appendChild(s),e.appendChild(t),e.appendChild(n),e})();e.appendChild(o),e.appendChild(a),e.appendChild(r),Wf(),(()=>{const e=document.querySelector(".signIn"),t=document.querySelector(".signOut");var n;e.addEventListener("click",qf),t.addEventListener("click",zf),n=Kf,_(Xn()).onAuthStateChanged(n,void 0,void 0)})()},Xf=async()=>{const e=document.querySelector(".main"),t=document.createElement("div");for(t.classList="playlistBox";e.hasChildNodes();)e.removeChild(e.firstChild);const n=(()=>{const e=document.createElement("div");return e.classList="playlistHead",e.textContent="Playlist",e})(),s=(()=>{const e=document.createElement("div");return e.classList="playlistParent",e})(),i=Xn().currentUser.uid,r=await function(e){e=ef(e,rf);const t=ef(e.firestore,cf),n=hf(t),s=new Bf(t);return function(e){if("L"===e.limitType&&0===e.explicitOrderBy.length)throw new Ia(Ea.UNIMPLEMENTED,"limitToLast() queries require specifying at least one orderBy() clause")}(e._query),Wd(n,e._query).then((n=>new Ff(t,s,e,n)))}(function(e,t,...n){if(e=_(e),Xd("collection","path",t),e instanceof nf){const s=Ua.fromString(t,...n);return Yd(s),new of(e,null,s)}{if(!(e instanceof sf||e instanceof of))throw new Ia(Ea.INVALID_ARGUMENT,"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");const s=e._path.child(Ua.fromString(t,...n));return Yd(s),new of(e.firestore,null,s)}}(uf(be),i));r.forEach((e=>{let t=e.data(),n=((e,t,n)=>{const s=document.createElement("div");s.classList="songBar";const i=document.createElement("div");i.classList="leftParent";const r=document.createElement("div");r.classList="mainInfo";const o=document.createElement("img");o.classList="songCover";const a=document.createElement("div");a.classList="namePlaylist";const c=document.createElement("div");c.classList="artistPlaylist";const u=document.createElement("img");return u.classList="remBtn",u.src="/icons/trash-can-regular.svg",o.src=n,a.textContent=e,c.textContent=t,r.appendChild(a),r.appendChild(c),i.appendChild(o),i.appendChild(r),s.appendChild(i),s.appendChild(u),s})(t.name,t.artist,t.songCoverSource);s.appendChild(n)})),t.appendChild(n),t.appendChild(s),e.appendChild(t)};(()=>{Qf();const e=document.querySelector(".home-btn"),t=document.querySelector(".music-list-btn"),n=document.querySelector(".playlist-btn");e.addEventListener("click",Qf),t.addEventListener("click",Hf),n.addEventListener("click",Xf)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,